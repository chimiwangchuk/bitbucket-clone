'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _intersection = require('./intersection');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Monitors scroll, and triggers the children function with updated props
 *
 <Observer>
 {inView => (
   <h1>{`${inView}`}</h1>
 )}
 </Observer>
 */
var Observer = function (_React$Component) {
  _inherits(Observer, _React$Component);

  function Observer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Observer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Observer.__proto__ || Object.getPrototypeOf(Observer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      inView: false
    }, _this.node = null, _this.handleNode = function (node) {
      if (_this.node) (0, _intersection.unobserve)(_this.node);
      _this.node = node;
      _this.observeNode();

      if (_this.props.innerRef) {
        _this.props.innerRef(node);
      }
    }, _this.handleChange = function (inView) {
      _this.setState({ inView: inView });
      if (_this.props.onChange) {
        _this.props.onChange(inView);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Observer, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      // If a IntersectionObserver option changed, reinit the observer
      if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold) {
        (0, _intersection.unobserve)(this.node);
        this.observeNode();
      }

      if (prevState.inView !== this.state.inView) {
        if (this.state.inView && this.props.triggerOnce) {
          (0, _intersection.unobserve)(this.node);
          this.node = null;
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.node) {
        (0, _intersection.unobserve)(this.node);
        this.node = null;
      }
    }
  }, {
    key: 'observeNode',
    value: function observeNode() {
      if (!this.node) return;
      var _props = this.props,
          threshold = _props.threshold,
          root = _props.root,
          rootMargin = _props.rootMargin,
          rootId = _props.rootId;

      (0, _intersection.observe)(this.node, this.handleChange, {
        threshold: threshold,
        root: root,
        rootMargin: rootMargin
      }, rootId);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          render = _props2.render,
          tag = _props2.tag,
          innerRef = _props2.innerRef,
          triggerOnce = _props2.triggerOnce,
          threshold = _props2.threshold,
          root = _props2.root,
          rootId = _props2.rootId,
          rootMargin = _props2.rootMargin,
          props = _objectWithoutProperties(_props2, ['children', 'render', 'tag', 'innerRef', 'triggerOnce', 'threshold', 'root', 'rootId', 'rootMargin']);

      var inView = this.state.inView;


      return React.createElement(tag, _extends({}, props, {
        ref: this.handleNode
      }),
      // If render is a function, use it to render content when in view
      typeof render === 'function' ? render(inView) : null,
      // If children is a function, render it with the current inView status.
      // Otherwise always render children. Assume onChange is being used outside, to control the the state of children.
      typeof children === 'function' ? children(inView) : children);
    }
  }]);

  return Observer;
}(React.Component);

Observer.defaultProps = {
  tag: 'div',
  threshold: 0,
  triggerOnce: false
};
exports.default = Observer;