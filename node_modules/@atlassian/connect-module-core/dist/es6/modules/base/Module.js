import * as tslib_1 from "tslib";
import * as React from 'react';
import { logger } from '../../adaptors/logger/LoggerAdaptor';
export var ModuleDefinitions;
(function (ModuleDefinitions) {
    ModuleDefinitions.MIN_REGISTRATION_NAME_LENGTH = 1;
    ModuleDefinitions.MAX_REGISTRATION_NAME_LENGTH = 50;
})(ModuleDefinitions || (ModuleDefinitions = {}));
/**
 * This class provides common module behaviour and characteristics. The term 'Module' refers to
 * a set of related functionality and provides the interface between a product that requires the
 * module functionality and the framework that implements it.
 */
var BaseModule = /** @class */ (function (_super) {
    tslib_1.__extends(BaseModule, _super);
    function BaseModule(props) {
        return _super.call(this, props) || this;
    }
    BaseModule.prototype.componentDidMount = function () {
        var props = this.props;
        var registrationName = this.getModuleRegistrationName();
        logger.debug('Mounting module', registrationName, '...');
        this.validateRegistrationName(registrationName);
        props.adaptor.registerModule(this, props);
        var moduleState = this.state;
        moduleState.enabled = true;
        moduleState.registered = true;
        this.setState(moduleState);
    };
    BaseModule.prototype.setEnabled = function (enabled) {
        var moduleState = this.state;
        moduleState.enabled = enabled;
        this.setState(moduleState);
    };
    BaseModule.prototype.isEnabled = function () {
        return this.state.enabled;
    };
    BaseModule.prototype.componentWillUnmount = function () {
        // Do nothing - we don't unregister modules.
    };
    BaseModule.prototype.shouldComponentUpdate = function () {
        // This module hierarchy never renders anything.
        return false;
    };
    BaseModule.prototype.validateRegistrationName = function (registrationName) {
        if (!registrationName || registrationName.length < ModuleDefinitions.MIN_REGISTRATION_NAME_LENGTH) {
            throw new Error('The registration name is too short (< ' + ModuleDefinitions.MIN_REGISTRATION_NAME_LENGTH + ' characters).');
        }
        if (registrationName.length > ModuleDefinitions.MAX_REGISTRATION_NAME_LENGTH) {
            throw new Error('The registration name is too long (> ' + ModuleDefinitions.MAX_REGISTRATION_NAME_LENGTH + ' characters).');
        }
        if (!registrationName.match(/^[a-z]+$/i)) {
            throw new Error('The registration name must only contain alphabetic characters.');
        }
    };
    BaseModule.prototype.render = function () {
        return null;
    };
    return BaseModule;
}(React.Component));
export { BaseModule };
//# sourceMappingURL=Module.js.map