import { logger } from '../../adaptors/logger/LoggerAdaptor';
import { analytics } from '../../adaptors/analytics/AnalyticsAdaptor';
import { allowedStrings, AnalyticsCategories, AnalyticsActions } from '../../adaptors/analytics/AnalyticsConstants';
/*
 * Same as in ACJS. See loading_indicator.js.
 */
var DEFAULT_APP_LOADING_TIMEOUT = 12000;
var connectIframes = [];
var registerHostCallbacks = true;
var hostIframeEstablishedCallback = function (data) {
    var connectIframe = connectIframes.find(function (connectIframe) { return data.extension.id === connectIframe.getId(); });
    if (connectIframe) {
        var manager = connectIframe.getIFrameLifecycleEventManager();
        if (manager) {
            manager.iframeEstablishedCallback(data);
        }
    }
};
var hostIframeUnloadCallback = function (data) {
    var connectIframe = connectIframes.find(function (connectIframe) { return data.extension.id === connectIframe.getId(); });
    if (connectIframe) {
        var manager = connectIframe.getIFrameLifecycleEventManager();
        if (manager) {
            manager.iframeUnloadCallback(data);
        }
    }
};
var IFrameLifecycleEventManager = /** @class */ (function () {
    function IFrameLifecycleEventManager(connectIframe) {
        var _this = this;
        this.reset = function () {
            connectIframes = [];
            registerHostCallbacks = true;
        };
        this.unregister = function (connectIframe) {
            var index = connectIframes.indexOf(connectIframe);
            if (index > -1) {
                connectIframes.splice(index, 1);
            }
            _this.clearTimeoutDetectionProcessing();
        };
        this.iframeEstablishedCallback = function (data) {
            logger.debug('Established iframe for add-on ', data.extension.addon_key, data);
            if (_this.connectIframe.props.connectIframeProvider.handleIframeLoadingComplete) {
                _this.connectIframe.props.connectIframeProvider.handleIframeLoadingComplete(data.extension.addon_key);
            }
            var loadTime = (new Date()).getTime();
            var durationToLoadMs = loadTime - _this.creationTimeMs;
            var payload = {
                hostFrameOffset: analytics.dangerouslyCreateSafeString((_this.connectIframe.props.options.hostFrameOffset || 1).toString()),
                durationToLoadMs: analytics.dangerouslyCreateSafeString(durationToLoadMs.toString())
            };
            analytics.trigger(AnalyticsCategories.iframe, analytics.markAsSafe.apply(analytics, allowedStrings)(AnalyticsActions.established), analytics.dangerouslyCreateSafeString(data.extension.addon_key), payload);
            _this.connectIframe.iframeEstablishedCallback();
            _this.clearTimeoutDetectionProcessing();
        };
        this.iframeUnloadCallback = function (data) {
            logger.debug('Unloaded iframe for add-on ', data.extension.id, data);
            if (_this.connectIframe.props.connectIframeProvider.handleIframeUnload) {
                _this.connectIframe.props.connectIframeProvider.handleIframeUnload(data.extension.id);
            }
            var unloadTime = (new Date()).getTime();
            var sessionDurationMs = unloadTime - _this.creationTimeMs;
            var payload = {
                hostFrameOffset: analytics.dangerouslyCreateSafeString((_this.connectIframe.props.options.hostFrameOffset || 1).toString()),
                sessionDurationMs: analytics.dangerouslyCreateSafeString(sessionDurationMs.toString())
            };
            analytics.trigger(AnalyticsCategories.iframe, analytics.markAsSafe.apply(analytics, allowedStrings)(AnalyticsActions.close), analytics.dangerouslyCreateSafeString(data.extension.id), payload);
        };
        this.startTimeoutDetectionProcessing = function () {
            logger.debug('Starting iframe timed out processing for add-on ', _this.connectIframe.props.appKey);
            var timeoutMilliseconds = _this.getLoadingTimeout();
            _this.timeoutHandle = window.setTimeout(function () {
                logger.warn('Add-on iframe timed out for add-on ', _this.connectIframe.props.appKey);
                _this.timeoutHandle = 0;
                if (_this.connectIframe.props.connectIframeProvider.handleIframeLoadTimeout) {
                    _this.connectIframe.props.connectIframeProvider.handleIframeLoadTimeout(_this.connectIframe.props.appKey, _this.connectIframe.iframeFailedToLoadCallback.bind(_this));
                }
                var payload = {
                    hostFrameOffset: analytics.dangerouslyCreateSafeString((_this.connectIframe.props.options.hostFrameOffset || 1).toString())
                };
                analytics.trigger(AnalyticsCategories.iframe, analytics.markAsSafe.apply(analytics, allowedStrings)(AnalyticsActions.timeout), analytics.dangerouslyCreateSafeString(_this.connectIframe.props.appKey), payload);
                _this.connectIframe.iframeTimeoutCallback();
            }, timeoutMilliseconds);
        };
        this.getLoadingTimeout = function () {
            var providedTimeoutMilliseconds = _this.connectIframe.props.connectIframeProvider.getLoadingTimeoutMilliseconds ?
                _this.connectIframe.props.connectIframeProvider.getLoadingTimeoutMilliseconds(_this.connectIframe.props.appKey) :
                DEFAULT_APP_LOADING_TIMEOUT;
            var timeoutMilliseconds = providedTimeoutMilliseconds && providedTimeoutMilliseconds > 0 ?
                providedTimeoutMilliseconds : DEFAULT_APP_LOADING_TIMEOUT;
            return timeoutMilliseconds;
        };
        this.clearTimeoutDetectionProcessing = function () {
            if (_this.timeoutHandle) {
                logger.debug('Clearing iframe timed out timer for add-on ', _this.connectIframe.props.appKey);
                window.clearTimeout(_this.timeoutHandle);
                _this.timeoutHandle = 0;
            }
        };
        this.creationTimeMs = (new Date()).getTime();
        this.connectIframe = connectIframe;
        connectIframes.push(connectIframe);
        if (registerHostCallbacks) {
            this.connectIframe.props.connectHost.onIframeEstablished(hostIframeEstablishedCallback);
            this.connectIframe.props.connectHost.onIframeUnload(hostIframeUnloadCallback);
            registerHostCallbacks = false;
        }
        this.startTimeoutDetectionProcessing();
        if (this.connectIframe.props.connectIframeProvider.handleIframeLoadingStarted) {
            this.connectIframe.props.connectIframeProvider.handleIframeLoadingStarted(this.connectIframe.props.appKey);
        }
    }
    return IFrameLifecycleEventManager;
}());
export default IFrameLifecycleEventManager;
//# sourceMappingURL=IFrameLifecycleEventManager.js.map