import * as tslib_1 from "tslib";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { logger } from '../../adaptors/logger/LoggerAdaptor';
import { analytics } from '../../adaptors/analytics/AnalyticsAdaptor';
import IFrameLifecycleEventManager from './IFrameLifecycleEventManager';
import { allowedStrings, AnalyticsCategories, AnalyticsActions } from '../../adaptors/analytics/AnalyticsConstants';
export var LoadingState = Object.freeze({
    INIT: Symbol('init'),
    LOADED: Symbol('loaded'),
    FAILED: Symbol('failed'),
    TIMEOUT: Symbol('timeout'),
    LOADING: Symbol('loading'),
    RESOLVING: Symbol('resolving')
});
/**
 * ConnectIframe represents an add-on within a view.
 */
var ConnectIframe = /** @class */ (function (_super) {
    tslib_1.__extends(ConnectIframe, _super);
    function ConnectIframe(props) {
        var _this = _super.call(this, props) || this;
        _this.unmountCallbacks = [];
        _this.resize = function (width, height) {
            _this.setState({ width: width, height: height });
        };
        _this.sizeToParent = function () {
            _this.setState({ width: '100%', height: '100%' });
        };
        _this.registerUnmountCallback = function (callback) {
            _this.unmountCallbacks.push(callback);
        };
        _this.hideInlineDialog = function () {
            if (_this.props.connectIframeProvider.onHideInlineDialog) {
                _this.props.connectIframeProvider.onHideInlineDialog();
            }
        };
        _this.getId = function () {
            if (_this.iframeAttributes) {
                return _this.iframeAttributes.id;
            }
            else {
                return null;
            }
        };
        _this.getIFrameLifecycleEventManager = function () {
            return _this.iframeLifecycleEventManager;
        };
        _this.iframeEstablishedCallback = function () {
            _this.setState({ loadingState: LoadingState.LOADED });
        };
        _this.iframeFailedToLoadCallback = function () {
            _this.setState({ loadingState: LoadingState.FAILED });
        };
        _this.iframeTimeoutCallback = function () {
            _this.setState({ loadingState: LoadingState.TIMEOUT });
        };
        _this._createIFrameLifecycleManager = function () {
            _this.iframeLifecycleEventManager = new IFrameLifecycleEventManager(_this);
        };
        _this._unregisterIFrameLifecycleManager = function () {
            if (_this.iframeLifecycleEventManager) {
                _this.iframeLifecycleEventManager.unregister(_this);
            }
        };
        _this._createExtension = function () {
            var simpleXdmExtension = _this.props.connectHost.createExtension({
                addon_key: _this.iframeContext.appKey,
                key: _this.iframeContext.moduleKey,
                url: _this.iframeContext.url,
                options: Object.assign({}, _this.iframeContext.options, {
                    resize: _this.resize.bind(_this),
                    sizeToParent: _this.sizeToParent.bind(_this),
                    registerUnmountCallback: _this.registerUnmountCallback.bind(_this),
                    _contextualOperations: {
                        hideInlineDialog: _this.hideInlineDialog.bind(_this)
                    }
                })
            });
            _this.iframeAttributes = simpleXdmExtension.iframeAttributes;
            logger.debug('Created iframe for add-on ', _this.iframeContext.appKey, _this.iframeAttributes);
            analytics.trigger(AnalyticsCategories.iframe, analytics.markAsSafe.apply(analytics, allowedStrings)(AnalyticsActions.create), analytics.dangerouslyCreateSafeString(_this.iframeContext.appKey), {});
        };
        _this._destroyExtension = function () {
            if (_this.iframeAttributes) {
                _this.props.connectHost.destroy(_this.iframeAttributes.id);
            }
        };
        _this._isSubIframe = function () {
            return (_this.state.hostFrameOffset && _this.state.hostFrameOffset > 1);
        };
        _this._initialise = function () {
            if (_this.props.children && _this.props.connectIframeProvider.onStoreNestedIframeJSON) {
                var childComponent = _this.props.children;
                var childProps = childComponent.props;
                _this.props.connectIframeProvider.onStoreNestedIframeJSON(childProps);
            }
            if (_this._isSubIframe()) {
                _this.setState({ loadingState: LoadingState.LOADING });
                return;
            }
            _this._createIFrameLifecycleManager();
            if (!_this.props.connectIframeProvider.resolveIframeContext) {
                _this._createExtension();
                _this.setState({ loadingState: LoadingState.LOADING });
                return;
            }
            _this.props.connectIframeProvider.resolveIframeContext(_this.iframeContext, _this.props.connectHost)
                .then(function (iframeContext) {
                var propsMutated = (iframeContext.appKey !== _this.props.appKey) || (iframeContext.moduleKey !== _this.props.moduleKey);
                if (propsMutated) {
                    logger.warn('Iframe context changed during resolution');
                    return;
                }
                _this.iframeContext = iframeContext;
                _this._createExtension();
                _this.setState({ loadingState: LoadingState.LOADING });
            });
        };
        _this.state = {
            width: props.width,
            height: props.height,
            loadingState: LoadingState.INIT,
            hostFrameOffset: props.options.hostFrameOffset || 1
        };
        _this.iframeContext = {
            url: props.url,
            appKey: props.appKey,
            moduleKey: props.moduleKey,
            options: props.options
        };
        return _this;
    }
    ConnectIframe.prototype.componentWillReceiveProps = function (nextProps) {
        if ((this.props.appKey !== nextProps.appKey) ||
            (this.props.moduleKey !== nextProps.moduleKey)) {
            this._unregisterIFrameLifecycleManager();
            this._destroyExtension();
            this.setState({
                width: nextProps.width,
                height: nextProps.height,
                hostFrameOffset: nextProps.options.hostFrameOffset || 1,
                loadingState: LoadingState.INIT
            });
        }
    };
    ConnectIframe.prototype.componentWillUnmount = function () {
        this.unmountCallbacks.forEach(function (cb) { return cb(); });
        this._unregisterIFrameLifecycleManager();
        this._destroyExtension();
    };
    ConnectIframe.prototype.render = function () {
        switch (this.state.loadingState) {
            case LoadingState.LOADED:
            case LoadingState.LOADING:
            case LoadingState.TIMEOUT:
                var iframeStyles = void 0;
                // Ask the product for the styles to use...
                if (this.props.connectIframeProvider.buildIframeStyles) {
                    iframeStyles = this.props.connectIframeProvider.buildIframeStyles(this.state.loadingState, LoadingState);
                }
                // if iframeStyles is undefined and loadingState is loading/timeout, set the default style
                if (!iframeStyles && (this.state.loadingState === LoadingState.LOADING || this.state.loadingState === LoadingState.TIMEOUT)) {
                    iframeStyles = { opacity: 0.0 };
                }
                return (React.createElement(this.props.iframeContainer, { width: this.state.width, height: this.state.height },
                    this.state.loadingState === LoadingState.TIMEOUT ?
                        React.createElement(this.props.timeoutIndicator, { failedCallback: this.iframeFailedToLoadCallback.bind(this) }) : null,
                    this.state.loadingState === LoadingState.LOADING ?
                        React.createElement(this.props.loadingIndicator, null) : null,
                    this._isSubIframe() ? this.props.children :
                        React.createElement("iframe", tslib_1.__assign({ frameBorder: "0", width: this.state.width, height: this.state.height, style: iframeStyles }, this.iframeAttributes, { referrerPolicy: 'no-referrer' }), this.props.children)));
            case LoadingState.FAILED:
                return React.createElement("div", { style: { height: this.state.height } },
                    React.createElement(this.props.failedToLoadIndicator, null));
            case LoadingState.INIT:
            case LoadingState.RESOLVING:
            default:
                return null;
        }
    };
    ConnectIframe.prototype.componentDidMount = function () {
        if (this.state.loadingState === LoadingState.INIT) {
            this.setState({ loadingState: LoadingState.RESOLVING });
            this._initialise();
        }
    };
    ConnectIframe.prototype.componentDidUpdate = function () {
        if (this.state.loadingState === LoadingState.INIT) {
            this.setState({ loadingState: LoadingState.RESOLVING });
            this._initialise();
        }
    };
    ConnectIframe.propTypes = {
        connectHost: PropTypes.object.isRequired,
        appKey: PropTypes.string.isRequired,
        moduleKey: PropTypes.string.isRequired,
        iframeContainer: PropTypes.func,
        loadingIndicator: PropTypes.func,
        failedToLoadIndicator: PropTypes.func,
        timeoutIndicator: PropTypes.func,
        url: PropTypes.string,
        width: PropTypes.string,
        height: PropTypes.string,
        options: PropTypes.object,
        connectIframeProvider: PropTypes.object
    };
    ConnectIframe.defaultProps = {
        options: {},
        connectIframeProvider: {},
        iframeContainer: function (_a) {
            var width = _a.width, height = _a.height, children = _a.children;
            return (React.createElement("div", { style: {
                    position: 'relative',
                    width: width === '100%' ? '100%' : 'auto',
                    height: height === '100%' ? '100%' : 'auto'
                } }, children));
        },
        failedToLoadIndicator: function () { return null; },
        loadingIndicator: function () { return null; },
        timeoutIndicator: function () { return null; }
    };
    return ConnectIframe;
}(React.PureComponent));
export { ConnectIframe };
//# sourceMappingURL=ConnectIframe.js.map