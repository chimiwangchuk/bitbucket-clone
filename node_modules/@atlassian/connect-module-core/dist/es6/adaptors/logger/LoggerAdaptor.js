import DefaultLoggerAPI from './DefaultLoggerAPI';
var LoggerController = /** @class */ (function () {
    function LoggerController() {
        this.debugEnabled = false;
        this.infoEnabled = true;
    }
    LoggerController.prototype.isDebugEnabled = function () {
        return this.debugEnabled;
    };
    LoggerController.prototype.isInfoEnabled = function () {
        return this.infoEnabled;
    };
    /**
     * In the browser console, enable debug by entering window._loggerController.enableDebug().
     */
    LoggerController.prototype.enableDebug = function () {
        console.info('Enabling debug...');
        this.debugEnabled = true;
        return 'Debug level logging is now enabled.   ۜ\(סּںסּَ` )/ۜ';
    };
    /**
     * In the browser console, disable debug by entering window._loggerController.disableDebug().
     */
    LoggerController.prototype.disableDebug = function () {
        console.info('Disabling debug...');
        this.debugEnabled = false;
        return 'Debug level logging is now disabled. ε(´סּ︵סּ`)з';
    };
    /**
     * In the browser console, enable info by entering window._loggerController.enableInfo().
     */
    LoggerController.prototype.enableInfo = function () {
        console.info('Enabling info...');
        this.infoEnabled = true;
        return 'Info level logging is now enabled. 【ツ】';
    };
    /**
     * In the browser console, disable info by entering window._loggerController.disableInfo().
     * <br/>
     * <strong>Note</strong>: disabling info will also disable debug.
     */
    LoggerController.prototype.disableInfo = function () {
        console.info('Disabling info...');
        this.debugEnabled = false;
        this.infoEnabled = false;
        return 'Info level logging is now disabled. (-.-)Zzz...';
    };
    return LoggerController;
}());
/**
 * This class serves two purposes:
 *   - It provides the ability for products to register their implementations
 *     of LoggerAPI for use by the connect front end code.
 *   - It provides the LoggerAPI implementation that connect front end code
 *     should use. This implementation delegates to the registered LoggerAPI
 *     implementation. This class should be used within the connect front end
 *     code as follows:
 *
 *     import logger from '../adaptors/logger/LoggerAdaptor';
 *
 *     logger.info('My message', extraStuffOfInterest, etc, ...);
 */
var LoggerAdaptor = /** @class */ (function () {
    function LoggerAdaptor() {
        this.loggerAPI = DefaultLoggerAPI;
        this.loggerController = new LoggerController();
        window._loggerController = this.loggerController;
    }
    /**
     * Implementation of AnalyticsRegistry#registerAnalyticsAPI().
     */
    LoggerAdaptor.prototype.registerLoggerAPI = function (loggerAPI) {
        this.loggerAPI = loggerAPI;
    };
    /**
     * Implementation of LoggerAPI#debug() for use by connect-module-core code.
     */
    LoggerAdaptor.prototype.debug = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        try {
            if (this.loggerController.isDebugEnabled()) {
                this.loggerAPI.debug.apply(this.loggerAPI, arguments);
            }
        }
        catch (exception) {
            // Ignore
        }
    };
    /**
     * Implementation of LoggerAPI#info() for use by connect-module-core code.
     */
    LoggerAdaptor.prototype.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        try {
            if (this.loggerController.isInfoEnabled()) {
                this.loggerAPI.info.apply(this.loggerAPI, arguments);
            }
        }
        catch (exception) {
            // Ignore
        }
    };
    /**
     * Implementation of LoggerAPI#warn() for use by connect-module-core code.
     */
    LoggerAdaptor.prototype.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        try {
            this.loggerAPI.warn.apply(this.loggerAPI, arguments);
        }
        catch (exception) {
            var logger_1 = console.warn || console.log;
            if (logger_1) {
                logger_1.apply(logger_1, arguments);
            }
        }
    };
    /**
     * Implementation of LoggerAPI#error() for use by connect-module-core code.
     */
    LoggerAdaptor.prototype.error = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        try {
            this.loggerAPI.error.apply(this.loggerAPI, arguments);
        }
        catch (exception) {
            var logger_2 = console.error || console.log;
            if (logger_2) {
                logger_2.apply(logger_2, arguments);
            }
        }
    };
    return LoggerAdaptor;
}());
export var logger = new LoggerAdaptor();
//# sourceMappingURL=LoggerAdaptor.js.map