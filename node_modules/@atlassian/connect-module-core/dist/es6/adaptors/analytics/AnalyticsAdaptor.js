import DefaultAnalyticsAPI from './DefaultAnalyticsAPI';
import { logger } from '../logger/LoggerAdaptor';
var AnalyticsController = /** @class */ (function () {
    function AnalyticsController() {
        this.loggingEnabled = false;
    }
    AnalyticsController.prototype.isLoggingEnabled = function () {
        return this.loggingEnabled;
    };
    /**
     * In the browser console, enable analytics logging by entering window._analyticsController.enableAnalyticsLogging().
     */
    AnalyticsController.prototype.enableAnalyticsLogging = function () {
        console.info('Enabling analytics logging...');
        this.loggingEnabled = true;
        return "Analytics logging is now enabled. (>'-')> <('_'<) ^('_')\- \m/(-_-)\m/ <( '-')> \_( .\")> <( ._.)-`";
    };
    /**
     * In the browser console, disable analytics logging by entering window._analyticsController.disableAnalyticsLogging().
     */
    AnalyticsController.prototype.disableAnalyticsLogging = function () {
        console.info('Disabling analytics logging...');
        this.loggingEnabled = false;
        return 'Analytics logging is now disabled. ¯\\_(ツ)_/¯';
    };
    return AnalyticsController;
}());
/**
 * This class serves two purposes:
 *   - It provides the ability for products to register their implementations
 *     of AnalyticsAPI for use by the connect front end code.
 *   - It provides the AnalyticsAPI implementation that connect front end code
 *     should use. This implementation delegates to the registered AnalyticsAPI
 *     implementation. This class should be used within the connect front end
 *     code as follows:
 *
 *     import analytics from '../adaptors/analytics/AnalyticsAdaptor';
 *
 *     analytics.trigger('Flags', 'close', {'type': 'warning'});
 */
var AnalyticsAdaptor = /** @class */ (function () {
    function AnalyticsAdaptor() {
        this.analyticsAPI = DefaultAnalyticsAPI;
        this.analyticsController = new AnalyticsController();
        window._analyticsController = this.analyticsController;
    }
    /**
     * Implementation of AnalyticsRegistry#registerAnalyticsAPI().
     */
    AnalyticsAdaptor.prototype.registerAnalyticsAPI = function (analyticsAPI) {
        this.analyticsAPI = analyticsAPI;
    };
    /**
     * Implementation of AnalyticsAPI#trigger() for use by connect-module-core code.
     */
    AnalyticsAdaptor.prototype.trigger = function (category, action, appKey, payload) {
        try {
            this.analyticsAPI.trigger(category, action, appKey, payload);
            if (this.analyticsController.isLoggingEnabled()) {
                logger.info('Analytics:', category, action, appKey, payload);
            }
        }
        catch (exception) {
            logger.warn('Exception trapped triggering analytics event', exception);
        }
    };
    AnalyticsAdaptor.prototype.markAsSafe = function () {
        var allowedStrings = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            allowedStrings[_i] = arguments[_i];
        }
        var _a;
        if (this.analyticsAPI.markAsSafe) {
            return (_a = this.analyticsAPI).markAsSafe.apply(_a, allowedStrings);
        }
        else {
            return DefaultAnalyticsAPI.markAsSafe.apply(DefaultAnalyticsAPI, allowedStrings);
        }
    };
    AnalyticsAdaptor.prototype.dangerouslyCreateSafeString = function (value) {
        if (this.analyticsAPI.dangerouslyCreateSafeString) {
            return this.analyticsAPI.dangerouslyCreateSafeString(value);
        }
        else {
            return DefaultAnalyticsAPI.dangerouslyCreateSafeString(value);
        }
    };
    return AnalyticsAdaptor;
}());
export var analytics = new AnalyticsAdaptor();
//# sourceMappingURL=AnalyticsAdaptor.js.map