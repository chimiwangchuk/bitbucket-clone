/**
 * This class provides common behaviour relating to the adaption of functionality to a
 * particular Connect client framework. This is necessary for an interim period during which
 * we have multiple Connect client frameworks that we need to support: ACJS and CaaS Client.
 */
var BaseFrameworkAdaptor = /** @class */ (function () {
    function BaseFrameworkAdaptor() {
        this.moduleNamesToModules = new Map();
    }
    /**
     * This method registers a module with the Connect client framework relating to this adaptor instance.
     * @param moduleDefinition the definition of the module.
     */
    BaseFrameworkAdaptor.prototype.registerModule = function (module, props) {
        var moduleRegistrationName = module.getModuleRegistrationName();
        this.moduleNamesToModules.set(moduleRegistrationName, module);
        var simpleXdmDefinitionBuilder = module.getSimpleXdmDefinitionBuilder();
        var simpleXdmDefinition = simpleXdmDefinitionBuilder.buildSimpleXdmDefinition();
        this.registerModuleWithHost(moduleRegistrationName, simpleXdmDefinition);
    };
    BaseFrameworkAdaptor.prototype.getModuleByName = function (moduleName) {
        return this.moduleNamesToModules.get(moduleName);
    };
    /**
     * This routine gets a module provider based on the module's name. The provider will only be returned if
     * the module is enabled.
     * @param moduleName the name of the module.
     * @returns {any} the module provider if found and enabled.
     */
    BaseFrameworkAdaptor.prototype.getProviderByModuleName = function (moduleName) {
        var module = this.moduleNamesToModules.get(moduleName);
        if (module && module.isEnabled()) {
            return module.getProvider();
        }
        else {
            return undefined;
        }
    };
    return BaseFrameworkAdaptor;
}());
export { BaseFrameworkAdaptor };
//# sourceMappingURL=BaseFrameworkAdaptor.js.map