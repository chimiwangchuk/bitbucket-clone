var TestContextualOperations = /** @class */ (function () {
    function TestContextualOperations() {
        this.inlineDialogOpen = true;
    }
    TestContextualOperations.prototype.resize = function (width, height) {
        throw new Error('Not implemented yet');
    };
    TestContextualOperations.prototype.sizeToParent = function () {
        throw new Error('Not implemented yet');
    };
    /**
     * This method hides the inline dialog that the add-on identified by this context is
     * being displayed in.
     */
    TestContextualOperations.prototype.hideInlineDialog = function () {
        this.inlineDialogOpen = false;
    };
    TestContextualOperations.prototype.isInlineDialogOpen = function () {
        return this.inlineDialogOpen;
    };
    return TestContextualOperations;
}());
export { TestContextualOperations };
var TestAppInstance = /** @class */ (function () {
    function TestAppInstance(appKey, id, key, options) {
        this.addon_key = appKey;
        this.id = id;
        this.key = key;
        this.options = options;
    }
    return TestAppInstance;
}());
export { TestAppInstance };
var TestAppOptions = /** @class */ (function () {
    function TestAppOptions(autoresize, widthinpx, hostFrameOffset, _contextualOperations) {
        this.autoresize = autoresize;
        this.widthinpx = widthinpx;
        this.hostFrameOffset = hostFrameOffset;
        this._contextualOperations = _contextualOperations;
    }
    return TestAppOptions;
}());
export { TestAppOptions };
var TestAppContext = /** @class */ (function () {
    function TestAppContext(extension) {
        this.extension = extension;
    }
    TestAppContext.buildNewInstance = function () {
        var contextualOperations = new TestContextualOperations();
        var autoresize = true;
        var widthinpx = true;
        var hostFrameOffset = 1;
        var appOptions = new TestAppOptions(autoresize, widthinpx, hostFrameOffset, contextualOperations);
        var randomId = (new Date()).getMilliseconds();
        var appKey = 'foo';
        var key = 'bar';
        var id = appKey + '__' + key + '__' + randomId;
        var appInstance = new TestAppInstance(appKey, id, key, appOptions);
        var appContext = new TestAppContext(appInstance);
        return appContext;
    };
    return TestAppContext;
}());
export { TestAppContext };
//# sourceMappingURL=TestAppContext.js.map