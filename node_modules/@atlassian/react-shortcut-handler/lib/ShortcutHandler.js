'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _combokeys = require('combokeys');

var _combokeys2 = _interopRequireDefault(_combokeys);

var _globalBind = require('combokeys/plugins/global-bind');

var _globalBind2 = _interopRequireDefault(_globalBind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

// Simplified version of https://github.com/dashed/shallowequal added
// to avoid requiring another dependency
var shallowEqual = function shallowEqual(a, b) {
  if (a === b) {
    return true;
  }

  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== 'object' || !a || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== 'object' || !b) {
    return false;
  }

  var keysA = Object.keys(a),
      keysB = Object.keys(b),
      has = Object.prototype.hasOwnProperty.bind(b);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    var key = keysA[i];
    if (!has(key) || a[key] !== b[key]) {
      return false;
    }
  }

  return true;
};

function preventDefaultEventBehaviorHandler(handler, options) {
  var stopPropagation = options.stopPropagation,
      preventDefault = options.preventDefault;


  return function (e) {
    if (stopPropagation) {
      e.stopPropagation();
    }
    if (preventDefault) {
      e.preventDefault();
    }

    handler.apply(handler, arguments);
  };
}
/*
 * This component provides an easy way to handle shortcut key events.
 */

var ShortcutHandler = function (_React$Component) {
  _inherits(ShortcutHandler, _React$Component);

  function ShortcutHandler(props) {
    _classCallCheck(this, ShortcutHandler);

    var _this = _possibleConstructorReturn(this, (ShortcutHandler.__proto__ || Object.getPrototypeOf(ShortcutHandler)).call(this, props));

    _this.setRef = _this.setRef.bind(_this);
    _this.setupKeyBinder = _this.setupKeyBinder.bind(_this);
    return _this;
  }

  _createClass(ShortcutHandler, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setupKeyBinder(this.props);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          keyBindings = _props.keyBindings,
          isGlobal = _props.isGlobal;

      var hasBeenModified = !shallowEqual(prevProps.keyBindings, keyBindings) || prevProps.isGlobal !== isGlobal;

      if (hasBeenModified) {
        this.comboKeyBinder.detach();
        this.setupKeyBinder(this.props);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.comboKeyBinder.detach();
    }
  }, {
    key: 'setRef',
    value: function setRef(ref) {
      this.ref = ref;
    }
  }, {
    key: 'setupKeyBinder',
    value: function setupKeyBinder(props) {
      var _this2 = this;

      // When isGlobal is true, this shortcut will fire regardless of what DOM node is focused
      // Otherwise shortcut will only fire when child nodes of this component are focused
      var target = props.isGlobal ? document.documentElement : this.ref;

      // globalBind / bindGlobal is a combokeys plugin that allows this shortcut to fire even when a text
      // input node is focused. Might want to make this behavior a configurable prop.
      this.comboKeyBinder = (0, _globalBind2.default)(new _combokeys2.default(target));

      var actions = Object.keys(this.props.keyBindings);
      actions.forEach(function (action) {
        var definition = _this2.props.keyBindings[action];
        var combo = definition.sequence;
        var _props2 = _this2.props,
            preventDefault = _props2.preventDefault,
            stopPropagation = _props2.stopPropagation;


        var handler = definition.handler ? preventDefaultEventBehaviorHandler(definition.handler, { preventDefault: preventDefault, stopPropagation: stopPropagation }) : noop; //no-op if handler not defined

        if (definition.whenTyping) {
          _this2.comboKeyBinder.bindGlobal(combo, handler);
        } else {
          _this2.comboKeyBinder.bind(combo, handler);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { ref: this.setRef, className: this.props.className, id: this.props.id, tabIndex: this.props.tabIndex },
        this.props.children
      );
    }
  }]);

  return ShortcutHandler;
}(_react2.default.Component);

ShortcutHandler.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  keyBindings: _propTypes2.default.objectOf(_propTypes2.default.object).isRequired,
  isGlobal: _propTypes2.default.bool,
  id: _propTypes2.default.string,
  tabIndex: _propTypes2.default.number,
  preventDefault: _propTypes2.default.bool,
  stopPropagation: _propTypes2.default.bool
};

ShortcutHandler.defaultProps = {
  className: null,
  isGlobal: false,
  id: null,
  keyBindings: {},
  tabIndex: null,
  preventDefault: false,
  stopPropagation: false
};

exports.default = ShortcutHandler;