"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var v0_1 = require("./api/v0");
var types_1 = require("./types");
var LATEST_VERSION = v0_1.VERSION;
/**
 * Private Cross Flow context
 *
 * Not to be used directly other than by useCrossFlow and BaseCrossFlowApiProvider
 */
var CrossFlowContext = react_1.createContext(function () { return ({
    isEnabled: false,
    reason: types_1.Reason.NO_PROVIDER,
}); });
/**
 * A factory for Cross Flow API negotiator
 * Negotiator will attempt to instantiate a requested version of the API context or fallback
 * to default one (NO_API_SUPPORT)
 */
exports.createNegotiateApi = function (onOpen) { return function (version) {
    switch (version) {
        case v0_1.VERSION:
            return {
                isEnabled: true,
                api: v0_1.createAPIv0(onOpen),
            };
        default:
            return {
                isEnabled: false,
                reason: types_1.Reason.NO_API_SUPPORT,
            };
    }
}; };
/**
 * Cross Flow API provider
 *
 * It's responsibility is to abstract CrossFlowContext.Provider from product integration modules and also
 * to supply a method of negotiating API version with the consumer.
 *
 * (Not to be used directly by products, but rather by (product specific) integration module)
 *
 * @param onOpen - Callback that will be invoked when API consumer requests to kick off expand process
 */
exports.BaseCrossFlowApiProvider = function (_a) {
    var onOpen = _a.onOpen, children = _a.children;
    var negotiateApi = react_1.useMemo(function () { return exports.createNegotiateApi(onOpen); }, [onOpen]);
    return react_1.default.createElement(CrossFlowContext.Provider, { value: negotiateApi }, children);
};
/**
 * React hook for accessing Cross Flow API
 */
exports.useCrossFlow = function () {
    return react_1.useContext(CrossFlowContext)(LATEST_VERSION);
};
/**
 * React HOC for wrapping class components with the above React hook
 * @param WrappedComponent
 */
function withCrossFlow(
//component coming in here has no crossflow type yet, but expects it
WrappedComponent) {
    var ComponentWithCrossFlow = function (props) {
        var crossFlow = exports.useCrossFlow();
        return react_1.default.createElement(WrappedComponent, tslib_1.__assign({}, props, { crossFlow: crossFlow }));
    };
    ComponentWithCrossFlow.displayName = "withCrossFlow(" + (WrappedComponent.displayName ||
        WrappedComponent.name ||
        'Component') + ")";
    return ComponentWithCrossFlow;
}
exports.withCrossFlow = withCrossFlow;
//# sourceMappingURL=context.js.map