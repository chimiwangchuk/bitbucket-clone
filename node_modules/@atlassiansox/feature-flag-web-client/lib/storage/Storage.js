"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hash_1 = tslib_1.__importDefault(require("../util/hash"));
var types_1 = require("../fetcher/types");
exports.STORAGE_KEY_PREFIX = 'feature-flags-atl';
var STORAGE_KEY_FLAG_STATE_PREFIX = exports.STORAGE_KEY_PREFIX + ".flags";
var STORAGE_KEY_ANON_ID = exports.STORAGE_KEY_PREFIX + ".anonId";
var STORAGE_KEY_DETECT_SUPPORT = exports.STORAGE_KEY_PREFIX + ".storage.support";
var StorageExceedQuota = false;
// Expire after 7 days
exports.FLAG_STATE_EXPIRY_PERIOD = 1000 * 60 * 60 * 24 * 7;
var Storage = /** @class */ (function () {
    function Storage(env, product, user) {
        this.env = env;
        this.product = product;
        this.generateKey(user);
    }
    Storage.prototype.updateUserContext = function (user) {
        this.generateKey(user);
    };
    Storage.prototype.getFlagsState = function () {
        return Storage.getFlagState(this.key);
    };
    Storage.prototype.setFlagsState = function (data) {
        Storage.setItem(this.key, JSON.stringify(data));
    };
    Storage.prototype.purgeStaleFlagState = function () {
        var _this = this;
        try {
            Object.keys(window.localStorage)
                .filter(function (key) { return key.startsWith(STORAGE_KEY_FLAG_STATE_PREFIX) && key !== _this.key; })
                .forEach(function (key) {
                var flagState = Storage.getFlagState(key);
                if (flagState && Date.now() - flagState.timestamp >= exports.FLAG_STATE_EXPIRY_PERIOD) {
                    Storage.removeItem(key);
                }
            });
        }
        catch (error) {
            // This could fail due to localstorage permissions being restricted, in this case do nothing
        }
    };
    Storage.getFlagState = function (key) {
        var rawData = Storage.getItem(key);
        if (!rawData) {
            return null;
        }
        return JSON.parse(rawData);
    };
    Storage.getAnonymousId = function () {
        return Storage.getItem(STORAGE_KEY_ANON_ID);
    };
    Storage.setAnonymousId = function (anonymousId) {
        Storage.setItem(STORAGE_KEY_ANON_ID, anonymousId);
    };
    Storage.setItem = function (key, value) {
        try {
            window.localStorage.setItem(key, value);
            StorageExceedQuota = false;
        }
        catch (error) {
            if (Storage.isQuotaExceeded(error)) {
                StorageExceedQuota = true;
            }
            // This could fail due to localstorage being full or localstorage permissions being restricted.
            // In either case, we do nothing.
        }
    };
    Storage.getItem = function (key) {
        try {
            return window.localStorage.getItem(key);
        }
        catch (error) {
            // This could fail due to localstorage permissions being restricted, in this case do nothing
            return null;
        }
    };
    Storage.removeItem = function (key) {
        try {
            window.localStorage.removeItem(key);
        }
        catch (error) {
            // This could fail due to localstorage permissions being restricted, in this case do nothing
        }
    };
    Storage.prototype.generateKey = function (user) {
        this.key = STORAGE_KEY_FLAG_STATE_PREFIX + "." + this.env + "." + this.product + "." + hash_1.default(user);
    };
    Storage.isQuotaExceeded = function (e) {
        // according to https://developer.mozilla.org/en-US/docs/Web/API/DOMException
        // DOMException.code is deprecated API should no longer be used
        if (e instanceof DOMException) {
            switch (e.name) {
                case 'QUOTA_EXCEEDED_ERR':
                    // Safari
                    return true;
                case 'QuotaExceededError':
                    // Chrome
                    return true;
                case 'NS_ERROR_DOM_QUOTA_REACHED':
                    // Firefox
                    return true;
                default:
                    return false;
            }
        }
        // Internet Explorer 8
        return e.number === -2147024882;
    };
    Storage.getStorageStatus = function () {
        var TEST_VALUE = 'test_value';
        try {
            if (!window.localStorage) {
                return types_1.ClientStorageState.NOT_AVAILABLE;
            }
            if (StorageExceedQuota) {
                return types_1.ClientStorageState.FULL;
            }
            window.localStorage.setItem(STORAGE_KEY_DETECT_SUPPORT, TEST_VALUE);
            var value = window.localStorage.getItem(STORAGE_KEY_DETECT_SUPPORT);
            window.localStorage.removeItem(STORAGE_KEY_DETECT_SUPPORT);
            // handle localStorage silently failing
            return value === TEST_VALUE ? types_1.ClientStorageState.AVAILABLE : types_1.ClientStorageState.ERRORED;
        }
        catch (e) {
            if (Storage.isQuotaExceeded(e)) {
                return types_1.ClientStorageState.FULL;
            }
            // permission issue or localStorage disabled
            return types_1.ClientStorageState.NOT_AVAILABLE;
        }
    };
    return Storage;
}());
exports.default = Storage;
