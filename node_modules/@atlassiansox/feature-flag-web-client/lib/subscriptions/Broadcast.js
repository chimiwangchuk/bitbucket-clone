"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hash_1 = tslib_1.__importDefault(require("../util/hash"));
exports.CHANNEL_PREFIX = 'flagData';
var Broadcast = /** @class */ (function () {
    function Broadcast(apiKey, user, stateUpdateCallback) {
        this.apiKey = apiKey;
        this.stateUpdateCallback = stateUpdateCallback;
        this.setupChannel(user);
    }
    Broadcast.prototype.updateUserContext = function (user) {
        this.stop();
        this.setupChannel(user);
    };
    Broadcast.prototype.sendFeatureFlagState = function (featureFlagState) {
        var _a;
        (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage(featureFlagState);
    };
    Broadcast.prototype.stop = function () {
        var _a;
        (_a = this.channel) === null || _a === void 0 ? void 0 : _a.close();
    };
    Broadcast.prototype.setupChannel = function (user) {
        var _this = this;
        try {
            // Keep reference to old channel so we can check the name of the current subscription
            // is the same as the channel we received a message for.
            // Due to a bug in Firefox which events can be recieved after
            // the channel has been closed.
            var channel_1 = new BroadcastChannel(this.createChannelName(user));
            channel_1.onmessage = function (e) {
                var _a;
                if (channel_1.name === ((_a = _this.channel) === null || _a === void 0 ? void 0 : _a.name)) {
                    _this.stateUpdateCallback(e.data);
                }
            };
            this.channel = channel_1;
        }
        catch (error) {
            // This could fail due to BroadcastChannel not available.
            // In that case, we do nothing.
        }
    };
    Broadcast.prototype.createChannelName = function (user) {
        return exports.CHANNEL_PREFIX + "." + this.apiKey + "." + hash_1.default(user);
    };
    return Broadcast;
}());
exports.default = Broadcast;
