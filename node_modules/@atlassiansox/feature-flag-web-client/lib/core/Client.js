"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fast_json_stable_stringify_1 = tslib_1.__importDefault(require("fast-json-stable-stringify"));
var Refresh_1 = tslib_1.__importDefault(require("./Refresh"));
var storage_1 = tslib_1.__importDefault(require("../storage"));
var exposureEvents_1 = tslib_1.__importDefault(require("../exposureEvents"));
var util_1 = require("./util");
var subscriptions_1 = tslib_1.__importStar(require("../subscriptions"));
var Anonymous_1 = tslib_1.__importDefault(require("./Anonymous"));
var Ready_1 = tslib_1.__importDefault(require("./Ready"));
var clone_object_1 = tslib_1.__importDefault(require("../util/clone-object"));
var Client = /** @class */ (function () {
    function Client(apiKey, analyticsWebClient, featureFlagUser, options) {
        util_1.validateConstructorArgs(apiKey, analyticsWebClient, featureFlagUser, options);
        var user = Anonymous_1.default.processAnonymousUser(featureFlagUser);
        this.featureFlagUpdateBroadcastHandler = this.featureFlagUpdateBroadcastHandler.bind(this);
        this.featureFlagUpdateHttpHandler = this.featureFlagUpdateHttpHandler.bind(this);
        this.featureFlagUpdateFailedHandler = this.featureFlagUpdateFailedHandler.bind(this);
        this.readyResolver = new Ready_1.default();
        this.exposureEvents = new exposureEvents_1.default(analyticsWebClient);
        this.storage = new storage_1.default(options.environment, options.productKey, user);
        this.storage.purgeStaleFlagState();
        this.broadcast = new subscriptions_1.Broadcast(apiKey, user, this.featureFlagUpdateBroadcastHandler);
        this.restoreFlagStateFromStorage();
        this.userData = user;
        this.refresh = new Refresh_1.default(apiKey, options.environment, this.userData, this.featureFlagUpdateHttpHandler, {
            interval: options.pollingInterval,
        }, this.dataVersion, this.lastUpdatedTimestamp, this.featureFlagUpdateFailedHandler);
        this.refresh.start();
        this.subscriptions = new subscriptions_1.default();
    }
    Client.prototype.ready = function () {
        return this.readyResolver.getPromise();
    };
    Client.prototype.getFlagValue = function (flagKey, defaultValue, options) {
        var validatedFlag = this.getFlagDetails(flagKey, defaultValue, options);
        return validatedFlag.value;
    };
    Client.prototype.getFlagDetails = function (flagKey, defaultValue, options) {
        var _a;
        util_1.validateDefaultValue(defaultValue);
        var flag = this.flags[flagKey];
        var validatedFlag = util_1.validateFlag(flag, defaultValue, this.refresh.getStatus(), options);
        if ((_a = options) === null || _a === void 0 ? void 0 : _a.shouldSendExposureEvent) {
            this.exposureEvents.sendExposureEvent(flagKey, validatedFlag.value, validatedFlag.evaluationDetail, options.exposureData);
        }
        return validatedFlag;
    };
    Client.prototype.getFlags = function () {
        return clone_object_1.default(this.flags);
    };
    Client.prototype.on = function (flagKey, defaultValue, callback, options) {
        util_1.validateDefaultValue(defaultValue);
        return this.subscriptions.on(flagKey, defaultValue, callback, this.getFlagValue.bind(this), options);
    };
    Client.prototype.onAnyFlagUpdated = function (callback) {
        return this.subscriptions.onAnyFlagUpdated(callback);
    };
    Client.prototype.updateFeatureFlagUser = function (featureFlagUser) {
        var _a, _b;
        if (!featureFlagUser) {
            throw new Error('featureFlagUser is missing');
        }
        var user = Anonymous_1.default.processAnonymousUser(featureFlagUser);
        if (fast_json_stable_stringify_1.default(this.userData) === fast_json_stable_stringify_1.default(user)) {
            return this.ready();
        }
        this.readyResolver.reset();
        this.userData = user;
        this.storage.updateUserContext(user);
        var storedData = this.storage.getFlagsState();
        if (storedData) {
            var changedFlagKeys = this.updateInMemoryFlags(util_1.flagStateToFlagUpdate(this.flags, storedData));
            this.sendSubscriptionUpdates(changedFlagKeys);
            this.readyResolver.triggerReady();
        }
        this.lastUpdatedTimestamp = ((_a = storedData) === null || _a === void 0 ? void 0 : _a.timestamp) || 0;
        this.dataVersion = (_b = storedData) === null || _b === void 0 ? void 0 : _b.version;
        this.refresh.stop();
        this.refresh.updateUserContext(user, this.dataVersion, this.lastUpdatedTimestamp);
        this.refresh.start();
        this.broadcast.updateUserContext(user);
        return this.ready();
    };
    Client.prototype.addFlag = function (flagKey, flag) {
        this.flags[flagKey] = flag;
    };
    // Convenience API, not official
    Client.prototype.destroy = function () {
        this.refresh.stop();
        this.subscriptions.stop();
        this.broadcast.stop();
        this.readyResolver.triggerReady();
    };
    Client.prototype.restoreFlagStateFromStorage = function () {
        var _a, _b, _c;
        var storedData = this.storage.getFlagsState();
        this.flags = ((_a = storedData) === null || _a === void 0 ? void 0 : _a.flags) || {};
        this.lastUpdatedTimestamp = ((_b = storedData) === null || _b === void 0 ? void 0 : _b.timestamp) || 0;
        this.dataVersion = (_c = storedData) === null || _c === void 0 ? void 0 : _c.version;
        if (storedData !== null && storedData !== undefined) {
            this.readyResolver.triggerReady();
        }
    };
    Client.prototype.getCurrentFeatureFlagState = function () {
        return {
            timestamp: this.lastUpdatedTimestamp,
            version: this.dataVersion,
            flags: this.flags,
        };
    };
    Client.prototype.featureFlagUpdateFailedHandler = function () {
        this.readyResolver.triggerReady();
    };
    Client.prototype.featureFlagUpdateHttpHandler = function (update) {
        this.processFeatureFlagUpdate(update);
        // broadcast the flag state to other tabs
        this.broadcast.sendFeatureFlagState(this.getCurrentFeatureFlagState());
    };
    Client.prototype.featureFlagUpdateBroadcastHandler = function (featureFlagState) {
        // return if broadcasted ff state is stale
        if (featureFlagState.timestamp < this.lastUpdatedTimestamp) {
            return;
        }
        this.processFeatureFlagUpdate(util_1.flagStateToFlagUpdate(this.flags, featureFlagState));
    };
    Client.prototype.processFeatureFlagUpdate = function (update) {
        this.lastUpdatedTimestamp = Date.now();
        this.dataVersion = update.versionData || this.dataVersion;
        var changedFlagKeys = this.updateInMemoryFlags(update);
        this.sendSubscriptionUpdates(changedFlagKeys);
        this.refresh.setVersionAndTimestamp(this.dataVersion, this.lastUpdatedTimestamp);
        this.storage.setFlagsState(this.getCurrentFeatureFlagState());
        this.readyResolver.triggerReady();
    };
    Client.prototype.updateInMemoryFlags = function (update) {
        var _this = this;
        var _a;
        var changedFlags = [];
        (_a = update.deletedFlags) === null || _a === void 0 ? void 0 : _a.forEach(function (flagKey) {
            if (flagKey in _this.flags) {
                delete _this.flags[flagKey];
                changedFlags.push(flagKey);
            }
        });
        Object.keys(update.flags).forEach(function (flagKey) {
            if (util_1.hasFlagValueChanged(_this.flags[flagKey], update.flags[flagKey])) {
                changedFlags.push(flagKey);
            }
            _this.flags[flagKey] = update.flags[flagKey];
        });
        return changedFlags;
    };
    Client.prototype.sendSubscriptionUpdates = function (changedFlagKeys) {
        var _this = this;
        if (changedFlagKeys.length > 0) {
            this.subscriptions.anyFlagUpdated();
            changedFlagKeys.forEach(function (flagKey) { return _this.subscriptions.flagValueUpdated(flagKey); });
        }
    };
    return Client;
}());
exports.default = Client;
