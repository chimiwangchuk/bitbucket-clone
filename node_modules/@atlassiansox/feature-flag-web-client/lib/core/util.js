"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fast_json_stable_stringify_1 = tslib_1.__importDefault(require("fast-json-stable-stringify"));
var __1 = require("..");
var types_1 = require("./types");
var clone_object_1 = tslib_1.__importDefault(require("../util/clone-object"));
function featureFlagToRawFlag(featureFlag) {
    var rawFlag = {
        value: featureFlag.value,
    };
    if (featureFlag.reason) {
        rawFlag.evaluationDetail = {
            reason: featureFlag.reason,
            ruleId: featureFlag.ruleId,
        };
    }
    return rawFlag;
}
exports.featureFlagToRawFlag = featureFlagToRawFlag;
function flagResponseToFlagUpdate(response) {
    var _a;
    var flags = {};
    (_a = response.featureFlagValues) === null || _a === void 0 ? void 0 : _a.forEach(function (featureFlag) {
        flags[featureFlag.key] = featureFlagToRawFlag(featureFlag);
    });
    return {
        flags: flags,
        deletedFlags: response.deletedFlags || [],
        versionData: response.versionData,
    };
}
exports.flagResponseToFlagUpdate = flagResponseToFlagUpdate;
function flagStateToFlagUpdate(currentFlags, newFlagState) {
    var _a;
    var newFlags = ((_a = newFlagState) === null || _a === void 0 ? void 0 : _a.flags) || {};
    var deletedFlags = Object.keys(currentFlags).filter(function (flagKey) { return newFlags[flagKey] === undefined; });
    return {
        flags: newFlags,
        deletedFlags: deletedFlags,
        versionData: newFlagState.version,
    };
}
exports.flagStateToFlagUpdate = flagStateToFlagUpdate;
function hasFlagValueChanged(oldFlag, newFlag) {
    var _a, _b;
    return fast_json_stable_stringify_1.default((_a = oldFlag) === null || _a === void 0 ? void 0 : _a.value) !== fast_json_stable_stringify_1.default((_b = newFlag) === null || _b === void 0 ? void 0 : _b.value);
}
exports.hasFlagValueChanged = hasFlagValueChanged;
function refreshStatusToEvaluationErrorKind(status) {
    switch (status) {
        case types_1.RefreshStatus.INITIALISED:
            return __1.EvaluationErrorKind.CLIENT_NOT_READY;
        case types_1.RefreshStatus.ERROR:
            return __1.EvaluationErrorKind.SERVER_ERROR;
        case types_1.RefreshStatus.SUCCESS:
            return __1.EvaluationErrorKind.FLAG_NOT_FOUND;
        default:
            return __1.EvaluationErrorKind.OTHER;
    }
}
exports.refreshStatusToEvaluationErrorKind = refreshStatusToEvaluationErrorKind;
function validateFlag(flag, defaultValue, refreshStatus, options) {
    var _a, _b;
    if (!flag) {
        return {
            value: defaultValue,
            evaluationDetail: {
                reason: __1.EvaluationReason.ERROR,
                errorKind: refreshStatusToEvaluationErrorKind(refreshStatus),
            },
        };
    }
    if (typeof flag.value !== typeof defaultValue) {
        return {
            value: defaultValue,
            evaluationDetail: {
                reason: __1.EvaluationReason.ERROR,
                errorKind: __1.EvaluationErrorKind.WRONG_TYPE,
            },
        };
    }
    if (((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.oneOf) === null || _b === void 0 ? void 0 : _b.length) && options.oneOf.indexOf(flag.value) < 0) {
        return {
            value: defaultValue,
            evaluationDetail: {
                reason: __1.EvaluationReason.ERROR,
                errorKind: __1.EvaluationErrorKind.VALIDATION_ERROR,
            },
        };
    }
    return clone_object_1.default(flag);
}
exports.validateFlag = validateFlag;
function isBlank(str) {
    return !str || /^\s*$/.test(str);
}
exports.isBlank = isBlank;
function isFunction(func) {
    return typeof func === 'function';
}
exports.isFunction = isFunction;
function validateConstructorArgs(apiKey, analyticsWebClient, featureFlagUser, options) {
    var _a, _b, _c;
    if (isBlank(apiKey)) {
        throw new Error('apiKey is missing');
    }
    if (!isFunction((_a = analyticsWebClient) === null || _a === void 0 ? void 0 : _a.sendOperationalEvent)) {
        throw new Error('analyticsWebClient.sendOperationalEvent is missing or not a function');
    }
    if (!featureFlagUser) {
        throw new Error('featureFlagUser is missing');
    }
    if (isBlank((_b = options) === null || _b === void 0 ? void 0 : _b.productKey)) {
        throw new Error('options.productKey is missing');
    }
    if (Object.values(__1.EnvironmentType).indexOf((_c = options) === null || _c === void 0 ? void 0 : _c.environment) === -1) {
        throw new Error('options.environment is missing or invalid');
    }
    if (options.pollingInterval !== undefined && options.pollingInterval !== null) {
        var minInternal = options.environment === __1.EnvironmentType.PROD ? 60000 : 1000;
        if (options.pollingInterval <= minInternal) {
            throw new Error("options.pollingInterval needs to be greater than " + minInternal);
        }
    }
}
exports.validateConstructorArgs = validateConstructorArgs;
function validateDefaultValue(value) {
    if (value === undefined || value === null) {
        throw new Error('defaultValue is missing');
    }
}
exports.validateDefaultValue = validateDefaultValue;
/* eslint-disable no-bitwise */
function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (char) {
        var random = (Math.random() * 16) | 0;
        var uuid = char === 'x' ? random : (random & 0x3) | 0x8;
        return uuid.toString(16);
    });
}
exports.uuidv4 = uuidv4;
/* eslint-enable no-bitwise */
