import { __assign } from "tslib";
import Performance from './performance';
import PageVisibility from './pageVisibility';
import { apdexType, isType, } from './analyticsWebTypes';
var ApdexEvent = /** @class */ (function () {
    function ApdexEvent(onEvent, pageVisibility) {
        var _this = this;
        this._getEventKey = function (_a) {
            var task = _a.task, taskId = _a.taskId;
            return (taskId ? task + "." + taskId : task);
        };
        this._getEventTimingByName = function (name) {
            var eventTimings = _this._performance.getEntriesByName(name);
            var eventTiming = eventTimings[eventTimings.length - 1];
            return eventTiming;
        };
        this._getApdexFields = function (event) {
            var apdexTimings = _this._getApdexTimings(event);
            var apdexScore = _this._calculateApdex({
                duration: apdexTimings.duration,
                threshold: event.threshold,
            });
            return __assign(__assign({}, apdexTimings), { apdex: apdexScore });
        };
        this._getApdexTimings = function (event) {
            var eventKey = _this._getEventKey(event);
            var eventStartName = eventKey + "-start";
            var startTime = event.startTime || _this._getStartTime(event, eventStartName);
            var stopTime = event.stopTime || _this._getStopTime();
            // We do some clean up of the marks and started events
            _this._cleanApdexState(eventKey);
            return {
                startTime: startTime,
                stopTime: stopTime,
                duration: stopTime - startTime,
            };
        };
        this._getStartTime = function (event, eventName) {
            var startTime;
            var timeOrigin = _this._performance.getTimeOrigin();
            if (event.type === apdexType.INITIAL_LOAD) {
                startTime = timeOrigin;
            }
            else {
                var eventTiming = _this._getEventTimingByName(eventName);
                startTime = timeOrigin + eventTiming.startTime;
            }
            return startTime;
        };
        this._getStopTime = function () { return _this._performance.getTimeOrigin() + _this._performance.now(); };
        this._cleanApdexState = function (eventKey) {
            _this._performance.clearMarks(eventKey + "-start");
            _this._performance.clearMarks(eventKey + "-stop");
            _this._startedEvents.delete(eventKey);
        };
        this._getVisibilityFields = function (event) {
            var isActiveTab;
            /**
             * For initialLoad type:
             * 1. if tab was not ever hidden (!_wasPreviouslyHidden)
             *
             * For transition type:
             * 1. active status is tracked in active events map (_isActiveEvents)
             *
             * For any type, if startTime or stopTime is specified:
             * 1. If currently active (!_isHidden)
             */
            if (event.type === apdexType.INITIAL_LOAD) {
                isActiveTab = !_this._wasPreviouslyHidden;
            }
            else if (event.type === apdexType.TRANSITION) {
                var eventKey = _this._getEventKey(event);
                isActiveTab = _this._isActiveEvents.get(eventKey);
            }
            if (event.startTime || event.stopTime) {
                isActiveTab = !_this._pageVisibility.getIsHidden();
            }
            return { isActiveTab: isActiveTab };
        };
        this._calculateApdex = function (_a) {
            var duration = _a.duration, _b = _a.threshold, threshold = _b === void 0 ? _this._threshold : _b;
            var apdex;
            var satisfiedThreshold = threshold;
            var tolerableThreshold = threshold * 4;
            if (duration <= satisfiedThreshold) {
                apdex = 1;
            }
            else if (duration <= tolerableThreshold) {
                apdex = 0.5;
            }
            else {
                apdex = 0;
            }
            return apdex;
        };
        this._validateStartEvent = function (event) {
            if (!event) {
                throw new Error('Missing "event" in Apdex start event');
            }
            if (!event.task) {
                throw new Error('Missing "task" in Apdex start event');
            }
            if (typeof event.task !== 'string') {
                throw new Error('Invalid "task" in Apdex start event');
            }
            if (event.taskId && typeof event.taskId !== 'string') {
                throw new Error('Invalid "taskId" in Apdex start event');
            }
        };
        this._validateStopEvent = function (event) {
            if (!event) {
                throw new Error('Missing "event" in Apdex stop event');
            }
            if (!event.task) {
                throw new Error('Missing "task" in Apdex stop event');
            }
            if (typeof event.task !== 'string') {
                throw new Error('Invalid "task" in Apdex stop event');
            }
            if (event.taskId && typeof event.taskId !== 'string') {
                throw new Error('Invalid "taskId" in Apdex stop event');
            }
            if (!event.type) {
                throw new Error('Missing "type" in Apdex stop event');
            }
            if (event.type && !isType(apdexType, event.type)) {
                throw new Error('Invalid "type" in Apdex stop event');
            }
            if (event.threshold && typeof event.threshold !== 'number') {
                throw new Error('Invalid "threshold" in Apdex stop event');
            }
            /*
             * For a transition, if the startTime was not specified,
             * the start event should have been present.
             */
            if (!event.startTime && event.type === apdexType.TRANSITION) {
                var eventKey = _this._getEventKey(event);
                if (!_this._startedEvents.has(eventKey)) {
                    throw new Error("Apdex event transition \"" + eventKey + "\" was not started");
                }
            }
            if (event.startTime && !(typeof event.startTime === 'number' && event.startTime >= 0)) {
                throw new Error('Invalid "startTime" in Apdex stop event');
            }
            if (event.stopTime && typeof event.stopTime !== 'number') {
                throw new Error('Invalid "stopTime" in Apdex stop event');
            }
            if (event.stopTime <= event.startTime) {
                throw new Error('"stopTime" should be greater than "startTime" in Apdex stop event');
            }
        };
        this._shouldSendEvent = function (event) {
            if (!event) {
                return false;
            }
            if (typeof event.apdex !== 'number') {
                return false;
            }
            return true;
        };
        this._sendEvent = function (event, callback) {
            if (_this._shouldSendEvent(event)) {
                _this._onEvent({
                    source: 'ui',
                    action: 'readyForUser',
                    actionSubject: 'ui',
                    attributes: __assign(__assign({}, event.additionalAttributes), { task: event.task, taskId: event.taskId, type: event.type, threshold: event.threshold || _this._threshold, apdex: event.apdex, startTime: event.startTime, stopTime: event.stopTime, duration: event.duration, isActiveTab: event.isActiveTab }),
                }, callback);
            }
        };
        if (!onEvent) {
            throw new Error('Missing onEvent callback');
        }
        if (typeof onEvent !== 'function') {
            throw new Error('Invalid onEvent, must be function');
        }
        if (!(pageVisibility instanceof PageVisibility)) {
            throw new Error('Invalid pageVisibility, must be PageVisibility class');
        }
        this._startedEvents = new Map();
        this._performance = new Performance();
        this._onEvent = onEvent;
        this._threshold = 1000;
        this._wasPreviouslyHidden = pageVisibility.getIsHidden();
        this._isActiveEvents = new Map();
        this._pageVisibility = pageVisibility;
        this._pageVisibility.addCallback('apdexEvent', function (isHidden) {
            _this.onVisibilityChange(!isHidden);
        });
    }
    ApdexEvent.prototype.start = function (event) {
        this._validateStartEvent(event);
        if (!this._performance.isAvailable()) {
            return;
        }
        var eventKey = this._getEventKey(event);
        var eventStartName = eventKey + "-start";
        this._startedEvents.set(eventKey, true);
        this._isActiveEvents.set(eventKey, !this._pageVisibility.getIsHidden());
        this._performance.clearMarks(eventStartName);
        this._performance.mark(eventStartName);
    };
    ApdexEvent.prototype.getStart = function (event) {
        this._validateStartEvent(event);
        if (!this._performance.isAvailable()) {
            return undefined;
        }
        var eventKey = this._getEventKey(event);
        var eventStartName = eventKey + "-start";
        return this._getEventTimingByName(eventStartName);
    };
    ApdexEvent.prototype.stop = function (event, callback) {
        this._validateStopEvent(event);
        if (!this._performance.isAvailable()) {
            return;
        }
        var apdexFields = this._getApdexFields(event);
        var visibilityFields = this._getVisibilityFields(event);
        this._sendEvent(__assign(__assign(__assign({}, event), apdexFields), visibilityFields), callback);
    };
    ApdexEvent.prototype.onVisibilityChange = function (isActive) {
        var _this = this;
        if (!isActive) {
            this._wasPreviouslyHidden = true;
            this._isActiveEvents.forEach(function (value, key) { return _this._isActiveEvents.set(key, false); });
        }
    };
    return ApdexEvent;
}());
export default ApdexEvent;
