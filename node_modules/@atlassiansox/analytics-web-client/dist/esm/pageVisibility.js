var PageVisibility = /** @class */ (function () {
    function PageVisibility() {
        var _this = this;
        this._bindEventListeners = function () {
            document.addEventListener(_this._visibilityChange, _this._handleVisibilityChange, false);
        };
        this._handleVisibilityChange = function () {
            var isHidden = document[_this._hidden];
            _this._isHidden = isHidden;
            _this._callbacks.forEach(function (callbackFn) { return callbackFn(isHidden); });
        };
        this._isHidden = false;
        this._callbacks = new Map();
        this._hidden = undefined;
        this._visibilityChange = undefined;
        if (typeof document.hidden !== 'undefined') {
            // Opera 12.10 and Firefox 18 and later support
            this._isHidden = document.hidden;
            this._hidden = 'hidden';
            this._visibilityChange = 'visibilitychange';
        }
        else if (typeof document.msHidden !== 'undefined') {
            this._isHidden = document.msHidden;
            this._hidden = 'msHidden';
            this._visibilityChange = 'msvisibilitychange';
        }
        else if (typeof document.webkitHidden !== 'undefined') {
            this._isHidden = document.webkitHidden;
            this._hidden = 'webkitHidden';
            this._visibilityChange = 'webkitvisibilitychange';
        }
        if (typeof document.addEventListener !== 'undefined' && this._hidden !== undefined) {
            this._bindEventListeners();
        }
    }
    PageVisibility.prototype.addCallback = function (name, fn) {
        if (typeof name !== 'string') {
            throw new Error('Invalid name, must be string');
        }
        if (typeof fn !== 'function') {
            throw new Error('Invalid callback, must be function');
        }
        this._callbacks.set(name, fn);
    };
    PageVisibility.prototype.removeCallback = function (name) {
        if (this._callbacks.has(name)) {
            this._callbacks.delete(name);
        }
    };
    PageVisibility.prototype.getIsHidden = function () {
        return this._isHidden;
    };
    return PageVisibility;
}());
export default PageVisibility;
