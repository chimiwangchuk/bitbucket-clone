import SafeLocalStorage from './storage/SafeLocalStorage';
var SESSION_ID_STORAGE_KEY = 'session.id';
var SESSION_EXPIRY_STORAGE_KEY = 'session.expiry';
var ONLY_NUMBERS_REGEX = /^\d+$/;
var DEFAULT_SESSION_EXPIRY_TIME_MS = 30 * 60 * 1000; // 30 minutes
var SessionTracking = /** @class */ (function () {
    function SessionTracking(options) {
        var _this = this;
        this._generateNewSessionId = function () {
            var newSessionId = Date.now().toString();
            _this._safeLocalStorage.setItem(SESSION_ID_STORAGE_KEY, newSessionId);
            return newSessionId;
        };
        this._updateSessionExpiry = function () {
            var expiry = Date.now() + _this._sessionExpiryTime;
            _this._safeLocalStorage.setItem(SESSION_EXPIRY_STORAGE_KEY, expiry);
            return expiry;
        };
        if (!options) {
            this._sessionExpiryTime = DEFAULT_SESSION_EXPIRY_TIME_MS;
        }
        else {
            this._sessionExpiryTime = options.sessionExpiryTime || DEFAULT_SESSION_EXPIRY_TIME_MS;
        }
        this._safeLocalStorage = new SafeLocalStorage();
    }
    SessionTracking.prototype.getCurrentSessionId = function () {
        var sessionId = this._safeLocalStorage.getItem(SESSION_ID_STORAGE_KEY);
        var sessionExpiry = parseInt(this._safeLocalStorage.getItem(SESSION_EXPIRY_STORAGE_KEY), 10);
        this._updateSessionExpiry();
        if (!sessionId || sessionExpiry <= Date.now() || isNaN(sessionExpiry)) {
            return this._generateNewSessionId();
        }
        // Old versions of sessionId were UUIDs which caused issues for Amplitude which only accepts
        // integers for this field. In these scenarios we want to regenerate the sessionId as an integer
        if (!ONLY_NUMBERS_REGEX.test(sessionId)) {
            return this._generateNewSessionId();
        }
        return sessionId;
    };
    return SessionTracking;
}());
export default SessionTracking;
