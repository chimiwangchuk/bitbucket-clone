export var envType = Object.freeze({
    LOCAL: 'local',
    DEV: 'dev',
    STAGING: 'staging',
    PROD: 'prod',
});
export var eventType = Object.freeze({
    TRACK: 'track',
    UI: 'ui',
    OPERATIONAL: 'operational',
    SCREEN: 'screen',
});
export var platformType = Object.freeze({
    MAC: 'mac',
    LINUX: 'linux',
    WINDOWS: 'windows',
    /**
     *  @deprecated desktop is here for retrocompatibility, please select one of the above OS instead.
     */
    DESKTOP: 'desktop',
    WEB: 'web',
    MOBILE_WEB: 'mobileWeb',
});
export var originType = Object.freeze({
    DESKTOP: 'desktop',
    WEB: 'web',
});
export var tenantType = Object.freeze({
    CLOUD_ID: 'cloudId',
    ORG_ID: 'orgId',
    OPSGENIE_CUSTOMER_ID: 'opsgenieCustomerId',
    NONE: 'none',
});
export var userType = Object.freeze({
    ATLASSIAN_ACCOUNT: 'atlassianAccount',
    HASHED_EMAIL: 'hashedEmail',
    TRELLO: 'trello',
    OPSGENIE: 'opsgenie',
});
export var apdexType = Object.freeze({
    TRANSITION: 'transition',
    INITIAL_LOAD: 'initialLoad',
});
export var desktopPlatforms = Object.freeze([
    platformType.DESKTOP,
    platformType.MAC,
    platformType.LINUX,
    platformType.WINDOWS,
]);
export var webPlatforms = Object.freeze([
    platformType.WEB,
    platformType.MOBILE_WEB,
]);
export var originTracingType = Object.freeze({
    ATL_ORIGIN: 'atlOrigin',
});
export function objectValues(object) {
    return Object.keys(object).map(function (key) { return object[key]; });
}
export function isType(type, value) {
    return objectValues(type).indexOf(value) > -1;
}
