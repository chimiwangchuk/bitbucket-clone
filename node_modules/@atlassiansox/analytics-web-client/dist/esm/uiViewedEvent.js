import { __assign, __rest } from "tslib";
import { tenantType } from './analyticsWebTypes';
import SafeLocalStorage from './storage/SafeLocalStorage';
var DEFAULT_DELAY = 1000 * 2; // 2 seconds
var DEFAULT_THROTTLE = 1000 * 60 * 60; // 1 hour
var DEFAULT_STORAGE_KEY = 'ui.viewed.last.sent';
var UIViewedEvent = /** @class */ (function () {
    function UIViewedEvent(productInfo, getContext, onEvent, settings) {
        var _this = this;
        if (settings === void 0) { settings = {}; }
        this.start = function () {
            _this._startInterval();
            _this._bindEventListeners();
        };
        this.stop = function () {
            _this._stopInterval();
            _this._unbindEventListeners();
        };
        this.resetTimers = function () {
            if (_this._intervalId) {
                _this.stop();
                _this.start();
            }
        };
        this._bindEventListeners = function () {
            window.addEventListener('focus', _this._focusListener);
            window.addEventListener('blur', _this._blurListener);
        };
        this._unbindEventListeners = function () {
            window.removeEventListener('focus', _this._focusListener);
            window.removeEventListener('blur', _this._blurListener);
        };
        this._startInterval = function () {
            clearInterval(_this._intervalId);
            _this._intervalId = setInterval(_this._handleInterval, _this._delay);
        };
        this._stopInterval = function () {
            if (_this._intervalId) {
                clearInterval(_this._intervalId);
                _this._intervalId = null;
            }
        };
        this._getProductKey = function (product, subproduct) {
            var productKey = product;
            if (subproduct) {
                productKey += "-" + subproduct;
            }
            return productKey;
        };
        this._getLastSentTimestamp = function (productKey, tenantId, userId) {
            var json = _this._parseLocalStorageData() || {};
            var u = json[userId] || {};
            var t = u[tenantId] || {};
            var p = t[productKey] || null;
            return p;
        };
        this._parseLocalStorageData = function () {
            var data = _this._safeLocalStorage.getItem(_this._storageKey);
            try {
                return JSON.parse(data);
            }
            catch (error) {
                _this._safeLocalStorage.removeItem(_this._storageKey);
                return null;
            }
        };
        this._setLastSentTimestamp = function (productKey, tenantId, userId) {
            var json = JSON.parse(_this._safeLocalStorage.getItem(_this._storageKey)) || {};
            var u = json[userId] || {};
            var t = u[tenantId] || {};
            t[productKey] = Date.now();
            u[tenantId] = t;
            json[userId] = u;
            _this._safeLocalStorage.setItem(_this._storageKey, JSON.stringify(json));
        };
        this._shouldSendEvent = function (productKey, tenantIdType, tenantId, userId) {
            if (!document.hasFocus()) {
                return false;
            }
            if ((tenantIdType !== tenantType.NONE && !tenantId) || !userId) {
                return false;
            }
            var sinceLastSent = (Date.now() - _this._getLastSentTimestamp(productKey, tenantId, userId));
            return sinceLastSent > _this._throttle;
        };
        this._handleInterval = function () {
            var _a = _this._getContext(), embeddedProduct = _a.embeddedProduct, context = __rest(_a, ["embeddedProduct"]);
            _this._sendEvent(_this._product, context);
            if (embeddedProduct) {
                _this._sendEvent(embeddedProduct, context, true);
            }
        };
        this._sendEvent = function (product, context, isEmbeddedProduct) {
            var subproduct = context.subproduct, tenantIdType = context.tenantIdType, tenantId = context.tenantId, userId = context.userId, lastScreenEvent = context.lastScreenEvent;
            var productKey = _this._getProductKey(product, subproduct);
            if (_this._shouldSendEvent(productKey, tenantIdType, tenantId, userId)) {
                _this._setLastSentTimestamp(productKey, tenantId, userId);
                var event_1 = _this._createEvent(product, subproduct, isEmbeddedProduct, lastScreenEvent);
                _this._onEvent(event_1);
            }
        };
        this._createEvent = function (product, subproduct, isEmbeddedProduct, lastScreenEvent) {
            var event = {
                product: product,
                source: 'ui',
                action: 'viewed',
                actionSubject: 'ui',
            };
            if (isEmbeddedProduct) {
                // Clear the subproduct and version as they don't relate to the embedded product
                event.subproduct = null;
                event.version = null;
                event.attributes = {
                    embeddedInEnv: _this._productInfo.env,
                    embeddedInProduct: _this._productInfo.product,
                    embeddedInSubproduct: subproduct,
                    embeddedInVersion: _this._productInfo.version,
                    embeddedInOrigin: _this._productInfo.origin,
                    embeddedInPlatform: _this._productInfo.platform,
                };
            }
            if (lastScreenEvent) {
                event.attributes = __assign(__assign({}, event.attributes), { lastScreenEvent: {
                        name: lastScreenEvent.name,
                        attributes: lastScreenEvent.attributes,
                    } });
            }
            return event;
        };
        if (!productInfo) {
            throw new Error('Missing productInfo');
        }
        if (!productInfo.product) {
            throw new Error('Missing productInfo.product');
        }
        if (!getContext) {
            throw new Error('Missing getContext callback');
        }
        if (typeof getContext !== 'function') {
            throw new Error('Invalid getContext, must be function');
        }
        if (!onEvent) {
            throw new Error('Missing onEvent callback');
        }
        if (typeof onEvent !== 'function') {
            throw new Error('Invalid onEvent, must be function');
        }
        this._productInfo = productInfo;
        this._product = productInfo.product;
        this._getContext = getContext;
        this._onEvent = onEvent;
        this._delay = settings.delay || DEFAULT_DELAY;
        this._throttle = settings.throttle || DEFAULT_THROTTLE;
        this._storageKey = settings.storageKey || DEFAULT_STORAGE_KEY;
        this._safeLocalStorage = new SafeLocalStorage(this._productInfo.env);
        this._focusListener = function () {
            _this._startInterval();
        };
        this._blurListener = function () {
            _this._stopInterval();
        };
    }
    return UIViewedEvent;
}());
export default UIViewedEvent;
