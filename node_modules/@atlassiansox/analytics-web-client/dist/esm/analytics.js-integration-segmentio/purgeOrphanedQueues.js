// For more details on this funciton, see https://hello.atlassian.net/wiki/spaces/MEASURE/pages/585086028/Investigation+Local+storage+full
// TL;DR
// If a queue looses its `ack` key in localstorage, it will never get claimed.
// There is a small chance that this can happen.
// This function is to run through queues and clean any that have been orphaned.
import { __read } from "tslib";
// Keys stolen from https://github.com/segmentio/localstorage-retry/blob/master/lib/index.js#L55
var keySuffixs = {
    IN_PROGRESS: 'inProgress',
    QUEUE: 'queue',
    ACK: 'ack',
    RECLAIM_START: 'reclaimStart',
    RECLAIM_END: 'reclaimEnd',
};
var validSuffixs = Object.values(keySuffixs);
export default (function (prefix) {
    if (typeof prefix !== 'string' || prefix.length === 0) {
        // We do not want to start deleting everything in localstorage
        return;
    }
    try {
        var queueStates_1 = new Array(window.localStorage.length)
            .fill('')
            .map(function (_empty, index) { return window.localStorage.key(index); })
            .filter(function (key) { return key.startsWith(prefix + "."); })
            .map(function (key) { return key.split('.'); })
            .filter(function (splitKeys) { return splitKeys.length === 3 && validSuffixs.includes(splitKeys[2]); })
            .reduce(function (accumulator, currentKeys) {
            var _a = __read(currentKeys, 3), id = _a[1], suffix = _a[2];
            if (accumulator[id] === undefined) {
                accumulator[id] = {};
            }
            accumulator[id][suffix] = true;
            return accumulator;
        }, {});
        Object.keys(queueStates_1)
            .filter(function (id) { return queueStates_1[id][keySuffixs.ACK] !== true; })
            .forEach(function (id) {
            localStorage.removeItem(prefix + "." + id + "." + keySuffixs.IN_PROGRESS);
            localStorage.removeItem(prefix + "." + id + "." + keySuffixs.QUEUE);
            localStorage.removeItem(prefix + "." + id + "." + keySuffixs.RECLAIM_START);
            localStorage.removeItem(prefix + "." + id + "." + keySuffixs.RECLAIM_END);
        });
    }
    catch (_error) {
        // Ignore errors from localStorage.
    }
});
