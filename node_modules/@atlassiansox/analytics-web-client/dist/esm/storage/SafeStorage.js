/*
 * Code heavily influenced by Segment's Store https://github.com/segmentio/localstorage-retry/blob/master/lib/store.js
 * and Engine https://github.com/segmentio/localstorage-retry/blob/master/lib/engine.js
 * But is not used because it's not public API and is too restrictive in the way it sets keys and does JSON parsing and stringify
 */
import InMemoryStorage from './InMemoryStorage';
import { envType } from '../analyticsWebTypes';
export var AWC_STORAGE_PREFIX = 'awc';
export var GLOBAL_IN_MEMORY_NAME = 'awcInMemoryStorageFallback';
export function isSupported(store) {
    var TEST_VALUE = 'test_value';
    try {
        if (!store)
            return false;
        var key = 'awc.storage.support';
        store.setItem(key, TEST_VALUE);
        var value = store.getItem(key);
        store.removeItem(key);
        // handle localStorage silently failing
        return value === TEST_VALUE;
    }
    catch (e) {
        // Can throw if localStorage is disabled
        return false;
    }
}
export function isQuotaExceeded(e) {
    var quotaExceeded = false;
    if (e.code) {
        switch (e.code) {
            case 22:
                quotaExceeded = true;
                break;
            case 1014:
                // Firefox
                if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                    quotaExceeded = true;
                }
                break;
            default:
                break;
        }
    }
    else if (e.number === -2147024882) {
        // Internet Explorer 8
        quotaExceeded = true;
    }
    return quotaExceeded;
}
var SafeStorage = /** @class */ (function () {
    function SafeStorage(storageToUse, environmentPrefix) {
        var _this = this;
        if (environmentPrefix === void 0) { environmentPrefix = null; }
        this.getStore = function () { return _this._store; };
        this.getItem = function (key) { return _this._store.getItem(_this.createKey(key)); };
        this.removeItem = function (key) { return _this._store.removeItem(_this.createKey(key)); };
        this.setItem = function (key, value) {
            try {
                _this._store.setItem(_this.createKey(key), value);
            }
            catch (err) {
                if (isQuotaExceeded(err)) {
                    _this.swapToInMemory();
                    _this._store.setItem(_this.createKey(key), value);
                }
            }
        };
        this.swapToInMemory = function () {
            var keys = [];
            if (_this._store) {
                for (var i = 0; i < _this._store.length; i++) {
                    keys.push(_this._store.key(i));
                }
            }
            var inMemoryStorage;
            if (isSupported(window[GLOBAL_IN_MEMORY_NAME])) {
                inMemoryStorage = window[GLOBAL_IN_MEMORY_NAME];
            }
            else {
                inMemoryStorage = InMemoryStorage;
                if (!window[GLOBAL_IN_MEMORY_NAME]) {
                    // If not already attached to window then attach our instance of InMemoryStorage
                    // We need to do this because if there are multiple instances of Analytics Client in multiple scopes,
                    // there is no way to guarantee the throttling behaviour of the UI veiwed event across those instances without a global singleton
                    window[GLOBAL_IN_MEMORY_NAME] = InMemoryStorage;
                }
            }
            keys.forEach(function (key) {
                if (key.indexOf(_this.getPrefix()) === 0) {
                    var value = _this._store.getItem(key);
                    inMemoryStorage.setItem(key, value);
                }
            });
            _this._store = inMemoryStorage;
        };
        this.clear = function () { return _this._store.clear(); };
        this.key = function (index) { return _this._store.key(index); };
        this.getPrefix = function () { return _this._prefix; };
        this.createKey = function (key) { return _this.getPrefix() + "." + key; };
        this._prefix = (environmentPrefix && environmentPrefix !== envType.PROD ?
            AWC_STORAGE_PREFIX + "-" + environmentPrefix
            : AWC_STORAGE_PREFIX);
        if (isSupported(storageToUse)) {
            this._store = storageToUse;
        }
        else {
            this.swapToInMemory();
        }
    }
    return SafeStorage;
}());
export default SafeStorage;
