import { __assign } from "tslib";
import { eventType } from './analyticsWebTypes';
import libraryVersion from './version';
import { isPlainObject } from './util/object-utils';
function buildTenantFields(tenantInfo) {
    return {
        tenantIdType: tenantInfo.tenantIdType,
        tenantId: tenantInfo.tenantId,
    };
}
function buildUserFields(userInfo) {
    return {
        userIdType: userInfo.userIdType,
    };
}
function buildOrgFields(orgInfo) {
    return {
        orgId: orgInfo.orgId,
    };
}
function getProductField(field, override) {
    return override === undefined ? field : override;
}
function buildProductFields(productInfo, productOverrides) {
    var overrides = productOverrides || {};
    var env = getProductField(productInfo.env, overrides.env);
    var product = getProductField(productInfo.product, overrides.product);
    var subproduct = getProductField(productInfo.subproduct(), overrides.subproduct);
    var version = getProductField(productInfo.version, overrides.version);
    var origin = getProductField(productInfo.origin, overrides.origin);
    var platform = getProductField(productInfo.platform, overrides.platform);
    return {
        env: env,
        product: product,
        subproduct: subproduct,
        version: version,
        origin: origin,
        platform: platform,
    };
}
function isNotEmptyObject(obj) {
    return isPlainObject(obj) && Object.keys(obj).length > 0;
}
function buildAttributesWithName(name, attrObject) {
    var _a;
    return isNotEmptyObject(attrObject) ? (_a = {}, _a[name] = attrObject, _a) : undefined;
}
function buildAttributes(attributes) {
    return buildAttributesWithName('attributes', attributes);
}
export function filterAndBuildContainers(containers) {
    var validContainers = {};
    Object.keys(containers).forEach(function (key) {
        var value = containers[key];
        validContainers[key] = {
            id: value.id,
            type: value.type,
        };
    });
    return validContainers;
}
export function buildContainersWithName(containers) {
    if (isNotEmptyObject(containers)) {
        var validContainers = filterAndBuildContainers(containers);
        return buildAttributesWithName('containers', validContainers);
    }
    return undefined;
}
function buildNonPrivacySafeAttributes(nonPrivacySafeAttributes) {
    return buildAttributesWithName('nonPrivacySafeAttributes', nonPrivacySafeAttributes);
}
export function buildScreenEvent(productInfo, tenantInfo, userInfo, attributes, nonPrivacySafeAttributes, tags, tabId, sessionId, taskSessions, orgInfo, containers) {
    var productFields = buildProductFields(productInfo);
    var tenantFields = buildTenantFields(tenantInfo);
    var userFields = buildUserFields(userInfo);
    var orgFields = buildOrgFields(orgInfo);
    var overrides = {
        title: '',
        path: '',
        url: '',
        referrer: '',
        search: '',
        eventType: eventType.SCREEN,
    };
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, productFields), tenantFields), userFields), orgFields), overrides), buildAttributes(attributes)), buildNonPrivacySafeAttributes(nonPrivacySafeAttributes)), buildContainersWithName(containers)), { tags: tags,
        tabId: tabId,
        sessionId: sessionId,
        taskSessions: taskSessions });
}
export function buildActionName(event) {
    return event.actionSubject + " " + event.action;
}
export function buildContext(productInfo) {
    var screen = window.screen || {};
    return {
        context: {
            locale: productInfo.locale,
            screen: {
                width: screen.width,
                height: screen.height,
                density: window.devicePixelRatio,
            },
            library: {
                name: 'analytics.js',
                version: libraryVersion,
            },
        },
    };
}
export function extractProductOverrides(event) {
    var env = event.env, product = event.product, subproduct = event.subproduct, version = event.version, origin = event.origin, platform = event.platform;
    return {
        env: env,
        product: product,
        subproduct: subproduct,
        version: version,
        origin: origin,
        platform: platform,
    };
}
export function buildActionEvent(productInfo, tenantInfo, userInfo, event, actionEventType, tabId, sessionId, taskSessions, orgInfo) {
    var productFields = buildProductFields(productInfo, extractProductOverrides(event));
    var tenantFields = buildTenantFields(tenantInfo);
    var orgFields = buildOrgFields(orgInfo);
    var userFields = buildUserFields(userInfo);
    var actionFields = __assign({ containerType: event.containerType, containerId: event.containerId, source: event.source, objectType: event.objectType, objectId: event.objectId, actionSubject: event.actionSubject, action: event.action, actionSubjectId: event.actionSubjectId, attributes: event.attributes, nonPrivacySafeAttributes: event.nonPrivacySafeAttributes, tags: event.tags, eventType: actionEventType }, buildContainersWithName(event.containers));
    return __assign(__assign(__assign(__assign(__assign(__assign({}, productFields), tenantFields), orgFields), userFields), actionFields), { tabId: tabId,
        sessionId: sessionId,
        taskSessions: taskSessions });
}
