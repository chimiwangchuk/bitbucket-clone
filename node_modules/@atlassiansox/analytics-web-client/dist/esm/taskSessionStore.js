import { __assign } from "tslib";
import { parseUrl, stringify } from 'query-string';
import uuidv4 from './uuid';
import { mapKeys, pick, omit, } from './objectUtils';
import urlParamExtractor from './urlUtils';
import { originTracingType, } from './analyticsWebTypes';
import SafeSessionStorage from './storage/SafeSessionStorage';
var STORAGE_KEY = 'taskSessions';
var INIT_KEY = 'taskSessionsInit';
var AWC_PARAM_PREFIX = 'awc.';
var TASK_SESSION_RELOAD_TIME = 3000;
var TaskSessionStore = /** @class */ (function () {
    function TaskSessionStore() {
        var _this = this;
        this._taskSessionsNotRecentlyInitialised = function (currentTimestamp) { return _this._safeSessionStorage.getItem(STORAGE_KEY) === null
            || _this._safeSessionStorage.getItem(INIT_KEY) === null
            || _this._safeSessionStorage.getItem(INIT_KEY) < currentTimestamp - TASK_SESSION_RELOAD_TIME; };
        this._removeTaskSessionPrefix = function (_, taskSessionName) { return taskSessionName.split(AWC_PARAM_PREFIX)[1]; };
        this._isTaskSessionQueryParam = function (_, taskSessionName) { return taskSessionName.startsWith(AWC_PARAM_PREFIX); };
        this.getAllTaskSessions = function () {
            try {
                return JSON.parse(_this._safeSessionStorage.getItem(STORAGE_KEY));
            }
            catch (e) {
                return {};
            }
        };
        this._writeToSessionStorage = function (taskSessions) {
            try {
                _this._safeSessionStorage.setItem(STORAGE_KEY, JSON.stringify(taskSessions));
                // eslint-disable-next-line no-empty
            }
            catch (e) { }
        };
        this._appendTaskSessions = function (newTaskSessions) {
            var currentState = _this.getAllTaskSessions();
            var newState = (currentState === null) ? newTaskSessions : Object.assign(currentState, newTaskSessions);
            _this._writeToSessionStorage(newState);
        };
        this.createTaskSession = function (taskSessionName) {
            var taskSessionId = uuidv4();
            var newTaskSessions = {};
            newTaskSessions[taskSessionName] = taskSessionId;
            _this._appendTaskSessions(newTaskSessions);
            return taskSessionId;
        };
        this.createTaskSessionWithProvidedId = function (taskSessionName, taskSessionId) {
            if (typeof taskSessionId !== 'string') {
                throw new TypeError('invalid taskSessionId, must be string');
            }
            var newTaskSessions = {};
            newTaskSessions[taskSessionName] = taskSessionId;
            _this._appendTaskSessions(newTaskSessions);
        };
        this.completeTaskSession = function (taskSessionName) {
            var currentState = _this.getAllTaskSessions();
            delete currentState[taskSessionName];
            _this._writeToSessionStorage(currentState);
        };
        this.formatTaskSessionQueryString = function (_a) {
            var uri = _a.uri, includedTaskSessions = _a.includedTaskSessions;
            var _b = parseUrl(uri), url = _b.url, query = _b.query;
            var currentState = _this.getAllTaskSessions();
            // Use specified task sessions, otherwise all tasksessions excluding originTracing sessions
            var filteredTaskSessions = includedTaskSessions
                ? pick(currentState, includedTaskSessions)
                : omit(currentState, Object.values(originTracingType));
            if (Object.keys(filteredTaskSessions).length === 0) {
                return uri;
            }
            var queryWithTaskSessions = __assign(__assign({}, mapKeys(filteredTaskSessions, function (_, taskSessionName) { return AWC_PARAM_PREFIX + taskSessionName; })), query);
            return url + "?" + stringify(queryWithTaskSessions);
        };
        this.stripQueryParameters = function () {
            var extractedTaskSessions = mapKeys(urlParamExtractor(_this._isTaskSessionQueryParam), _this._removeTaskSessionPrefix);
            _this._appendTaskSessions(extractedTaskSessions);
        };
        var currentTimestamp = Date.now();
        this._safeSessionStorage = new SafeSessionStorage();
        // Wrapping all sessionStorage calls in try catch to stop any error propogation, taskSessions should gracefully fail.
        try {
            if (this._taskSessionsNotRecentlyInitialised(currentTimestamp)) {
                this._writeToSessionStorage({});
                this._safeSessionStorage.setItem(INIT_KEY, currentTimestamp);
            }
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
    }
    return TaskSessionStore;
}());
export default TaskSessionStore;
