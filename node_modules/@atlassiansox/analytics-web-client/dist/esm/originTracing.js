import urlParamExtractor from './urlUtils';
import { originTracingType, } from './analyticsWebTypes';
var OriginTracing = /** @class */ (function () {
    function OriginTracing() {
        this.handleOriginParameters = function (originParamHandlerMapping, historyReplaceFn) {
            // Collect all the parameter labels to be handled
            var originParamLabelList = Object.keys(originParamHandlerMapping);
            if (!originParamLabelList.length > 0) {
                throw new Error('Empty parameter mapping provided');
            }
            // Check if the parameter labels are valid. If any invalid labels are found throw an exception.
            var invalidParams = originParamLabelList.filter(function (x) { return Object.values(originTracingType).indexOf(x) < 0; });
            if (invalidParams.length > 0) {
                throw new Error("Invalid Origin Tracing Parameter(s) supplied: " + invalidParams.join() + "!");
            }
            var isCaptureParam = function (_, key) { return originParamLabelList.indexOf(key) >= 0; };
            // Capture and remove params from URL
            var capturedURLParams = urlParamExtractor(isCaptureParam, historyReplaceFn);
            // Apply provided handler function to extract origin trace ID from each URL parameter
            var applyHandlerFunction = function (key) {
                var _a;
                var x = originParamHandlerMapping[key](capturedURLParams[key]);
                return _a = {}, _a[key] = x, _a;
            };
            var extractedOriginID = Object.keys(capturedURLParams)
                .map(applyHandlerFunction)
                .reduce(function (accumulator, currentValue) { return Object.assign(accumulator, currentValue); }, {});
            return extractedOriginID;
        };
        this._originStore = {};
    }
    return OriginTracing;
}());
export default OriginTracing;
