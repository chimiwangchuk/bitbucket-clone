/**
 * Wraps {possibleFn} into a error-safe function and handles cases where {possibleFn}
 * is a function or object
 *
 * @param possibleFn - function that returns and object or the object itself
 * @param errorMessage - error message to log if {possibleFn} is a function and
 *                        throws an error when called
 * @returns {Function}
 */
export default (function (possibleFn, errorMessage) {
    var isFunction = typeof possibleFn === 'function';
    return function () {
        if (isFunction) {
            try {
                return possibleFn();
            }
            catch (e) {
                // eslint-disable-next-line no-console
                console.error(errorMessage + " - " + e.message);
                return undefined;
            }
        }
        return possibleFn;
    };
});
