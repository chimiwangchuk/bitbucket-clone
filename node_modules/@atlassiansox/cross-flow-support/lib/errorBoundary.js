import * as tslib_1 from "tslib";
import { Component } from 'react';
import { OPERATIONAL_EVENT_TYPE, source, errorBoundaryAction, errorBoundaryActionSubject, } from './constants';
import { name, version } from '../version.json';
var payload = {
    eventType: OPERATIONAL_EVENT_TYPE,
    action: errorBoundaryAction,
    actionSubject: errorBoundaryActionSubject,
};
var context = [
    { source: source },
    {
        packageName: name,
        packageVersion: version,
    },
];
var ErrorBoundary = /** @class */ (function (_super) {
    tslib_1.__extends(ErrorBoundary, _super);
    function ErrorBoundary() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            hasError: false,
        };
        return _this;
    }
    ErrorBoundary.getDerivedStateFromError = function () {
        return { hasError: true };
    };
    ErrorBoundary.prototype.componentDidCatch = function () {
        this.props.onAnalyticsEvent({
            payload: payload,
            context: context,
        });
    };
    ErrorBoundary.prototype.render = function () {
        if (this.state.hasError) {
            return null;
        }
        return this.props.children;
    };
    return ErrorBoundary;
}(Component));
export { ErrorBoundary };
//# sourceMappingURL=errorBoundary.js.map