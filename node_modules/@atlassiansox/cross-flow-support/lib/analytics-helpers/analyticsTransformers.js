// Copied from xflow-ui. We post raw analytics events (context and payload only) from xflow-ui to consumer (CFE), transform on consumer and post to gasv3.
import * as tslib_1 from "tslib";
import { UI_EVENT_TYPE, TRACK_EVENT_TYPE, SCREEN_EVENT_TYPE, OPERATIONAL_EVENT_TYPE, DEFAULT_SOURCE, } from '@atlaskit/analytics-gas-types';
var GROWTH_TAG = 'growth';
var extractFromEventContext = function (propertyNames, context) {
    return context
        .reduce(function (acc, contextItem) {
        propertyNames.forEach(function (propertyName) {
            var navContextProp = contextItem ? contextItem[propertyName] : null;
            acc.push(navContextProp || contextItem[propertyName]);
        });
        return acc;
    }, [])
        .filter(Boolean);
};
var getSources = function (context) { return extractFromEventContext(['source'], context); };
var getExtraAttributes = function (context) {
    return context.reduce(function (ans, _a) {
        var attributes = _a.attributes, contextProps = tslib_1.__rest(_a, ["attributes"]);
        var newAttributes = tslib_1.__assign({}, ans, contextProps);
        return attributes ? tslib_1.__assign({}, newAttributes, attributes) : newAttributes;
    }, {});
};
var getPackageInfo = function (context) {
    return context
        .map(function (contextItem) { return ({
        packageName: contextItem.packageName,
        packageVersion: contextItem.packageVersion,
    }); })
        .filter(function (p) { return p.packageName; });
};
var last = function (values) { return values[values.length - 1]; };
export var transformEvent = function (event) {
    var context = event.context, payload = event.payload;
    if (!payload) {
        return null;
    }
    var sources = getSources(context);
    var source = last(sources) || DEFAULT_SOURCE;
    var extraAttributes = getExtraAttributes(context);
    var _a = last(getPackageInfo(context)) || {}, _b = _a.packageName, packageName = _b === void 0 ? undefined : _b, _c = _a.packageVersion, packageVersion = _c === void 0 ? undefined : _c;
    var _d = payload.eventType, eventType = _d === void 0 ? UI_EVENT_TYPE : _d, action = payload.action, actionSubject = payload.actionSubject, actionSubjectId = payload.actionSubjectId, payloadAttributes = payload.attributes, name = payload.name;
    var attributes = tslib_1.__assign({ packageName: packageName,
        packageVersion: packageVersion }, extraAttributes, payloadAttributes);
    var tags = payload.tags || [];
    tags.push(GROWTH_TAG);
    switch (eventType) {
        case UI_EVENT_TYPE:
        case OPERATIONAL_EVENT_TYPE:
        case TRACK_EVENT_TYPE:
            return {
                eventType: eventType,
                source: source,
                actionSubject: actionSubject,
                action: action,
                actionSubjectId: actionSubjectId,
                attributes: attributes,
                tags: tags.slice(0),
            };
        case SCREEN_EVENT_TYPE:
            return {
                eventType: eventType,
                name: name,
                attributes: attributes,
                source: source,
                tags: tags.slice(0),
            };
        default:
            break;
    }
    return null;
};
//# sourceMappingURL=analyticsTransformers.js.map