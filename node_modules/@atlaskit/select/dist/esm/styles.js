import { __assign } from "tslib";
import { gridSize } from '@atlaskit/theme/constants';
import * as colors from '@atlaskit/theme/colors';
var BORDER_WIDTH = 2;
var ICON_PADDING = 2;
var paddingExcludingBorder = gridSize() - BORDER_WIDTH;
export default function baseStyles(validationState, isCompact) {
    return {
        container: function (css, _a) {
            var isDisabled = _a.isDisabled;
            return (__assign(__assign({}, css), { 
                // react-select disables pointer events when isDisabled is true.
                // We override this and make the inner container turn it off instead.
                pointerEvents: 'all', cursor: isDisabled ? 'not-allowed' : undefined }));
        },
        control: function (css, _a) {
            var isFocused = _a.isFocused, isDisabled = _a.isDisabled;
            var borderColor = isFocused ? colors.B100 : colors.N20;
            var backgroundColor = isFocused ? colors.N0 : colors.N20;
            if (isDisabled) {
                backgroundColor = colors.N20;
            }
            if (validationState === 'error')
                borderColor = colors.R400;
            if (validationState === 'success')
                borderColor = colors.G400;
            var borderColorHover = isFocused ? colors.B100 : colors.N30;
            if (validationState === 'error')
                borderColorHover = colors.R400;
            if (validationState === 'success')
                borderColorHover = colors.G400;
            var transitionDuration = '200ms';
            return __assign(__assign({}, css), { 
                // Turn pointer events off when disabled - this makes it so hover etc don't work.
                pointerEvents: isDisabled ? 'none' : undefined, backgroundColor: backgroundColor,
                borderColor: borderColor, borderStyle: 'solid', borderRadius: '3px', borderWidth: '2px', boxShadow: 'none', minHeight: isCompact ? gridSize() * 4 : gridSize() * 5, padding: 0, transition: "background-color " + transitionDuration + " ease-in-out,\n        border-color " + transitionDuration + " ease-in-out", msOverflowStyle: '-ms-autohiding-scrollbar', '::-webkit-scrollbar': {
                    height: gridSize(),
                    width: gridSize(),
                }, '::-webkit-scrollbar-corner': {
                    display: 'none',
                }, ':hover': {
                    '::-webkit-scrollbar-thumb': {
                        backgroundColor: 'rgba(0,0,0,0.2)',
                    },
                    cursor: 'pointer',
                    backgroundColor: isFocused ? colors.N0 : colors.N30,
                    borderColor: borderColorHover,
                }, '::-webkit-scrollbar-thumb:hover': {
                    backgroundColor: 'rgba(0,0,0,0.4)',
                } });
        },
        valueContainer: function (css) { return (__assign(__assign({}, css), { paddingLeft: paddingExcludingBorder, paddingRight: paddingExcludingBorder, paddingBottom: isCompact ? 0 : 2, paddingTop: isCompact ? 0 : 2 })); },
        clearIndicator: function (css) { return (__assign(__assign({}, css), { color: colors.N70, paddingLeft: ICON_PADDING, paddingRight: ICON_PADDING, paddingBottom: isCompact ? 0 : 6, paddingTop: isCompact ? 0 : 6, ':hover': {
                color: colors.N500,
            } })); },
        loadingIndicator: function (css) { return (__assign(__assign({}, css), { paddingBottom: isCompact ? 0 : 6, paddingTop: isCompact ? 0 : 6 })); },
        dropdownIndicator: function (css, _a) {
            var isDisabled = _a.isDisabled;
            var color = colors.N500;
            if (isDisabled) {
                color = colors.N70;
            }
            return __assign(__assign({}, css), { color: color, paddingLeft: ICON_PADDING, paddingRight: ICON_PADDING, paddingBottom: isCompact ? 0 : 6, paddingTop: isCompact ? 0 : 6, ':hover': {
                    color: colors.N200,
                } });
        },
        indicatorsContainer: function (css) { return (__assign(__assign({}, css), { paddingRight: paddingExcludingBorder - ICON_PADDING })); },
        option: function (css, _a) {
            var isFocused = _a.isFocused, isSelected = _a.isSelected;
            var color = isSelected ? colors.N0 : undefined;
            var backgroundColor;
            if (isSelected)
                backgroundColor = colors.N500;
            else if (isFocused)
                backgroundColor = colors.N30;
            return __assign(__assign({}, css), { paddingTop: '6px', paddingBottom: '6px', backgroundColor: backgroundColor,
                color: color });
        },
        placeholder: function (css) { return (__assign(__assign({}, css), { color: colors.N100 })); },
        singleValue: function (css, _a) {
            var isDisabled = _a.isDisabled;
            return (__assign(__assign({}, css), { color: isDisabled ? colors.N70 : colors.N800, lineHeight: gridSize() * 2 + "px" }));
        },
        menuList: function (css) { return (__assign(__assign({}, css), { paddingTop: gridSize(), paddingBottom: gridSize() })); },
        multiValue: function (css) { return (__assign(__assign({}, css), { borderRadius: '2px', backgroundColor: colors.N40, color: colors.N500, maxWidth: '100%' })); },
        multiValueLabel: function (css) { return (__assign(__assign({}, css), { padding: '2px', paddingRight: '2px' })); },
        multiValueRemove: function (css, _a) {
            var isFocused = _a.isFocused;
            return (__assign(__assign({}, css), { backgroundColor: isFocused && colors.R75, color: isFocused && colors.R400, paddingLeft: '2px', paddingRight: '2px', borderRadius: '0px 2px 2px 0px', ':hover': {
                    color: colors.R400,
                    backgroundColor: colors.R75,
                } }));
        },
    };
}
//# sourceMappingURL=styles.js.map