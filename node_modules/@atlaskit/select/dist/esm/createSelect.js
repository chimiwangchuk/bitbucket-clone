import { __assign, __extends, __rest } from "tslib";
import React, { Component } from 'react';
import { mergeStyles } from 'react-select';
import makeAnimated from 'react-select/animated';
import memoizeOne from 'memoize-one';
import isEqual from 'react-fast-compare';
import * as defaultComponents from './components';
import baseStyles from './styles';
export default function createSelect(WrappedComponent) {
    var _a;
    return _a = /** @class */ (function (_super) {
            __extends(AtlaskitSelect, _super);
            function AtlaskitSelect(props) {
                var _this = _super.call(this, props) || this;
                _this.components = {};
                _this.select = null;
                _this.cacheComponents = function (components, enableAnimation) {
                    _this.components = enableAnimation
                        ? makeAnimated(__assign(__assign({}, defaultComponents), components))
                        : __assign(__assign({}, defaultComponents), components);
                };
                _this.onSelectRef = function (ref) {
                    _this.select = ref;
                    var innerRef = _this.props.innerRef;
                    if (typeof innerRef === 'object') {
                        innerRef.current = ref;
                    }
                    if (typeof innerRef === 'function') {
                        innerRef(ref);
                    }
                };
                _this.cacheComponents = memoizeOne(_this.cacheComponents, isEqual).bind(_this);
                _this.cacheComponents(props.components || {}, props.enableAnimation);
                return _this;
            }
            AtlaskitSelect.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
                this.cacheComponents(nextProps.components, nextProps.enableAnimation);
            };
            AtlaskitSelect.prototype.focus = function () {
                if (this.select)
                    this.select.focus();
            };
            AtlaskitSelect.prototype.blur = function () {
                if (this.select)
                    this.select.blur();
            };
            AtlaskitSelect.prototype.render = function () {
                var _a = this.props, styles = _a.styles, validationState = _a.validationState, spacing = _a.spacing, isMulti = _a.isMulti, props = __rest(_a, ["styles", "validationState", "spacing", "isMulti"]);
                var isCompact = spacing === 'compact';
                // props must be spread first to stop `components` being overridden
                return (React.createElement(WrappedComponent, __assign({ ref: this.onSelectRef, isMulti: isMulti }, props, { components: this.components, styles: mergeStyles(baseStyles(validationState, isCompact), styles) })));
            };
            return AtlaskitSelect;
        }(Component)),
        _a.defaultProps = {
            enableAnimation: true,
            validationState: 'default',
            spacing: 'default',
            onClickPreventDefault: true,
            tabSelectsValue: false,
            components: {},
            styles: {},
        },
        _a;
}
//# sourceMappingURL=createSelect.js.map