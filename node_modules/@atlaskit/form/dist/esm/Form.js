import { __read, __spread } from "tslib";
import React, { createContext, useCallback, useEffect, useState, useRef, } from 'react';
import { createForm, } from 'final-form';
import createDecorator from 'final-form-focus';
export var FormContext = createContext(function () {
    return function () { };
});
export var IsDisabledContext = createContext(false);
function Form(props) {
    var formRef = useRef(null);
    var onSubmitRef = useRef(props.onSubmit);
    onSubmitRef.current = props.onSubmit;
    var form = useState(function () {
        var finalForm = createForm({
            onSubmit: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return onSubmitRef.current.apply(onSubmitRef, __spread(args));
            },
            destroyOnUnregister: true,
            initialValues: {},
            mutators: {
                setDefaultValue: function (_a, state) {
                    var _b = __read(_a, 2), name = _b[0], defaultValue = _b[1];
                    if (state.formState.initialValues) {
                        var initialValues = state.formState.initialValues;
                        var values = state.formState.values;
                        var value = name && typeof defaultValue === 'function'
                            ? defaultValue(initialValues[name])
                            : defaultValue;
                        /* eslint-disable no-param-reassign */
                        initialValues[name] = value;
                        values[name] = value;
                        /* eslint-enable */
                    }
                },
            },
        });
        createDecorator(function () {
            return formRef.current
                ? Array.from(formRef.current.querySelectorAll('input'))
                : [];
        })(finalForm);
        return finalForm;
    })[0];
    var _a = __read(useState({
        dirty: false,
        submitting: false,
    }), 2), state = _a[0], setState = _a[1];
    useEffect(function () {
        var unsubscribe = form.subscribe(function (_a) {
            var dirty = _a.dirty, submitting = _a.submitting;
            setState({ dirty: dirty, submitting: submitting });
        }, {
            dirty: true,
            submitting: true,
        });
        return unsubscribe;
    }, [form]);
    var registerField = useCallback(function (name, defaultValue, subscriber, subscription, config) {
        form.pauseValidation();
        var unsubscribe = form.registerField(name, subscriber, subscription, config);
        form.mutators.setDefaultValue(name, defaultValue);
        form.resumeValidation();
        return unsubscribe;
    }, [form]);
    var handleSubmit = function (e) {
        if (e) {
            e.preventDefault();
        }
        form.submit();
    };
    var handleReset = function (initialValues) {
        form.reset(initialValues);
    };
    var handleKeyDown = function (e) {
        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {
            var submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');
            if (submitButton)
                submitButton.click();
            e.preventDefault();
        }
    };
    var _b = props.isDisabled, isDisabled = _b === void 0 ? false : _b, children = props.children;
    var dirty = state.dirty, submitting = state.submitting;
    return (React.createElement(FormContext.Provider, { value: registerField },
        React.createElement(IsDisabledContext.Provider, { value: isDisabled }, children({
            formProps: {
                onSubmit: handleSubmit,
                ref: formRef,
                onKeyDown: handleKeyDown,
            },
            dirty: dirty,
            reset: handleReset,
            submitting: submitting,
            disabled: isDisabled,
            getValues: function () { return form.getState().values; },
        }))));
}
export default Form;
//# sourceMappingURL=Form.js.map