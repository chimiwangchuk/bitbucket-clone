import { __assign, __awaiter, __extends, __generator } from "tslib";
import { parse, stringify } from 'query-string';
import { isClientBasedAuth } from '@atlaskit/media-core';
import { mapAuthToQueryParameters } from '../models/auth-query-parameters';
var HttpError = /** @class */ (function (_super) {
    __extends(HttpError, _super);
    function HttpError(message, statusCode) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.statusCode = statusCode;
        return _this;
    }
    return HttpError;
}(Error));
var processFetchResponse = function (response) { return __awaiter(void 0, void 0, void 0, function () {
    var text;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(response.ok || response.redirected)) return [3 /*break*/, 1];
                return [2 /*return*/, response];
            case 1: return [4 /*yield*/, response.text()];
            case 2:
                text = _a.sent();
                throw new HttpError("Got error code " + response.status + ": " + text, response.status);
        }
    });
}); };
export function request(url, options, controller) {
    if (options === void 0) { options = {}; }
    var _a = options.method, method = _a === void 0 ? 'GET' : _a, auth = options.auth, params = options.params, headers = options.headers, body = options.body, _b = options.retryOptions, retryOptions = _b === void 0 ? {} : _b;
    var doFetch = function () {
        return fetch(createUrl(url, { params: params }), {
            method: method,
            body: body,
            headers: withAuth(auth)(headers),
            signal: controller && controller.signal,
        }).then(processFetchResponse);
    };
    return promiseRetry(doFetch, retryOptions);
}
export function mapResponseToJson(response) {
    return response.json();
}
export function mapResponseToBlob(response) {
    return response.blob();
}
export function mapResponseToVoid() {
    return Promise.resolve();
}
export function createUrl(url, _a) {
    var params = _a.params, auth = _a.auth;
    var _b = extract(url), baseUrl = _b.baseUrl, queryParams = _b.queryParams;
    var authParams = auth && mapAuthToQueryParameters(auth);
    var queryString = stringify(__assign(__assign(__assign({}, queryParams), params), authParams));
    var shouldAppendQueryString = queryString.length > 0;
    return "" + baseUrl + (shouldAppendQueryString ? "?" + queryString : '');
}
function withAuth(auth) {
    return function (headers) {
        if (auth) {
            return __assign(__assign({}, (headers || {})), mapAuthToRequestHeaders(auth));
        }
        else {
            return headers;
        }
    };
}
function extract(url) {
    var index = url.indexOf('?');
    if (index > 0) {
        return {
            baseUrl: url.substring(0, index),
            queryParams: parse(url.substring(index + 1, url.length)),
        };
    }
    else {
        return {
            baseUrl: url,
        };
    }
}
function mapAuthToRequestHeaders(auth) {
    if (isClientBasedAuth(auth)) {
        return {
            'X-Client-Id': auth.clientId,
            Authorization: "Bearer " + auth.token,
        };
    }
    else {
        return {
            'X-Issuer': auth.asapIssuer,
            Authorization: "Bearer " + auth.token,
        };
    }
}
var DEFAULT_OPTIONS = {
    attempts: 5,
    startTimeoutInMs: 1000,
    factor: 2,
};
var wait = function (timeoutInMs) {
    return new Promise(function (resolve) {
        setTimeout(resolve, timeoutInMs);
    });
};
// fetch throws TypeError for network errors
var isNotFetchNetworkError = function (e) { return !(e instanceof TypeError); };
export var isAbortedRequestError = function (e) {
    return e.message === 'request_cancelled' || e.name === 'AbortError';
};
function promiseRetry(functionToRetry, overwriteOptions) {
    if (overwriteOptions === void 0) { overwriteOptions = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var options, timeoutInMs, waitAndBumpTimeout, i, err_1, isLastAttempt;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options = __assign(__assign({}, DEFAULT_OPTIONS), overwriteOptions);
                    timeoutInMs = options.startTimeoutInMs;
                    waitAndBumpTimeout = function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, wait(timeoutInMs)];
                                case 1:
                                    _a.sent();
                                    timeoutInMs *= options.factor;
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    i = 1;
                    _a.label = 1;
                case 1:
                    if (!(i <= options.attempts)) return [3 /*break*/, 9];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 8]);
                    return [4 /*yield*/, functionToRetry()];
                case 3: return [2 /*return*/, _a.sent()];
                case 4:
                    err_1 = _a.sent();
                    // don't retry if request was aborted by user
                    if (isAbortedRequestError(err_1)) {
                        return [2 /*return*/, Promise.reject(err_1)];
                    }
                    isLastAttempt = i === options.attempts;
                    if (!((isNotFetchNetworkError(err_1) && err_1.statusCode < 500) ||
                        isLastAttempt)) return [3 /*break*/, 5];
                    return [2 /*return*/, Promise.reject(new Error("The call did not succeed after " + i + " attempts. Last error is\n---\n" + err_1.stack + "\n---"))];
                case 5: return [4 /*yield*/, waitAndBumpTimeout()];
                case 6:
                    _a.sent();
                    _a.label = 7;
                case 7: return [3 /*break*/, 8];
                case 8:
                    i++;
                    return [3 /*break*/, 1];
                case 9: return [2 /*return*/, Promise.reject(new Error('Exhaused all attempts'))];
            }
        });
    });
}
//# sourceMappingURL=request.js.map