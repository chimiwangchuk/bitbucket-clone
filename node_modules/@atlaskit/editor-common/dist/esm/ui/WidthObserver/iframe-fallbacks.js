import { __assign, __read } from "tslib";
import React, { useRef, useState, useEffect } from 'react';
import { useInView } from './hooks';
import browserVersion from '../../utils/browser';
import { browser } from './utils';
var emptySubscribe = function () { return function () { }; };
var _a = React.createContext({
    subscribe: null,
}), IframeWrapperConsumer = _a.Consumer, IframeWrapperProvider = _a.Provider;
function ObjectIframe(props) {
    var onResize = props.onResize;
    var ref = useRef(null);
    useEffect(function () {
        if (!ref || !ref.current) {
            return;
        }
        var iframe = ref.current;
        if (!iframe.contentDocument || !iframe.contentDocument.defaultView) {
            return;
        }
        var iframeWindow = iframe.contentDocument.defaultView;
        iframeWindow.addEventListener('resize', onResize);
        return function () {
            iframeWindow.removeEventListener('resize', onResize);
        };
    }, [ref, onResize]);
    return (React.createElement("object", { ref: ref, data: "about:blank", type: "text/html", style: { position: 'absolute', height: '0', width: '100%' }, "aria-hidden": true, tabIndex: -1 }));
}
/**
 * IE11 requires IFrame with src to avoid Access Denied error.
 *
 * https://stackoverflow.com/questions/1886547/access-is-denied-javascript-error-when-trying-to-access-the-document-object-of
 **/
function NativeIframe(props) {
    var onResize = props.onResize;
    var ref = useRef(null);
    var onLoad = React.useCallback(function () {
        if (!ref || !ref.current) {
            return;
        }
        var iframe = ref.current;
        if (!iframe.contentDocument || !iframe.contentDocument.defaultView) {
            return;
        }
        var iframeWindow = iframe.contentDocument.defaultView;
        iframeWindow.addEventListener('resize', onResize);
    }, [onResize]);
    return (React.createElement("iframe", { ref: ref, src: "about:blank", frameBorder: "0", style: { position: 'absolute', height: '0', width: '100%' }, onLoad: onLoad, "aria-hidden": true, tabIndex: -1 }));
}
function Iframe(props) {
    if (browserVersion.ie_version === 11) {
        return React.createElement(NativeIframe, __assign({}, props));
    }
    return React.createElement(ObjectIframe, __assign({}, props));
}
var IframeWrapper = function (_a) {
    var children = _a.children;
    return (React.createElement("div", { style: {
            position: 'absolute',
            height: '0',
            width: '100%',
        } }, children));
};
var emptySubscription = function () { return function () { }; };
var SubscribeIframeResize = React.memo(function (_a) {
    var subscribe = _a.subscribe, setWidth = _a.setWidth;
    var ref = React.useRef(null);
    useEffect(function () {
        if (ref && ref.current) {
            var target = ref.current;
            var width = target.offsetWidth;
            setWidth(width);
        }
        var unsubscribe = subscribe(function () {
            if (ref && ref.current) {
                var target = ref.current;
                var width = target.offsetWidth;
                setWidth(width);
            }
        });
        return unsubscribe;
    }, [ref, subscribe, setWidth]);
    return React.createElement("div", { ref: ref });
});
var SubscribeIframeResizeWhenVisible = React.memo(function (_a) {
    var subscribe = _a.subscribe, setWidth = _a.setWidth;
    var _b = __read(useInView({
        /* Optional options */
        threshold: 0,
    }), 4), inViewRef = _b[0], inView = _b[1], target = _b[2], entry = _b[3];
    useEffect(function () {
        if (inView && entry && entry.target instanceof HTMLElement) {
            var boundingClientRect = entry.boundingClientRect;
            var width = boundingClientRect.width;
            setWidth(width);
        }
        var unsubscribe = subscribe(function () {
            // The first time the component is mounted will need to
            // get this information from the HTMLElement
            if (inView && target instanceof HTMLElement) {
                var width = target.offsetWidth;
                setWidth(width);
            }
        });
        return unsubscribe;
    }, [inView, entry, setWidth, subscribe, target]);
    return (React.createElement("div", { style: {
            position: 'absolute',
            height: '0',
            width: '100%',
        }, ref: inViewRef }));
});
function getSubscribeIframe(useIntersectionObserver) {
    if (useIntersectionObserver) {
        return SubscribeIframeResizeWhenVisible;
    }
    return SubscribeIframeResize;
}
/**
 * This component is responsible for creating an iframe using HTMLObjectElement.
 * It will provide a context object with a `subscribe` function as a callback,
 * so other components can subscribe to know when the iframe was resized.
 */
var IframeWidthObserverFallback = React.memo(function (props) {
    var _a = __read(useState(new Map()), 1), listeners = _a[0];
    var subscribe = React.useCallback(function (cb) {
        listeners.set(cb, null);
        return function () {
            listeners.delete(cb);
        };
    }, [listeners]);
    var onResize = React.useCallback(function () {
        listeners.forEach(function (_, cb) { return cb(); });
    }, [listeners]);
    return (React.createElement(React.Fragment, null,
        React.createElement(IframeWrapper, null,
            React.createElement(Iframe, { onResize: onResize })),
        React.createElement(IframeWrapperProvider, { value: { subscribe: subscribe } }, props.children)));
});
var NonIframeWidthObserverFallback = React.memo(function (props) {
    return (React.createElement(IframeWrapperProvider, { value: { subscribe: emptySubscribe } }, props.children));
});
export { IframeWrapperConsumer, IframeWrapperProvider, IframeWidthObserverFallback, SubscribeIframeResizeWhenVisible, SubscribeIframeResize, };
export var IframeWidthObserver = React.memo(function (_a) {
    var setWidth = _a.setWidth, useIntersectionObserver = _a.useIntersectionObserver;
    var Component = getSubscribeIframe(useIntersectionObserver);
    return (React.createElement(IframeWrapperConsumer, null, function (_a) {
        var subscribe = _a.subscribe;
        return (React.createElement(Component, { setWidth: setWidth, subscribe: subscribe || emptySubscription }));
    }));
});
export var IframeWidthObserverFallbackWrapper = React.memo(function (props) {
    var supportsResizeObserver = browser.supportsResizeObserver, supportsIntersectionObserver = browser.supportsIntersectionObserver;
    if (supportsResizeObserver && supportsIntersectionObserver) {
        return (React.createElement(NonIframeWidthObserverFallback, null, props.children));
    }
    return (React.createElement(IframeWidthObserverFallback, null, props.children));
});
//# sourceMappingURL=iframe-fallbacks.js.map