import { useContext, useRef } from 'react';
import { useCallbackOne } from 'use-memo-one';
import { AnalyticsReactContext, } from './AnalyticsReactContext';
import UIAnalyticsEvent from './UIAnalyticsEvent';
var noop = function () { return []; };
export function useAnalyticsEvents() {
    var analyticsContext = useContext(AnalyticsReactContext);
    var contextRef = useRef(analyticsContext);
    contextRef.current.getAtlaskitAnalyticsEventHandlers =
        analyticsContext.getAtlaskitAnalyticsEventHandlers;
    contextRef.current.getAtlaskitAnalyticsContext =
        analyticsContext.getAtlaskitAnalyticsContext;
    var createAnalyticsEvent = useCallbackOne(function (payload) {
        if (process.env.NODE_ENV !== 'production' &&
            (contextRef.current.getAtlaskitAnalyticsEventHandlers === null ||
                contextRef.current.getAtlaskitAnalyticsContext === null)) {
            /* eslint-disable-next-line no-console */
            console.error("\n@atlaskit/analytics-next\n---\nNo compatible <AnalyticsListener /> was found to fire this analytics event.\nUse of the useAnalyticsEvents() hook requires a parent <AnalyticsListener /> from @atlaskit/analytics-next@^6.3.0 or above.\nSee: https://atlaskit.atlassian.com/packages/core/analytics-next/docs/reference#AnalyticsListener\n");
        }
        var getAtlaskitAnalyticsContext = contextRef.current.getAtlaskitAnalyticsContext || noop;
        var getAtlaskitAnalyticsEventHandlers = contextRef.current.getAtlaskitAnalyticsEventHandlers || noop;
        return new UIAnalyticsEvent({
            context: getAtlaskitAnalyticsContext(),
            handlers: getAtlaskitAnalyticsEventHandlers(),
            payload: payload,
        });
    }, []);
    return {
        createAnalyticsEvent: createAnalyticsEvent,
    };
}
//# sourceMappingURL=useAnalyticsEvents.js.map