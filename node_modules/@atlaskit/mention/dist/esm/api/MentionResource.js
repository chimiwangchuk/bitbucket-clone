import { __assign, __awaiter, __extends, __generator } from "tslib";
import { utils as serviceUtils, } from '@atlaskit/util-service-support';
import { isAppMention, isTeamMention, MentionNameStatus, } from '../types';
import debug from '../util/logger';
var MAX_QUERY_ITEMS = 100;
var MAX_NOTIFIED_ITEMS = 20;
import { SLI_EVENT_TYPE, Actions, SliNames } from '../util/analytics';
var emptySecurityProvider = function () {
    return {
        params: {},
        headers: {},
    };
};
var AbstractResource = /** @class */ (function () {
    function AbstractResource() {
        this.changeListeners = new Map();
        this.allResultsListeners = new Map();
        this.errListeners = new Map();
        this.infoListeners = new Map();
        this.analyticsListeners = new Map();
    }
    AbstractResource.prototype.subscribe = function (key, callback, errCallback, infoCallback, allResultsCallback, analyticsListeners) {
        if (callback) {
            this.changeListeners.set(key, callback);
        }
        if (errCallback) {
            this.errListeners.set(key, errCallback);
        }
        if (infoCallback) {
            this.infoListeners.set(key, infoCallback);
        }
        if (allResultsCallback) {
            this.allResultsListeners.set(key, allResultsCallback);
        }
        if (analyticsListeners) {
            this.analyticsListeners.set(key, analyticsListeners);
        }
    };
    AbstractResource.prototype.unsubscribe = function (key) {
        this.changeListeners.delete(key);
        this.errListeners.delete(key);
        this.infoListeners.delete(key);
        this.allResultsListeners.delete(key);
        this.analyticsListeners.delete(key);
    };
    return AbstractResource;
}());
var AbstractMentionResource = /** @class */ (function (_super) {
    __extends(AbstractMentionResource, _super);
    function AbstractMentionResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbstractMentionResource.prototype.shouldHighlightMention = function (_mention) {
        return false;
    };
    // eslint-disable-next-line class-methods-use-this
    AbstractMentionResource.prototype.filter = function (query) {
        throw new Error("not yet implemented.\nParams: query=" + query);
    };
    // eslint-disable-next-line class-methods-use-this, no-unused-vars
    AbstractMentionResource.prototype.recordMentionSelection = function (_mention) {
        // Do nothing
    };
    AbstractMentionResource.prototype.isFiltering = function (_query) {
        return false;
    };
    AbstractMentionResource.prototype._notifyListeners = function (mentionsResult, stats) {
        debug('ak-mention-resource._notifyListeners', mentionsResult &&
            mentionsResult.mentions &&
            mentionsResult.mentions.length, this.changeListeners);
        this.changeListeners.forEach(function (listener, key) {
            try {
                listener(mentionsResult.mentions.slice(0, MAX_NOTIFIED_ITEMS), mentionsResult.query, stats);
            }
            catch (e) {
                // ignore error from listener
                debug("error from listener '" + key + "', ignoring", e);
            }
        });
    };
    AbstractMentionResource.prototype._notifyAllResultsListeners = function (mentionsResult) {
        debug('ak-mention-resource._notifyAllResultsListeners', mentionsResult &&
            mentionsResult.mentions &&
            mentionsResult.mentions.length, this.changeListeners);
        this.allResultsListeners.forEach(function (listener, key) {
            try {
                listener(mentionsResult.mentions.slice(0, MAX_NOTIFIED_ITEMS), mentionsResult.query);
            }
            catch (e) {
                // ignore error from listener
                debug("error from listener '" + key + "', ignoring", e);
            }
        });
    };
    AbstractMentionResource.prototype._notifyErrorListeners = function (error, query) {
        this.errListeners.forEach(function (listener, key) {
            try {
                listener(error, query);
            }
            catch (e) {
                // ignore error from listener
                debug("error from listener '" + key + "', ignoring", e);
            }
        });
    };
    AbstractMentionResource.prototype._notifyInfoListeners = function (info) {
        this.infoListeners.forEach(function (listener, key) {
            try {
                listener(info);
            }
            catch (e) {
                // ignore error fromr listener
                debug("error from listener '" + key + "', ignoring", e);
            }
        });
    };
    AbstractMentionResource.prototype._notifyAnalyticsListeners = function (event, actionSubject, action) {
        this.analyticsListeners.forEach(function (listener, key) {
            try {
                listener(event, actionSubject, action);
            }
            catch (e) {
                // ignore error from listener
                debug("error from listener '" + key + "', ignoring", e);
            }
        });
    };
    return AbstractMentionResource;
}(AbstractResource));
/**
 * Provides a Javascript API
 */
var MentionResource = /** @class */ (function (_super) {
    __extends(MentionResource, _super);
    function MentionResource(config) {
        var _this = _super.call(this) || this;
        _this.verifyMentionConfig(config);
        _this.config = config;
        _this.lastReturnedSearch = 0;
        _this.activeSearches = new Set();
        return _this;
    }
    MentionResource.prototype.shouldHighlightMention = function (mention) {
        if (this.config.shouldHighlightMention) {
            return this.config.shouldHighlightMention(mention);
        }
        return false;
    };
    MentionResource.prototype.notify = function (searchTime, mentionResult, query) {
        if (searchTime > this.lastReturnedSearch) {
            this.lastReturnedSearch = searchTime;
            this._notifyListeners(mentionResult, {
                duration: Date.now() - searchTime,
            });
        }
        else {
            var date = new Date(searchTime).toISOString().substr(17, 6);
            debug('Stale search result, skipping', date, query); // eslint-disable-line no-console, max-len
        }
        this._notifyAllResultsListeners(mentionResult);
    };
    MentionResource.prototype.notifyError = function (error, query) {
        this._notifyErrorListeners(error, query);
        if (query) {
            this.activeSearches.delete(query);
        }
    };
    MentionResource.prototype.filter = function (query, contextIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var searchTime, results, searchResponse, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        searchTime = Date.now();
                        results = void 0;
                        if (!!query) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.initialState(contextIdentifier)];
                    case 1:
                        results = _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        this.activeSearches.add(query);
                        searchResponse = this.search(query, contextIdentifier);
                        return [4 /*yield*/, searchResponse.mentions];
                    case 3:
                        results = _a.sent();
                        _a.label = 4;
                    case 4:
                        this.notify(searchTime, results, query);
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        this.notifyError(error_1, query);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    MentionResource.prototype.recordMentionSelection = function (mention, contextIdentifier) {
        return this.recordSelection(mention, contextIdentifier).then(function () { }, function (error) { return debug("error recording mention selection: " + error, error); });
    };
    MentionResource.prototype.isFiltering = function (query) {
        return this.activeSearches.has(query);
    };
    MentionResource.prototype.resolveMentionName = function (id) {
        if (!this.config.mentionNameResolver) {
            return {
                id: id,
                name: '',
                status: MentionNameStatus.UNKNOWN,
            };
        }
        return this.config.mentionNameResolver.lookupName(id);
    };
    MentionResource.prototype.cacheMentionName = function (id, mentionName) {
        if (!this.config.mentionNameResolver) {
            return;
        }
        this.config.mentionNameResolver.cacheName(id, mentionName);
    };
    MentionResource.prototype.supportsMentionNameResolving = function () {
        return !!this.config.mentionNameResolver;
    };
    MentionResource.prototype.updateActiveSearches = function (query) {
        this.activeSearches.add(query);
    };
    MentionResource.prototype.verifyMentionConfig = function (config) {
        if (!config.url) {
            throw new Error('config.url is a required parameter');
        }
        if (!config.securityProvider) {
            config.securityProvider = emptySecurityProvider;
        }
    };
    MentionResource.prototype.initialState = function (contextIdentifier) {
        return this.remoteInitialState(contextIdentifier);
    };
    /**
     * Clear a context object to generate query params by removing empty
     * strings, `undefined` and empty values.
     *
     * @param contextIdentifier the current context identifier
     * @returns a safe context for query encoding
     */
    MentionResource.prototype.clearContext = function (contextIdentifier) {
        if (contextIdentifier === void 0) { contextIdentifier = {}; }
        return Object.keys(contextIdentifier)
            .filter(function (key) { return contextIdentifier[key]; })
            .reduce(function (context, key) {
            var _a;
            return (__assign((_a = {}, _a[key] = contextIdentifier[key], _a), context));
        }, {});
    };
    MentionResource.prototype.getQueryParams = function (contextIdentifier) {
        var configParams = {};
        if (this.config.containerId) {
            configParams['containerId'] = this.config.containerId;
        }
        if (this.config.productId) {
            configParams['productIdentifier'] = this.config.productId;
        }
        // if contextParams exist then it will override configParams for containerId
        return __assign(__assign({}, configParams), this.clearContext(contextIdentifier));
    };
    /**
     * Returns the initial mention display list before a search is performed for the specified
     * container.
     *
     * @param contextIdentifier
     * @returns Promise
     */
    MentionResource.prototype.remoteInitialState = function (contextIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParams, options, result, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParams = this.getQueryParams(contextIdentifier);
                        options = {
                            path: 'bootstrap',
                            queryParams: queryParams,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, serviceUtils.requestService(this.config, options)];
                    case 2:
                        result = _a.sent();
                        this._notifyAnalyticsListeners(SLI_EVENT_TYPE, SliNames.INITIAL_STATE, Actions.SUCCEEDED);
                        return [2 /*return*/, this.transformServiceResponse(result, '')];
                    case 3:
                        reason_1 = _a.sent();
                        this._notifyAnalyticsListeners(SLI_EVENT_TYPE, SliNames.INITIAL_STATE, Actions.FAILED);
                        throw reason_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MentionResource.prototype.search = function (query, contextIdentifier) {
        return {
            mentions: this.remoteSearch(query, contextIdentifier),
        };
    };
    MentionResource.prototype.remoteSearch = function (query, contextIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            var options, result, reason_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            path: 'search',
                            queryParams: __assign({ query: query, limit: MAX_QUERY_ITEMS }, this.getQueryParams(contextIdentifier)),
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, serviceUtils.requestService(this.config, options)];
                    case 2:
                        result = _a.sent();
                        this._notifyAnalyticsListeners(SLI_EVENT_TYPE, SliNames.SEARCH, Actions.SUCCEEDED);
                        return [2 /*return*/, this.transformServiceResponse(result, query)];
                    case 3:
                        reason_2 = _a.sent();
                        this._notifyAnalyticsListeners(SLI_EVENT_TYPE, SliNames.SEARCH, Actions.FAILED);
                        throw reason_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MentionResource.prototype.transformServiceResponse = function (result, query) {
        var mentions = result.mentions.map(function (mention) {
            var lozenge;
            if (isAppMention(mention)) {
                lozenge = mention.userType;
            }
            else if (isTeamMention(mention)) {
                lozenge = mention.userType;
            }
            return __assign(__assign({}, mention), { lozenge: lozenge, query: query });
        });
        return __assign(__assign({}, result), { mentions: mentions, query: result.query || query });
    };
    MentionResource.prototype.recordSelection = function (mention, contextIdentifier) {
        var options = {
            path: 'record',
            queryParams: __assign({ selectedUserId: mention.id }, this.getQueryParams(contextIdentifier)),
            requestInit: {
                method: 'POST',
            },
        };
        return serviceUtils.requestService(this.config, options);
    };
    return MentionResource;
}(AbstractMentionResource));
export { MentionResource };
var HttpError = /** @class */ (function () {
    function HttpError(statusCode, statusMessage) {
        this.statusCode = statusCode;
        this.message = statusMessage;
        this.name = 'HttpError';
        this.stack = new Error().stack;
    }
    return HttpError;
}());
export { HttpError };
export var isResolvingMentionProvider = function (p) {
    return !!(p &&
        p.supportsMentionNameResolving &&
        p.supportsMentionNameResolving());
};
export { AbstractResource, AbstractMentionResource };
export default MentionResource;
//# sourceMappingURL=MentionResource.js.map