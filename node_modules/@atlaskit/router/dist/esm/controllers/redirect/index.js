import { __assign, __extends } from "tslib";
import React, { Component } from 'react';
import { createPath } from 'history';
import { RouterSubscriber } from '../subscribers/route';
var Redirector = /** @class */ (function (_super) {
    __extends(Redirector, _super);
    function Redirector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Redirector.prototype.componentDidMount = function () {
        var _a = this.props, to = _a.to, location = _a.location, push = _a.push, actions = _a.actions;
        var newPath = typeof to === 'object' ? createPath(to) : to;
        var currentPath = createPath(location);
        var action = push ? actions.push : actions.replace;
        if (currentPath === newPath) {
            if (process.env.NODE_ENV === 'test' ||
                process.env.NODE_ENV === 'development') {
                // eslint-disable-next-line no-console
                console.warn("You tried to redirect to the same route you're currently on: \"" + currentPath + "\"");
            }
            return;
        }
        action(newPath);
    };
    Redirector.prototype.render = function () {
        return null;
    };
    Redirector.defaultProps = {
        push: false,
    };
    return Redirector;
}(Component));
export var Redirect = function (props) { return (React.createElement(RouterSubscriber, null, function (_a, actions) {
    var location = _a.location;
    return React.createElement(Redirector, __assign({ actions: actions, location: location }, props));
})); };
//# sourceMappingURL=index.js.map