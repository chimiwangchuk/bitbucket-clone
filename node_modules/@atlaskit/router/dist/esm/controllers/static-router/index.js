import { __assign, __awaiter, __generator, __rest } from "tslib";
import React from 'react';
import { createLocation, createMemoryHistory } from 'history';
import { MemoryRouter } from '../memory-router';
import { getResourceStore } from '../resource-store';
import { getRouterStore } from '../router-store';
/**
 * Ensures the router store will not respond to history changes.
 *
 */
export var StaticRouter = function (_a) {
    var location = _a.location, routes = _a.routes, children = _a.children;
    return (React.createElement(MemoryRouter, { location: location, routes: routes, isStatic: true }, children));
};
/**
 * The entry point for requesting resource data on the server.
 * Pass the result data into the router as a prop in order to hydrate it.
 * TODO: return type (see imports)
 */
StaticRouter.requestResources = function (props) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, bootstrapStore, requestRouteResources, location, bootstrapProps, initialEntries, overrides;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = getRouterStore().actions, bootstrapStore = _a.bootstrapStore, requestRouteResources = _a.requestRouteResources;
                location = props.location, bootstrapProps = __rest(props, ["location"]);
                initialEntries = [location];
                overrides = {
                    history: createMemoryHistory({ initialEntries: initialEntries }),
                    location: createLocation(location),
                    isStatic: true,
                };
                bootstrapStore(__assign(__assign({}, bootstrapProps), overrides));
                return [4 /*yield*/, requestRouteResources()];
            case 1:
                _b.sent();
                return [2 /*return*/, getResourceStore().actions.getSafeData()];
        }
    });
}); };
StaticRouter.addResourcesListener = function (fn) {
    return getResourceStore().storeState.subscribe(fn);
};
//# sourceMappingURL=index.js.map