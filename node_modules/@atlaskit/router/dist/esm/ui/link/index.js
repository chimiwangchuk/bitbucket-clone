import { __assign, __rest } from "tslib";
import React, { createElement, forwardRef } from 'react';
import { createPath } from 'history';
import { RouterActions } from '../../controllers';
import { getValidLinkType, handleNavigation } from './utils';
var Link = forwardRef(function (_a, ref) {
    var children = _a.children, _b = _a.target, target = _b === void 0 ? '_self' : _b, _c = _a.replace, replace = _c === void 0 ? false : _c, _d = _a.href, href = _d === void 0 ? '' : _d, _e = _a.to, to = _e === void 0 ? '' : _e, _f = _a.onClick, onClick = _f === void 0 ? undefined : _f, _g = _a.type, linkType = _g === void 0 ? 'a' : _g, rest = __rest(_a, ["children", "target", "replace", "href", "to", "onClick", "type"]);
    return (React.createElement(RouterActions, null, function (_a) {
        var push = _a.push, replaceAction = _a.replace;
        var validLinkType = getValidLinkType(linkType);
        var linkTargetProp = href || to || '';
        var linkDestination = typeof linkTargetProp === 'object'
            ? createPath(linkTargetProp)
            : linkTargetProp;
        var routerActions = { push: push, replace: replaceAction };
        var handleLinkPress = function (e) {
            return handleNavigation(e, {
                onClick: onClick,
                target: target,
                replace: replace,
                routerActions: routerActions,
                href: linkDestination,
            });
        };
        return createElement(validLinkType, __assign(__assign({}, rest), { href: linkDestination, target: target, onClick: handleLinkPress, onKeyDown: handleLinkPress, ref: ref }), children);
    }));
});
Link.displayName = 'Link';
export default Link;
//# sourceMappingURL=index.js.map