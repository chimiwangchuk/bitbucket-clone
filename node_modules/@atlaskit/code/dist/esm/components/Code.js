import { __assign, __extends, __read } from "tslib";
import React, { PureComponent } from 'react';
import { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import { normalizeLanguage } from '../supportedLanguages';
import { applyTheme } from '../themes/themeBuilder';
var Code = /** @class */ (function (_super) {
    __extends(Code, _super);
    function Code() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Code.prototype.getLineOpacity = function (lineNumber) {
        if (!this.props.highlight) {
            return 1;
        }
        var highlight = this.props.highlight
            .split(',')
            .map(function (num) {
            if (num.indexOf('-') > 0) {
                // We found a line group, e.g. 1-3
                var _a = __read(num
                    .split('-')
                    .map(Number)
                    .sort(), 2), from = _a[0], to = _a[1];
                return Array(to + 1)
                    .fill(undefined)
                    .map(function (_, index) { return index; })
                    .slice(from, to + 1);
            }
            return Number(num);
        })
            .reduce(function (acc, val) { return acc.concat(val); }, []);
        if (highlight.length === 0) {
            return 1;
        }
        if (highlight.includes(lineNumber)) {
            return 1;
        }
        return 0.3;
    };
    Code.prototype.render = function () {
        var _this = this;
        var inlineCodeStyle = applyTheme(this.props.theme).inlineCodeStyle;
        var language = normalizeLanguage(this.props.language);
        var props = {
            language: language,
            PreTag: this.props.preTag,
            style: this.props.codeStyle || inlineCodeStyle,
            showLineNumbers: this.props.showLineNumbers,
            lineNumberContainerStyle: this.props.lineNumberContainerStyle,
            codeTagProps: this.props.codeTagProps,
        };
        return (React.createElement(SyntaxHighlighter, __assign({}, props, { 
            // Wrap lines is needed to set styles on the line.
            // We use this to set opacity if highlight specific lines.
            wrapLines: this.props.highlight.length > 0, lineNumberStyle: function (lineNumber) { return ({
                opacity: _this.getLineOpacity(lineNumber),
            }); }, 
            // Types are incorrect.
            // @ts-ignore
            lineProps: function (lineNumber) { return ({
                style: {
                    opacity: _this.getLineOpacity(lineNumber),
                },
            }); } }), this.props.text));
    };
    Code.defaultProps = {
        theme: {},
        showLineNumbers: false,
        lineNumberContainerStyle: {},
        codeTagProps: {},
        preTag: 'span',
        highlight: '',
    };
    return Code;
}(PureComponent));
export default Code;
//# sourceMappingURL=Code.js.map