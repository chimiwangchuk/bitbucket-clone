import { __assign } from "tslib";
import React from 'react';
import { useContext, useMemo } from 'react';
import { createStore } from 'redux';
import { cardReducer } from '../reducers';
import { SmartCardContext } from '.';
import { MAX_RELOAD_DELAY, MAX_LOADING_DELAY } from '../actions/constants';
import CardClient from '../../client';
export function SmartCardProvider(_a) {
    var storeOptions = _a.storeOptions, customClient = _a.client, customCacheOptions = _a.cacheOptions, customAuthFlow = _a.authFlow, children = _a.children;
    var parentContext = useContext(SmartCardContext);
    var providerValue = useMemo(function () {
        var initialState = (storeOptions || { initialState: {} }).initialState;
        var client = customClient || new CardClient();
        var store = createStore(cardReducer, initialState);
        var authFlow = customAuthFlow || 'oauth2';
        var cacheOptions = customCacheOptions || {
            maxAge: MAX_RELOAD_DELAY,
            maxLoadingDelay: MAX_LOADING_DELAY,
        };
        return {
            store: store,
            connections: {
                client: client,
            },
            config: __assign(__assign({}, cacheOptions), { authFlow: authFlow }),
        };
    }, [customClient, customCacheOptions, customAuthFlow, storeOptions]);
    return (React.createElement(SmartCardContext.Provider, { value: parentContext || providerValue }, children));
}
export default SmartCardProvider;
//# sourceMappingURL=provider.js.map