import { __extends } from "tslib";
import React, { Fragment, PureComponent } from 'react';
import Button from '@atlaskit/button';
import MenuIcon from '@atlaskit/icon/glyph/menu';
import * as styles from '../styled';
var MobileHeader = /** @class */ (function (_super) {
    __extends(MobileHeader, _super);
    function MobileHeader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isAnimatingNavigation: false,
            isAnimatingSidebar: false,
        };
        _this.handleNavSlideFinish = function () {
            _this.setState({ isAnimatingNavigation: false });
        };
        _this.handleSidebarSlideFinish = function () {
            _this.setState({ isAnimatingSidebar: false });
        };
        _this.renderSlider = function (isOpen, isAnimating, onTransitionEnd, side, renderFn, topOffset) { return (React.createElement(styles.MobileNavSlider, { isOpen: isOpen, onTransitionEnd: onTransitionEnd, side: side, topOffset: topOffset }, (isOpen || isAnimating) && renderFn && renderFn(isOpen))); };
        return _this;
    }
    MobileHeader.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (nextProps.drawerState === 'none') {
            if (this.props.drawerState === 'navigation') {
                this.setState({ isAnimatingNavigation: true });
            }
            else if (this.props.drawerState === 'sidebar') {
                this.setState({ isAnimatingSidebar: true });
            }
        }
    };
    MobileHeader.prototype.render = function () {
        var _a = this.state, isAnimatingNavigation = _a.isAnimatingNavigation, isAnimatingSidebar = _a.isAnimatingSidebar;
        var _b = this.props, drawerState = _b.drawerState, menuIconLabel = _b.menuIconLabel, customMenu = _b.customMenu, topOffset = _b.topOffset;
        var isNavigationOpen = drawerState === 'navigation';
        var isSidebarOpen = drawerState === 'sidebar';
        var menu = customMenu || (React.createElement(Button, { appearance: "subtle", iconBefore: React.createElement(MenuIcon, { label: menuIconLabel, size: "large" }), onClick: this.props.onNavigationOpen }));
        return (React.createElement(Fragment, null,
            React.createElement(styles.MobilePageHeader, null,
                React.createElement(styles.MobilePageHeaderContent, { topOffset: topOffset },
                    menu,
                    React.createElement(styles.PageHeading, null, this.props.pageHeading),
                    this.props.secondaryContent)),
            this.renderSlider(isNavigationOpen, isAnimatingNavigation, this.handleNavSlideFinish, 'left', this.props.navigation, topOffset),
            this.renderSlider(isSidebarOpen, isAnimatingSidebar, this.handleSidebarSlideFinish, 'right', this.props.sidebar, topOffset),
            (isNavigationOpen ||
                isSidebarOpen ||
                isAnimatingNavigation ||
                isAnimatingSidebar) && (React.createElement(styles.FakeBlanket, { isOpen: isNavigationOpen || isSidebarOpen, onClick: this.props.onDrawerClose }))));
    };
    MobileHeader.defaultProps = {
        topOffset: 0,
        pageHeading: '',
        menuIconLabel: 'Menu',
        drawerState: '',
    };
    return MobileHeader;
}(PureComponent));
export default MobileHeader;
//# sourceMappingURL=MobileHeader.js.map