import { __assign } from "tslib";
import { Plugin, PluginKey } from 'prosemirror-state';
export var pluginKey = new PluginKey('contextPanelPluginKey');
export function getPluginState(state) {
    return pluginKey.getState(state);
}
function contextPanelPluginFactory(contextPanels, dispatch) {
    return new Plugin({
        key: pluginKey,
        state: {
            init: function (_config, state) {
                return {
                    visible: false,
                    handlers: contextPanels,
                    contents: contextPanels.map(function (panelContent) { return panelContent(state); }),
                };
            },
            apply: function (tr, pluginState, _oldState, newState) {
                var newPluginState = pluginState;
                var meta = tr.getMeta(pluginKey);
                var visible = meta && typeof meta.visible !== undefined
                    ? meta.visible
                    : pluginState.visible;
                if (visible !== pluginState.visible) {
                    newPluginState = __assign(__assign({}, newPluginState), { visible: visible });
                }
                if (tr.docChanged || tr.selectionSet || (meta && meta.changed)) {
                    newPluginState = __assign(__assign({}, newPluginState), { contents: pluginState.handlers.map(function (panelContent) {
                            return panelContent(newState);
                        }) });
                }
                if (newPluginState !== pluginState) {
                    dispatch(pluginKey, newPluginState);
                }
                return newPluginState;
            },
        },
    });
}
var contextPanelPlugin = function () { return ({
    name: 'contextPanel',
    pmPlugins: function (contextPanels) {
        if (contextPanels === void 0) { contextPanels = []; }
        return [
            {
                name: 'contextPanel',
                plugin: function (_a) {
                    var dispatch = _a.dispatch;
                    return contextPanelPluginFactory(contextPanels.filter(Boolean), dispatch);
                },
            },
        ];
    },
}); };
export default contextPanelPlugin;
//# sourceMappingURL=index.js.map