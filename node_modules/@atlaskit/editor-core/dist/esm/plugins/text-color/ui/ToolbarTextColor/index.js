import { __assign, __extends } from "tslib";
import React from 'react';
import { defineMessages, injectIntl } from 'react-intl';
import ExpandIcon from '@atlaskit/icon/glyph/chevron-down';
import { akEditorMenuZIndex } from '@atlaskit/editor-common';
import Button from '@atlaskit/button';
import EditorBackgroundColorIcon from '@atlaskit/icon/glyph/editor/background-color';
import { ACTION_SUBJECT, ACTION, EVENT_TYPE, ACTION_SUBJECT_ID, } from '../../../analytics';
import { withAnalytics } from '../../../../analytics';
import ToolbarButton from '../../../../ui/ToolbarButton';
import ColorPalette from '../../../../ui/ColorPalette';
import Dropdown from '../../../../ui/Dropdown';
import * as commands from '../../commands/change-color';
import { EditorTextColorIcon } from './icon';
import { TextColorIconWrapper, TextColorIconBar, ShowMoreWrapper, rainbow, disabledRainbow, } from './styles';
import { Separator, TriggerWrapper, MenuWrapper, ExpandIconWrapper, } from '../../../../ui/styles';
import { textColorPalette as originalTextColors } from '../../../../ui/ColorPalette/Palettes/textColorPalette';
var EXPERIMENT_NAME = 'editor.toolbarTextColor.moreColors';
var EXPERIMENT_GROUP_CONTROL = 'control';
var EXPERIMENT_GROUP_SUBJECT = 'subject';
export var messages = defineMessages({
    textColor: {
        id: 'fabric.editor.textColor',
        defaultMessage: 'Text color',
        description: '',
    },
    moreColors: {
        id: 'fabric.editor.textColor.moreColors',
        defaultMessage: 'More colors',
        description: 'More colors',
    },
    lessColors: {
        id: 'fabric.editor.textColor.lessColors',
        defaultMessage: 'Less colors',
        description: 'Less colors',
    },
});
var ToolbarTextColor = /** @class */ (function (_super) {
    __extends(ToolbarTextColor, _super);
    function ToolbarTextColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
            isShowingMoreColors: false,
        };
        _this.changeColor = function (color) {
            return commands.changeColor(color)(_this.props.editorView.state, _this.props.editorView.dispatch);
        };
        _this.changeTextColor = withAnalytics('atlassian.editor.format.textcolor.button', function (color, disabled) {
            if (!disabled) {
                var _a = _this.props.pluginState, palette = _a.palette, paletteExpanded = _a.paletteExpanded, defaultColor = _a.defaultColor;
                var isShowingMoreColors = _this.state.isShowingMoreColors;
                // we store color names in analytics
                var swatch = (paletteExpanded || palette).find(function (sw) { return sw.value === color; });
                var isNewColor = color !== defaultColor &&
                    !originalTextColors.some(function (col) { return col.value === color; });
                _this.dispatchAnalyticsEvent(_this.buildExperimentalAnalyticsSelectColor({
                    color: (swatch ? swatch.label : color).toLowerCase(),
                    isShowingMoreColors: isShowingMoreColors,
                    isNewColor: isNewColor,
                }));
                _this.handleOpenChange({
                    isOpen: false,
                    logCloseEvent: false,
                });
                return _this.changeColor(color);
            }
            return false;
        });
        _this.toggleOpen = function () {
            _this.handleOpenChange({ isOpen: !_this.state.isOpen, logCloseEvent: true });
        };
        _this.handleOpenChange = function (_a) {
            var isOpen = _a.isOpen, logCloseEvent = _a.logCloseEvent;
            var _b = _this.props.pluginState, palette = _b.palette, color = _b.color;
            var isShowingMoreColors = _this.state.isShowingMoreColors;
            // pre-expand if a non-standard colour has been selected
            var isExtendedPaletteSelected = !palette.find(function (swatch) { return swatch.value === color; });
            _this.setState({
                isOpen: isOpen,
                isShowingMoreColors: isExtendedPaletteSelected || isShowingMoreColors,
            });
            if (logCloseEvent) {
                _this.dispatchAnalyticsEvent(_this.buildExperimentalAnalyticsPalette(isOpen ? ACTION.OPENED : ACTION.CLOSED, {
                    isShowingMoreColors: isExtendedPaletteSelected || isShowingMoreColors,
                    noSelect: isOpen === false,
                }));
            }
        };
        _this.hide = function () {
            var _a = _this.state, isOpen = _a.isOpen, isShowingMoreColors = _a.isShowingMoreColors;
            if (isOpen === true) {
                _this.dispatchAnalyticsEvent(_this.buildExperimentalAnalyticsPalette(ACTION.CLOSED, {
                    isShowingMoreColors: isShowingMoreColors,
                    noSelect: true,
                }));
                _this.setState({ isOpen: false });
            }
        };
        _this.handleShowMoreToggle = function () {
            _this.setState(function (state) {
                _this.dispatchAnalyticsEvent(_this.buildExperimentalAnalyticsShowMore(state.isShowingMoreColors ? ACTION.CLOSED : ACTION.OPENED, {
                    showMoreButton: !state.isShowingMoreColors,
                    showLessButton: state.isShowingMoreColors,
                }));
                return {
                    isShowingMoreColors: !state.isShowingMoreColors,
                };
            });
        };
        return _this;
    }
    ToolbarTextColor.prototype.render = function () {
        var _this = this;
        var _a = this.state, isOpen = _a.isOpen, isShowingMoreColors = _a.isShowingMoreColors;
        var _b = this.props, popupsMountPoint = _b.popupsMountPoint, popupsBoundariesElement = _b.popupsBoundariesElement, popupsScrollableElement = _b.popupsScrollableElement, isReducedSpacing = _b.isReducedSpacing, pluginState = _b.pluginState, paletteExpanded = _b.pluginState.paletteExpanded, formatMessage = _b.intl.formatMessage, showMoreColorsToggle = _b.showMoreColorsToggle, disabled = _b.disabled;
        var labelTextColor = formatMessage(messages.textColor);
        var palette = isShowingMoreColors && paletteExpanded
            ? paletteExpanded
            : pluginState.palette;
        return (React.createElement(MenuWrapper, null,
            React.createElement(Dropdown, { mountTo: popupsMountPoint, boundariesElement: popupsBoundariesElement, scrollableElement: popupsScrollableElement, isOpen: isOpen && !pluginState.disabled, handleClickOutside: this.hide, handleEscapeKeydown: this.hide, fitWidth: 242, fitHeight: 80, zIndex: akEditorMenuZIndex, trigger: React.createElement(ToolbarButton, { spacing: isReducedSpacing ? 'none' : 'default', disabled: disabled || pluginState.disabled, selected: isOpen, "aria-label": labelTextColor, title: labelTextColor, onClick: this.toggleOpen, iconBefore: React.createElement(TriggerWrapper, null,
                        React.createElement(TextColorIconWrapper, null,
                            React.createElement(EditorTextColorIcon, null),
                            React.createElement(TextColorIconBar, { selectedColor: pluginState.color !== pluginState.defaultColor &&
                                    pluginState.color, gradientColors: pluginState.disabled ? disabledRainbow : rainbow })),
                        React.createElement(ExpandIconWrapper, null,
                            React.createElement(ExpandIcon, { label: labelTextColor }))) }) },
                React.createElement(ColorPalette, { palette: palette, onClick: function (color) { return _this.changeTextColor(color, pluginState.disabled); }, selectedColor: pluginState.color }),
                showMoreColorsToggle && (React.createElement(ShowMoreWrapper, null,
                    React.createElement(Button, { appearance: "subtle", onClick: this.handleShowMoreToggle, iconBefore: React.createElement(EditorBackgroundColorIcon, { label: "" }) }, formatMessage(isShowingMoreColors
                        ? messages.lessColors
                        : messages.moreColors))))),
            React.createElement(Separator, null)));
    };
    ToolbarTextColor.prototype.getCommonExperimentalAnalyticsAttributes = function () {
        var showMoreColorsToggle = this.props.showMoreColorsToggle;
        return {
            experiment: EXPERIMENT_NAME,
            experimentGroup: showMoreColorsToggle
                ? EXPERIMENT_GROUP_SUBJECT
                : EXPERIMENT_GROUP_CONTROL,
        };
    };
    ToolbarTextColor.prototype.buildExperimentalAnalyticsPalette = function (action, data) {
        return {
            action: action,
            actionSubject: ACTION_SUBJECT.TOOLBAR,
            actionSubjectId: ACTION_SUBJECT_ID.FORMAT_COLOR,
            eventType: EVENT_TYPE.TRACK,
            attributes: __assign(__assign({}, this.getCommonExperimentalAnalyticsAttributes()), data),
        };
    };
    ToolbarTextColor.prototype.buildExperimentalAnalyticsShowMore = function (action, data) {
        return {
            action: action,
            actionSubject: ACTION_SUBJECT.TOOLBAR,
            actionSubjectId: ACTION_SUBJECT_ID.FORMAT_COLOR,
            eventType: EVENT_TYPE.TRACK,
            attributes: __assign(__assign({}, this.getCommonExperimentalAnalyticsAttributes()), data),
        };
    };
    ToolbarTextColor.prototype.buildExperimentalAnalyticsSelectColor = function (data) {
        return {
            action: ACTION.FORMATTED,
            actionSubject: ACTION_SUBJECT.TEXT,
            actionSubjectId: ACTION_SUBJECT_ID.FORMAT_COLOR,
            eventType: EVENT_TYPE.TRACK,
            attributes: __assign(__assign({}, this.getCommonExperimentalAnalyticsAttributes()), data),
        };
    };
    ToolbarTextColor.prototype.dispatchAnalyticsEvent = function (payload) {
        var dispatchAnalyticsEvent = this.props.dispatchAnalyticsEvent;
        if (dispatchAnalyticsEvent) {
            dispatchAnalyticsEvent(payload);
        }
    };
    return ToolbarTextColor;
}(React.Component));
export default injectIntl(ToolbarTextColor);
//# sourceMappingURL=index.js.map