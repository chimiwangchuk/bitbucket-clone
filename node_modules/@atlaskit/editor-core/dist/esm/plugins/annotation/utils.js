import { sum } from '../../utils';
/**
 * Finds the marks in the nodes to the left and right.
 * @param $pos Position to center search around
 */
export var surroundingMarks = function ($pos) {
    var nodeBefore = $pos.nodeBefore, nodeAfter = $pos.nodeAfter;
    var markNodeBefore = nodeBefore && $pos.doc.nodeAt($pos.pos - nodeBefore.nodeSize - 1);
    var markNodeAfter = nodeAfter && $pos.doc.nodeAt($pos.pos + nodeAfter.nodeSize);
    return [
        (markNodeBefore && markNodeBefore.marks) || [],
        (markNodeAfter && markNodeAfter.marks) || [],
    ];
};
/**
 * Finds annotation marks, and returns their IDs.
 * @param marks Array of marks to search in
 */
export var filterAnnotationIds = function (marks) {
    if (!marks.length) {
        return [];
    }
    var annotation = marks[0].type.schema.marks.annotation;
    return marks
        .filter(function (mark) { return mark.type === annotation; })
        .map(function (mark) { return mark.attrs.id; });
};
/**
 * Re-orders the annotation array based on the order in the document.
 *
 * This places the marks that do not appear in the surrounding nodes
 * higher in the list. That is, the inner-most one appears first.
 *
 * Undo, for example, can re-order annotation marks in the document.
 * @param annotations annotation metadata
 * @param $from location to look around (usually the selection)
 */
export var reorderAnnotations = function (annotations, $from) {
    var idSet = surroundingMarks($from).map(filterAnnotationIds);
    annotations.sort(function (a, b) {
        return sum(idSet, function (ids) { return ids.indexOf(a.id); }) -
            sum(idSet, function (ids) { return ids.indexOf(b.id); });
    });
};
export var getAllAnnotations = function (doc) {
    var allAnnotationIds = new Set();
    doc.nodesBetween(0, doc.content.size, function (node) {
        return node.marks
            .filter(function (mark) { return mark.type.name === 'annotation'; })
            .forEach(function (m) { return allAnnotationIds.add(m.attrs.id); });
    });
    return Array.from(allAnnotationIds);
};
//# sourceMappingURL=utils.js.map