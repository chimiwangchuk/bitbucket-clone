import { Plugin, PluginKey } from 'prosemirror-state';
import { findDomRefAtPos } from 'prosemirror-utils';
import { pluginFactory } from '../../../utils/plugin-state-factory';
import ExpandNodeView from '../nodeviews';
import { setExpandRef } from '../commands';
import reducer from '../reducer';
import { findExpand } from '../utils';
import { expandClassNames } from '../ui/class-names';
export var pluginKey = new PluginKey('expandPlugin');
function containsClass(element, className) {
    return !!element && element.classList.contains(className);
}
var _a = pluginFactory(pluginKey, reducer), createPluginState = _a.createPluginState, createCommand = _a.createCommand, getPluginState = _a.getPluginState;
export var createPlugin = function (dispatch, reactContext) {
    var state = createPluginState(dispatch, {});
    return new Plugin({
        state: state,
        key: pluginKey,
        props: {
            nodeViews: {
                expand: ExpandNodeView(reactContext),
                nestedExpand: ExpandNodeView(reactContext),
            },
            handleKeyDown: function (_view, event) {
                return containsClass(event.target, expandClassNames.titleContainer);
            },
            handleKeyPress: function (_view, event) {
                return containsClass(event.target, expandClassNames.titleContainer);
            },
            handleScrollToSelection: function () {
                return containsClass(document.activeElement, expandClassNames.titleInput);
            },
        },
        // @see ED-8027 to follow up on this work-around
        filterTransaction: function (tr) {
            if (containsClass(document.activeElement, expandClassNames.titleInput) &&
                tr.selectionSet &&
                (!tr.steps.length || tr.isGeneric)) {
                return false;
            }
            return true;
        },
        view: function (editorView) {
            var domAtPos = editorView.domAtPos.bind(editorView);
            return {
                update: function (view) {
                    var state = view.state, dispatch = view.dispatch;
                    var node = findExpand(state);
                    if (node) {
                        var expandRef = findDomRefAtPos(node.pos, domAtPos);
                        if (getPluginState(state).expandRef !== expandRef) {
                            setExpandRef(expandRef)(state, dispatch);
                        }
                    }
                },
            };
        },
    });
};
export { createCommand, getPluginState };
//# sourceMappingURL=main.js.map