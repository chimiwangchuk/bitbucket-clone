import { __assign, __extends, __rest } from "tslib";
import React, { useCallback } from 'react';
import Button from '@atlaskit/button';
import { akEditorSwoopCubicBezier, expandMessages, ExpandLayoutWrapper, } from '@atlaskit/editor-common';
import ChevronRightIcon from '@atlaskit/icon/glyph/chevron-right';
import { colors } from '@atlaskit/theme';
import Tooltip from '@atlaskit/tooltip';
import { expandClassNames } from './class-names';
var withTooltip = function (WrapperComponent) {
    return /** @class */ (function (_super) {
        __extends(WithSortableColumn, _super);
        function WithSortableColumn(props) {
            return _super.call(this, props) || this;
        }
        WithSortableColumn.prototype.render = function () {
            var label = this.props.label;
            return (React.createElement(Tooltip, { content: label, position: "top", tag: ExpandLayoutWrapper },
                React.createElement(WrapperComponent, __assign({}, this.props))));
        };
        return WithSortableColumn;
    }(React.Component));
};
var CustomButton = function (props) {
    var label = props.label, allowInteractiveExpand = props.allowInteractiveExpand;
    var useTheme = useCallback(function (currentTheme, themeProps) {
        var _a = currentTheme(themeProps), buttonStyles = _a.buttonStyles, rest = __rest(_a, ["buttonStyles"]);
        return __assign({ buttonStyles: __assign(__assign({}, buttonStyles), { height: '100%', '& svg': {
                    transform: props.expanded
                        ? 'transform: rotate(90deg);'
                        : 'tranform: rotate(0deg);',
                    transition: "transform 0.2s " + akEditorSwoopCubicBezier + ";",
                } }) }, rest);
    }, [props]);
    return (React.createElement(Button, { appearance: "subtle", className: expandClassNames.iconContainer, iconBefore: React.createElement(ChevronRightIcon, { label: label, primaryColor: colors.N80A }), shouldFitContainer: true, theme: useTheme, isDisabled: !allowInteractiveExpand }));
};
var ButtonWithTooltip = withTooltip(CustomButton);
var ButtonWithoutTooltip = CustomButton;
export var ExpandIconButton = function (props) {
    var expanded = props.expanded, intl = props.intl;
    var message = expanded
        ? expandMessages.collapseNode
        : expandMessages.expandNode;
    var label = (intl && intl.formatMessage(message)) || message.defaultMessage;
    if (props.allowInteractiveExpand) {
        return React.createElement(ButtonWithTooltip, __assign({ label: label }, props));
    }
    return (React.createElement(ExpandLayoutWrapper, null,
        React.createElement(ButtonWithoutTooltip, __assign({ label: label }, props))));
};
//# sourceMappingURL=ExpandIconButton.js.map