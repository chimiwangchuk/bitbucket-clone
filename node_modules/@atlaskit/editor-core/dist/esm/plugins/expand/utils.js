import { findSelectedNodeOfType, findParentNodeOfType, } from 'prosemirror-utils';
import { Slice, Fragment } from 'prosemirror-model';
import { mapChildren } from '../../utils/slice';
export var findExpand = function (state, selection) {
    var _a = state.schema.nodes, expand = _a.expand, nestedExpand = _a.nestedExpand;
    return (findSelectedNodeOfType([expand, nestedExpand])(selection || state.selection) ||
        findParentNodeOfType([expand, nestedExpand])(selection || state.selection));
};
export var transformSliceNestedExpandToExpand = function (slice, schema) {
    var _a = schema.nodes, expand = _a.expand, nestedExpand = _a.nestedExpand;
    var children = [];
    mapChildren(slice.content, function (node) {
        if (node.type === nestedExpand) {
            children.push(expand.createChecked(node.attrs, node.content, node.marks));
        }
        else {
            children.push(node);
        }
    });
    return new Slice(Fragment.fromArray(children), slice.openStart, slice.openEnd);
};
//# sourceMappingURL=utils.js.map