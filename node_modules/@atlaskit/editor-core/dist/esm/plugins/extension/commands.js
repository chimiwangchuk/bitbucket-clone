import { __assign } from "tslib";
import { removeSelectedNode, removeParentNodeOfType } from 'prosemirror-utils';
import { applyChange } from '../context-panel/transforms';
import { createCommand } from './plugin-factory';
import { getSelectedExtension } from './utils';
export var updateState = function (state) {
    return createCommand({
        type: 'UPDATE_STATE',
        data: state,
    });
};
export var showContextPanel = createCommand({
    type: 'UPDATE_STATE',
    data: { showContextPanel: true },
}, applyChange);
export var updateExtensionLayout = function (layout) {
    return createCommand({ type: 'UPDATE_STATE', data: { layout: layout } }, function (tr, state) {
        var selectedExtension = getSelectedExtension(state, true);
        if (selectedExtension) {
            return tr.setNodeMarkup(selectedExtension.pos, undefined, __assign(__assign({}, selectedExtension.node.attrs), { layout: layout }));
        }
        return tr;
    });
};
export var removeExtension = function () {
    return createCommand({
        type: 'UPDATE_STATE',
        data: { element: undefined, nodeWithPos: undefined },
    }, function (tr, state) {
        if (getSelectedExtension(state)) {
            return removeSelectedNode(tr);
        }
        else {
            return removeParentNodeOfType(state.schema.nodes.bodiedExtension)(tr);
        }
    });
};
//# sourceMappingURL=commands.js.map