import { findParentNodeOfType, findSelectedNodeOfType, findDomRefAtPos, } from 'prosemirror-utils';
import { closestElement } from '../../utils';
export var getSelectedExtension = function (state, searchParent) {
    if (searchParent === void 0) { searchParent = false; }
    var _a = state.schema.nodes, inlineExtension = _a.inlineExtension, extension = _a.extension, bodiedExtension = _a.bodiedExtension;
    var nodeTypes = [extension, bodiedExtension, inlineExtension];
    return (findSelectedNodeOfType(nodeTypes)(state.selection) ||
        (searchParent && findParentNodeOfType(nodeTypes)(state.selection)) ||
        undefined);
};
export var getSelectedNonContentExtension = function (_a) {
    var schema = _a.schema, selection = _a.selection;
    var _b = schema.nodes, inlineExtension = _b.inlineExtension, extension = _b.extension;
    return findSelectedNodeOfType([inlineExtension, extension])(selection);
};
export var getSelectedDomElement = function (domAtPos, selectedExtensionNode, isContentExtension) {
    if (isContentExtension === void 0) { isContentExtension = false; }
    var selectedExtensionDomNode = selectedExtensionNode &&
        findDomRefAtPos(selectedExtensionNode.pos, domAtPos);
    // Non-content extension can be nested in bodied-extension, the following check is necessary for that case
    return selectedExtensionNode && selectedExtensionDomNode.querySelector
        ? isContentExtension
            ? selectedExtensionDomNode.querySelector('.extension-container') || selectedExtensionDomNode
            : closestElement(selectedExtensionDomNode, '.extension-container') ||
                selectedExtensionDomNode.querySelector('.extension-container') ||
                selectedExtensionDomNode
        : undefined;
};
//# sourceMappingURL=utils.js.map