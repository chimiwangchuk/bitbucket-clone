import { Plugin } from 'prosemirror-state';
import { getExtensionModuleNode, } from '@atlaskit/editor-common';
import ExtensionNodeView from './nodeviews/extension';
import { updateState } from './commands';
import { getSelectedExtension, getSelectedDomElement, getSelectedNonContentExtension, } from './utils';
import { createPluginState, getPluginState, createCommand, } from './plugin-factory';
import { pluginKey } from './plugin-key';
var updateEditButton = function (view, extensionProvider) {
    var nodeWithPos = getSelectedExtension(view.state, true);
    if (nodeWithPos) {
        var _a = nodeWithPos.node.attrs, extensionType_1 = _a.extensionType, extensionKey_1 = _a.extensionKey;
        getExtensionModuleNode(extensionProvider, extensionType_1, extensionKey_1)
            .then(function (extensionModuleNode) {
            var newNodeWithPos = getSelectedExtension(view.state, true);
            if (newNodeWithPos &&
                newNodeWithPos.node.attrs.extensionType === extensionType_1 &&
                newNodeWithPos.node.attrs.extensionKey === extensionKey_1 &&
                newNodeWithPos.pos === nodeWithPos.pos &&
                extensionModuleNode.update) {
                updateState({
                    showEditButton: true,
                    updateExtension: extensionModuleNode.update,
                })(view.state, view.dispatch);
            }
        })
            .catch(function () {
            updateState({
                showEditButton: true,
            })(view.state, view.dispatch);
        });
    }
};
var createPlugin = function (dispatch, providerFactory, extensionHandlers, portalProviderAPI) {
    var state = createPluginState(dispatch, {
        layout: 'default',
        showEditButton: false,
        showContextPanel: false,
    });
    return new Plugin({
        state: state,
        view: function (editorView) {
            var domAtPos = editorView.domAtPos.bind(editorView);
            var providerHandler = function (name, provider) {
                if (name === 'extensionProvider' && provider) {
                    provider
                        .then(function (extensionProvider) {
                        updateState({ extensionProvider: extensionProvider })(editorView.state, editorView.dispatch);
                        updateEditButton(editorView, extensionProvider);
                    })
                        .catch(function () {
                        return updateState({ extensionProvider: undefined })(editorView.state, editorView.dispatch);
                    });
                }
            };
            providerFactory.subscribe('extensionProvider', providerHandler);
            return {
                update: function (view) {
                    var state = view.state, dispatch = view.dispatch;
                    var _a = getPluginState(state), element = _a.element, extensionProvider = _a.extensionProvider;
                    // This fetches the selected extension node, either by keyboard selection or click for all types of extensions
                    var selectedExtension = getSelectedExtension(state, true);
                    if (!selectedExtension && !element) {
                        return;
                    }
                    var isContentExtension = !!getSelectedNonContentExtension(state);
                    var newElement = getSelectedDomElement(domAtPos, selectedExtension, isContentExtension);
                    if (element !== newElement) {
                        var showEditButton = false;
                        var updateExtension = void 0;
                        if (selectedExtension) {
                            var extensionType = selectedExtension.node.attrs.extensionType;
                            var extensionHandler = extensionHandlers[extensionType];
                            if (extensionHandler && typeof extensionHandler === 'object') {
                                // Old API with the `update` function
                                showEditButton = !!extensionHandler.update;
                                updateExtension = extensionHandler.update;
                            }
                            else if (extensionProvider) {
                                // New API with or without the `update` function, we don't know at this point
                                updateEditButton(view, extensionProvider);
                            }
                            else {
                                // Old API without the `update` function
                                showEditButton = true;
                            }
                        }
                        var layout = selectedExtension
                            ? selectedExtension.node.attrs.layout
                            : 'default';
                        updateState({
                            nodeWithPos: selectedExtension,
                            showContextPanel: false,
                            element: newElement,
                            showEditButton: showEditButton,
                            updateExtension: updateExtension,
                            layout: layout,
                        })(state, dispatch);
                    }
                    return true;
                },
                destroy: function () {
                    providerFactory.unsubscribe('extensionProvider', providerHandler);
                },
            };
        },
        key: pluginKey,
        props: {
            nodeViews: {
                extension: ExtensionNodeView(portalProviderAPI, providerFactory, extensionHandlers),
                bodiedExtension: ExtensionNodeView(portalProviderAPI, providerFactory, extensionHandlers),
                inlineExtension: ExtensionNodeView(portalProviderAPI, providerFactory, extensionHandlers),
            },
        },
    });
};
export { pluginKey, createPlugin, createCommand, getPluginState };
//# sourceMappingURL=plugin.js.map