import { __assign } from "tslib";
import React from 'react';
import { openMediaAltTextMenu } from '../pm-plugins/alt-text/commands';
import { renderTooltipContent, addAltText } from '../../../keymaps';
import { messages } from '../pm-plugins/alt-text/messages';
import AltTextEdit from '../pm-plugins/alt-text/ui/AltTextEdit';
import { CONTAINER_WIDTH_IN_PX } from '../pm-plugins/alt-text/ui/AltTextEdit';
import { getMediaNodeFromSelection } from '../utils/media-common';
import { ClassNames } from '../pm-plugins/alt-text/style';
export var altTextButton = function (intl, state) {
    var mediaNode = getMediaNodeFromSelection(state);
    var message = mediaNode && mediaNode.attrs.alt ? messages.editAltText : messages.altText;
    var title = intl.formatMessage(message);
    return {
        title: title,
        type: 'button',
        onClick: openMediaAltTextMenu,
        showTitle: true,
        testId: 'alt-text-edit-button',
        tooltipContent: renderTooltipContent(title, addAltText),
    };
};
export var altTextEditComponent = function (options) {
    return {
        type: 'custom',
        render: function (view, idx) {
            if (!view) {
                return null;
            }
            var mediaNode = getMediaNodeFromSelection(view.state);
            if (!mediaNode) {
                return null;
            }
            return (React.createElement(AltTextEdit, { view: view, key: idx, value: mediaNode.attrs.alt, altTextValidator: options && options.altTextValidator }));
        },
    };
};
export var getAltTextToolbar = function (toolbarBaseConfig, options) {
    return __assign(__assign({}, toolbarBaseConfig), { width: CONTAINER_WIDTH_IN_PX, className: ClassNames.FLOATING_TOOLBAR_COMPONENT, items: [altTextEditComponent(options)] });
};
//# sourceMappingURL=alt-text.js.map