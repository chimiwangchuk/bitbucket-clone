import { Plugin, PluginKey } from 'prosemirror-state';
import { pluginFactory } from '../../../../utils/plugin-state-factory';
import reducer from './reducer';
import { pmHistoryPluginKey } from '../../../history/pm-history-types';
export var pluginKey = new PluginKey('mediaAltTextPlugin');
var _a = pluginFactory(pluginKey, reducer, {
    onSelectionChanged: function (tr, newState) {
        // dont close alt text for undo/redo transactions (if it comes from prosemirror-history)
        if (tr.getMeta(pmHistoryPluginKey)) {
            return newState;
        }
        return {
            isAltTextEditorOpen: false,
        };
    },
}), createPluginState = _a.createPluginState, createCommand = _a.createCommand, getPluginState = _a.getPluginState;
export var createPlugin = function (_a) {
    var dispatch = _a.dispatch, providerFactory = _a.providerFactory;
    return new Plugin({
        state: createPluginState(dispatch, { isAltTextEditorOpen: false }),
        key: pluginKey,
        view: function () {
            return {
                update: function (view, prev) {
                    var pluginState = getPluginState(view.state);
                    var oldPluginState = getPluginState(prev);
                    if (pluginState &&
                        oldPluginState &&
                        oldPluginState.isAltTextEditorOpen &&
                        !pluginState.isAltTextEditorOpen &&
                        !view.hasFocus()) {
                        view.focus();
                    }
                },
            };
        },
    });
};
export { createCommand, getPluginState };
//# sourceMappingURL=index.js.map