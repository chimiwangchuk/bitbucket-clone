import { __assign } from "tslib";
import { createCommand } from '.';
import { isSelectionMediaSingleNode, getMediaNodeFromSelection, } from '../../utils/media-common';
import { ACTION_SUBJECT, EVENT_TYPE, withAnalytics, ACTION_SUBJECT_ID, ACTION, } from '../../../analytics';
var createCommandWithAnalytics = function (actionType, action, transform) {
    return withAnalytics({
        action: actionType,
        actionSubject: ACTION_SUBJECT.MEDIA,
        actionSubjectId: ACTION_SUBJECT_ID.ALT_TEXT,
        eventType: EVENT_TYPE.TRACK,
    })(createCommand(action, transform));
};
export var closeMediaAltTextMenu = createCommand(function (state) {
    if (isSelectionMediaSingleNode(state)) {
        return { type: 'closeMediaAltTextMenu' };
    }
    return false;
});
export var openMediaAltTextMenu = createCommandWithAnalytics(ACTION.OPENED, function (state) {
    if (isSelectionMediaSingleNode(state)) {
        return { type: 'openMediaAltTextMenu' };
    }
    return false;
}, function (tr) { return tr.setMeta('scrollIntoView', false); });
export var updateAltText = function (newAltText) {
    return createCommand(function (state) {
        return isSelectionMediaSingleNode(state) ? { type: 'updateAltText' } : false;
    }, function (tr, state) {
        var mediaNode = getMediaNodeFromSelection(state);
        var pos = tr.selection.from + 1;
        if (mediaNode) {
            tr.setMeta('scrollIntoView', false);
            tr.setNodeMarkup(pos, undefined, __assign(__assign({}, mediaNode.attrs), { alt: newAltText }));
        }
        return tr;
    });
};
//# sourceMappingURL=commands.js.map