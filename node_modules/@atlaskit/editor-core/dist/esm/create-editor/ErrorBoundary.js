import { __assign, __awaiter, __extends, __generator } from "tslib";
import React from 'react';
import { editorAnalyticsChannel, ACTION, ACTION_SUBJECT, EVENT_TYPE, } from '../plugins/analytics';
var ErrorBoundary = /** @class */ (function (_super) {
    __extends(ErrorBoundary, _super);
    function ErrorBoundary() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            error: undefined,
        };
        _this.fireAnalytics = function (analyticsErrorPayload) {
            var createAnalyticsEvent = _this.props.createAnalyticsEvent;
            _this.getProductName()
                .then(function (product) {
                if (createAnalyticsEvent) {
                    createAnalyticsEvent({
                        action: ACTION.EDITOR_CRASHED,
                        actionSubject: ACTION_SUBJECT.EDITOR,
                        eventType: EVENT_TYPE.OPERATIONAL,
                        attributes: __assign({ product: product, browserInfo: window && window.navigator && window.navigator.userAgent
                                ? window.navigator.userAgent
                                : 'unknown' }, analyticsErrorPayload),
                    }).fire(editorAnalyticsChannel);
                }
                else {
                    // eslint-disable-next-line no-console
                    console.error('Editor Error Boundary: Missing `createAnalyticsEvent` prop.', {
                        channel: editorAnalyticsChannel,
                        product: product,
                        error: analyticsErrorPayload,
                    });
                }
            })
                .catch(function (e) {
                // eslint-disable-next-line no-console
                console.error('Failed to resolve product name from contextIdentifierProvider.', e);
            });
        };
        _this.getProductName = function () { return __awaiter(_this, void 0, void 0, function () {
            var contextIdentifierProvider, context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contextIdentifierProvider = this.props.contextIdentifierProvider;
                        if (!contextIdentifierProvider) return [3 /*break*/, 2];
                        return [4 /*yield*/, contextIdentifierProvider];
                    case 1:
                        context = _a.sent();
                        if (context.product)
                            return [2 /*return*/, context.product];
                        _a.label = 2;
                    case 2: return [2 /*return*/, 'atlaskit'];
                }
            });
        }); };
        return _this;
    }
    ErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {
        var _this = this;
        // Log the error
        this.fireAnalytics({ error: error.toString(), errorInfo: errorInfo });
        // Update state to allow a re-render to attempt graceful recovery (in the event that
        // the error was caused by a race condition or is intermittent)
        this.setState({ error: error }, function () {
            if (_this.props.rethrow) {
                // Now that a re-render has occured, we re-throw to allow product error boundaries
                // to catch and handle the error too.
                //
                // Note that when rethrowing inside a error boundary, the stack trace
                // from a higher error boundary's componentDidCatch.info param will reset
                // to this component, instead of the original component which threw it.
                throw error;
            }
        });
    };
    ErrorBoundary.prototype.render = function () {
        return this.props.children;
    };
    ErrorBoundary.defaultProps = {
        rethrow: true,
    };
    return ErrorBoundary;
}(React.Component));
export default ErrorBoundary;
//# sourceMappingURL=ErrorBoundary.js.map