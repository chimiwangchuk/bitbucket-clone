import { colorPalette, colorPaletteExperimental } from '@atlaskit/adf-schema';
import getColorMessage from './getColorMessage';
import paletteMessages from './paletteMessages';
import { colors } from '@atlaskit/theme';
import chromatism from 'chromatism';
/**
 * For a given color set the alpha channel to alpha
 *
 * @param color color string, suppports HEX, RGB, RGBA etc.
 * @param alpha Alpha channel value as fraction of 1
 * @return CSS RGBA string with applied alpha channel
 */
function setAlpha(color, alpha) {
    var _a = chromatism.convert(color).rgb, r = _a.r, g = _a.g, b = _a.b;
    return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
}
export var DEFAULT_BORDER_COLOR = setAlpha(colors.N800, 0.12);
var mapPaletteColor = function (label, color) {
    var key = label.toLowerCase().replace(' ', '-');
    var message = getColorMessage(paletteMessages, key);
    return {
        value: color,
        label: label,
        border: DEFAULT_BORDER_COLOR,
        message: message,
    };
};
// row 1
export var textColorPalette = [];
export var textColorPaletteExperimental = [];
colorPalette.forEach(function (label, color) {
    textColorPalette.push(mapPaletteColor(label, color));
});
colorPaletteExperimental.forEach(function (label, color) {
    textColorPaletteExperimental.push(mapPaletteColor(label, color));
});
//# sourceMappingURL=textColorPalette.js.map