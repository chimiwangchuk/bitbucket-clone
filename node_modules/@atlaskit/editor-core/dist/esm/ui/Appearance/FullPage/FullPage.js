import { __extends } from "tslib";
import React from 'react';
import rafSchedule from 'raf-schd';
import { pluginKey as contextPanelPluginKey } from '../../../plugins/context-panel';
import { akEditorToolbarKeylineHeight } from '../../../styles';
import { FullPageEditorWrapper } from './StyledComponents';
import { ContextPanelWidthProvider } from '../../ContextPanel/context';
import { FullPageContentArea } from './FullPageContentArea';
import { FullPageToolbar } from './FullPageToolbar';
var FullPageEditor = /** @class */ (function (_super) {
    __extends(FullPageEditor, _super);
    function FullPageEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            showKeyline: false,
            contextPanelVisible: false,
        };
        _this.scrollContainer = null;
        _this.contentAreaRef = function (contentArea) {
            _this.contentArea = contentArea;
        };
        _this.scrollContainerRef = function (ref) {
            var previousScrollContainer = _this.scrollContainer;
            // remove existing handler
            if (previousScrollContainer) {
                previousScrollContainer.removeEventListener('scroll', _this.updateToolbarKeyline);
            }
            _this.scrollContainer = ref ? ref : null;
            if (_this.scrollContainer) {
                _this.scrollContainer.addEventListener('scroll', _this.updateToolbarKeyline, false);
                _this.updateToolbarKeyline();
            }
        };
        _this.updateToolbarKeyline = rafSchedule(function () {
            if (!_this.scrollContainer) {
                return false;
            }
            var scrollTop = _this.scrollContainer.scrollTop;
            var showKeyline = scrollTop > akEditorToolbarKeylineHeight;
            if (showKeyline !== _this.state.showKeyline) {
                _this.setState({ showKeyline: showKeyline });
            }
            return false;
        });
        _this.handleResize = function () {
            _this.scheduledKeylineUpdate = _this.updateToolbarKeyline();
        };
        _this.setContextPanelVisibility = function (_a) {
            var visible = _a.visible;
            _this.setState({ contextPanelVisible: visible });
        };
        return _this;
    }
    FullPageEditor.prototype.componentDidMount = function () {
        window.addEventListener('resize', this.handleResize, false);
        if (this.props.eventDispatcher) {
            this.props.eventDispatcher.on(contextPanelPluginKey.key, this.setContextPanelVisibility);
        }
    };
    FullPageEditor.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.handleResize);
        if (this.scheduledKeylineUpdate) {
            cancelAnimationFrame(this.scheduledKeylineUpdate);
        }
        if (this.props.eventDispatcher) {
            this.props.eventDispatcher.off(contextPanelPluginKey.key, this.setContextPanelVisibility);
        }
    };
    FullPageEditor.prototype.render = function () {
        var props = this.props;
        var _a = this.state, showKeyline = _a.showKeyline, contextPanelVisible = _a.contextPanelVisible;
        return (React.createElement(ContextPanelWidthProvider, null,
            React.createElement(FullPageEditorWrapper, { className: "akEditor" },
                React.createElement(FullPageToolbar, { appearance: props.appearance, collabEdit: props.collabEdit, customPrimaryToolbarComponents: props.customPrimaryToolbarComponents, disabled: !!props.disabled, dispatchAnalyticsEvent: props.dispatchAnalyticsEvent, editorActions: props.editorActions, editorDOMElement: props.editorDOMElement, editorView: props.editorView, eventDispatcher: props.eventDispatcher, popupsBoundariesElement: props.popupsBoundariesElement, popupsMountPoint: props.popupsMountPoint, popupsScrollableElement: props.popupsScrollableElement, primaryToolbarComponents: props.primaryToolbarComponents, providerFactory: props.providerFactory, showKeyline: showKeyline || contextPanelVisible }),
                React.createElement(FullPageContentArea, { allowAnnotation: props.allowAnnotation, appearance: props.appearance, contentArea: this.contentArea, contentAreaRef: this.contentAreaRef, contentComponents: props.contentComponents, contextPanel: props.contextPanel, customContentComponents: props.customContentComponents, disabled: props.disabled, dispatchAnalyticsEvent: props.dispatchAnalyticsEvent, editorActions: props.editorActions, editorDOMElement: props.editorDOMElement, editorView: props.editorView, eventDispatcher: props.eventDispatcher, popupsBoundariesElement: props.popupsBoundariesElement, popupsMountPoint: props.popupsMountPoint, popupsScrollableElement: props.popupsScrollableElement, providerFactory: props.providerFactory, scrollContainer: this.scrollContainer, scrollContainerRef: this.scrollContainerRef }))));
    };
    FullPageEditor.displayName = 'FullPageEditor';
    return FullPageEditor;
}(React.Component));
export { FullPageEditor };
//# sourceMappingURL=FullPage.js.map