import { akEditorGutterPadding, WidthConsumer, } from '@atlaskit/editor-common';
import React from 'react';
import { ClickAreaBlock } from '../../Addon';
import ContextPanel from '../../ContextPanel';
import PluginSlot from '../../PluginSlot';
import WidthEmitter from '../../WidthEmitter';
import { ContentArea, EditorContentArea, SidebarArea, ScrollContainer, } from './StyledComponents';
export var FullPageContentArea = React.memo(function (props) {
    return (React.createElement(ContentArea, null,
        React.createElement(ScrollContainer, { innerRef: props.scrollContainerRef, allowAnnotation: props.allowAnnotation, className: "fabric-editor-popup-scroll-parent" },
            React.createElement(ClickAreaBlock, { editorView: props.editorView },
                React.createElement(WidthConsumer, null, function (_a) {
                    var width = _a.width;
                    return (React.createElement(EditorContentArea, { fullWidthMode: props.appearance === 'full-width', innerRef: props.contentAreaRef, containerWidth: width },
                        React.createElement("div", { style: {
                                padding: "0 " + akEditorGutterPadding + "px",
                                boxSizing: 'border-box',
                            }, className: [
                                'ak-editor-content-area',
                                props.appearance === 'full-width'
                                    ? 'fabric-editor--full-width-mode'
                                    : '',
                            ].join(' ') },
                            props.customContentComponents,
                            React.createElement(PluginSlot, { editorView: props.editorView, editorActions: props.editorActions, eventDispatcher: props.eventDispatcher, providerFactory: props.providerFactory, appearance: props.appearance, items: props.contentComponents, contentArea: props.contentArea, popupsMountPoint: props.popupsMountPoint, popupsBoundariesElement: props.popupsBoundariesElement, popupsScrollableElement: props.popupsScrollableElement, disabled: !!props.disabled, containerElement: props.scrollContainer, dispatchAnalyticsEvent: props.dispatchAnalyticsEvent }),
                            props.editorDOMElement)));
                }))),
        React.createElement(SidebarArea, null, props.contextPanel || React.createElement(ContextPanel, null)),
        React.createElement(WidthEmitter, { editorView: props.editorView, contentArea: props.scrollContainer })));
});
//# sourceMappingURL=FullPageContentArea.js.map