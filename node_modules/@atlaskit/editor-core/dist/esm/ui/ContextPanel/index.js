import { __assign, __extends, __makeTemplateObject } from "tslib";
import React from 'react';
import styled from 'styled-components';
import { colors } from '@atlaskit/theme';
import { akEditorSwoopCubicBezier } from '@atlaskit/editor-common';
import { ContextPanelConsumer } from './context';
import WithPluginState from '../WithPluginState';
import { pluginKey as contextPanelPluginKey, } from '../../plugins/context-panel';
import WithEditorActions from '../WithEditorActions';
var ANIM_SPEED = '0.2s';
export var DEFAULT_CONTEXT_PANEL_WIDTH = 300;
export var Panel = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  width: ", "px;\n  height: 100%;\n  transition: width ", " ", ";\n  overflow: hidden;\n"], ["\n  width: ", "px;\n  height: 100%;\n  transition: width ", " ", ";\n  overflow: hidden;\n"])), function (p) { return (p.visible ? p.panelWidth : 0); }, ANIM_SPEED, akEditorSwoopCubicBezier);
export var Content = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  box-sizing: border-box;\n  padding: 16px 16px 0px;\n  box-shadow: inset 2px 0 0 0 ", ";\n\n  width: ", "px;\n  height: 100%;\n  overflow-y: scroll;\n"], ["\n  box-sizing: border-box;\n  padding: 16px 16px 0px;\n  box-shadow: inset 2px 0 0 0 ", ";\n\n  width: ", "px;\n  height: 100%;\n  overflow-y: scroll;\n"])), colors.N30, function (p) { return p.panelWidth; });
var SwappableContentArea = /** @class */ (function (_super) {
    __extends(SwappableContentArea, _super);
    function SwappableContentArea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            mounted: false,
        };
        return _this;
    }
    SwappableContentArea.prototype.setContextPanelVisibility = function () {
        if (this.props.editorView) {
            var _a = this.props.editorView, dispatch = _a.dispatch, state = _a.state;
            dispatch(state.tr.setMeta(contextPanelPluginKey, {
                visible: this.props.visible,
            }));
        }
    };
    SwappableContentArea.prototype.componentDidMount = function () {
        // use this to trigger an animation
        this.setState({
            mounted: true,
        });
        this.setContextPanelVisibility();
    };
    SwappableContentArea.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.visible !== prevProps.visible) {
            this.setContextPanelVisibility();
        }
    };
    SwappableContentArea.prototype.render = function () {
        var width = this.props.width || DEFAULT_CONTEXT_PANEL_WIDTH;
        var _a = this.props, pluginContent = _a.pluginContent, children = _a.children, visible = _a.visible;
        var userVisible = !!(visible ||
            (typeof visible === 'undefined' && children));
        var isVisible = !!(pluginContent || userVisible);
        return (React.createElement(ContextPanelConsumer, null, function (_a) {
            var broadcastWidth = _a.broadcastWidth;
            broadcastWidth(isVisible ? width : 0);
            return (React.createElement(Panel, { panelWidth: width, visible: isVisible },
                React.createElement(Content, { panelWidth: width }, pluginContent || (userVisible ? children : null))));
        }));
    };
    return SwappableContentArea;
}(React.Component));
export { SwappableContentArea };
var ContextPanel = /** @class */ (function (_super) {
    __extends(ContextPanel, _super);
    function ContextPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContextPanel.prototype.render = function () {
        var _this = this;
        var children = this.props.children;
        return (React.createElement(WithEditorActions, { render: function (actions) {
                var eventDispatcher = actions._privateGetEventDispatcher();
                var editorView = actions._privateGetEditorView();
                if (!eventDispatcher) {
                    return (React.createElement(SwappableContentArea, __assign({ editorView: editorView }, _this.props), children));
                }
                return (React.createElement(WithPluginState, { eventDispatcher: eventDispatcher, plugins: {
                        contextPanel: contextPanelPluginKey,
                    }, render: function (_a) {
                        var contextPanel = _a.contextPanel;
                        var firstContent = contextPanel && contextPanel.contents.find(Boolean);
                        return (React.createElement(SwappableContentArea, __assign({}, _this.props, { editorView: editorView, pluginContent: firstContent }), children));
                    } }));
            } }));
    };
    return ContextPanel;
}(React.Component));
export default ContextPanel;
var templateObject_1, templateObject_2;
//# sourceMappingURL=index.js.map