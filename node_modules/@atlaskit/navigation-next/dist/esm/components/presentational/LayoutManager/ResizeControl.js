import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
import _css from "@emotion/css";
import { jsx as ___EmotionJSX } from "@emotion/core";
import React, { PureComponent, Fragment } from 'react';
import raf from 'raf-schd';
import { Global } from '@emotion/core';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import * as colors from '@atlaskit/theme/colors';
import ChevronLeft from '@atlaskit/icon/glyph/chevron-left';
import ChevronRight from '@atlaskit/icon/glyph/chevron-right';
import Tooltip from '@atlaskit/tooltip';
import { navigationExpandedCollapsed } from '../../../common/analytics';
import { GLOBAL_NAV_WIDTH, CONTENT_NAV_WIDTH, CONTENT_NAV_WIDTH_COLLAPSED, GLOBAL_NAV_COLLAPSE_THRESHOLD } from '../../../common/constants';
import { Shadow } from '../../../common/primitives';
var HANDLE_OFFSET = 4;
var INNER_WIDTH = 20;
var OUTER_WIDTH = INNER_WIDTH + HANDLE_OFFSET;
var HANDLE_WIDTH = 2;

var shouldResetGrabArea = function shouldResetGrabArea(width) {
  return width >= GLOBAL_NAV_COLLAPSE_THRESHOLD && width < CONTENT_NAV_WIDTH;
};

var preventDefault = function preventDefault(event) {
  return event.preventDefault();
};

export var BodyDragCursor = function BodyDragCursor() {
  return ___EmotionJSX(Global, {
    styles: {
      body: {
        cursor: 'ew-resize'
      }
    }
  });
};

var Outer = function Outer(props) {
  return ___EmotionJSX("div", _extends({
    css:
    /*#__PURE__*/
    _css({
      bottom: 0,
      left: '100%',
      position: 'absolute',
      top: 0,
      transform: 'translateZ(0)',
      width: OUTER_WIDTH,
      zIndex: 3 // higher than the scroll hint lines

    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL0xheW91dE1hbmFnZXIvUmVzaXplQ29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1Q0kiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvTGF5b3V0TWFuYWdlci9SZXNpemVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYtc2NoZCc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IHdpdGhBbmFseXRpY3NFdmVudHMgfSBmcm9tICdAYXRsYXNraXQvYW5hbHl0aWNzLW5leHQnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ0BhdGxhc2tpdC90aGVtZS9jb2xvcnMnO1xuaW1wb3J0IENoZXZyb25MZWZ0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tbGVmdCc7XG5pbXBvcnQgQ2hldnJvblJpZ2h0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tcmlnaHQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnQGF0bGFza2l0L3Rvb2x0aXAnO1xuXG5pbXBvcnQgeyBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vYW5hbHl0aWNzJztcbmltcG9ydCB7XG4gIEdMT0JBTF9OQVZfV0lEVEgsXG4gIENPTlRFTlRfTkFWX1dJRFRILFxuICBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQsXG4gIEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xELFxufSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9wcmltaXRpdmVzJztcblxuY29uc3QgSEFORExFX09GRlNFVCA9IDQ7XG5jb25zdCBJTk5FUl9XSURUSCA9IDIwO1xuY29uc3QgT1VURVJfV0lEVEggPSBJTk5FUl9XSURUSCArIEhBTkRMRV9PRkZTRVQ7XG5jb25zdCBIQU5ETEVfV0lEVEggPSAyO1xuY29uc3Qgc2hvdWxkUmVzZXRHcmFiQXJlYSA9IHdpZHRoID0+IHtcbiAgcmV0dXJuIHdpZHRoID49IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEICYmIHdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEg7XG59O1xuY29uc3QgcHJldmVudERlZmF1bHQgPSBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5leHBvcnQgY29uc3QgQm9keURyYWdDdXJzb3IgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e3tcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJyxcbiAgICAgIH0sXG4gICAgfX1cbiAgLz5cbik7XG5cbmNvbnN0IE91dGVyID0gcHJvcHMgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgICAgekluZGV4OiAzLCAvLyBoaWdoZXIgdGhhbiB0aGUgc2Nyb2xsIGhpbnQgbGluZXNcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBHcmFiQXJlYSA9ICh7IHNob3dIYW5kbGUsIGlzQm9sZCwgLi4ucHJvcHMgfSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAtSEFORExFX09GRlNFVCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNCb2xkID8gY29sb3JzLkIyMDAgOiBjb2xvcnMuQjEwMCxcbiAgICAgICAgb3BhY2l0eTogc2hvd0hhbmRsZSA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbGVmdDogSEFORExFX09GRlNFVCAtIEhBTkRMRV9XSURUSCAvIDIsIC8vIHRoZSBoYW5kbGUgc2hvdWxkIFwic3RyYWRkbGVcIiB0aGUgZGl2aWRpbmcgbGluZVxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjAwbXMnLFxuICAgICAgICB3aWR0aDogSEFORExFX1dJRFRILFxuICAgICAgfX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5jb25zdCBsYXJnZUhpdEFyZWEgPSB7XG4gIGxlZnQ6IC04LFxuICByaWdodDogLTEyLFxuICBib3R0b206IC04LFxuICB0b3A6IC04LFxufTtcbmNvbnN0IHNtYWxsSGl0QXJlYSA9IHtcbiAgbGVmdDogLTQsXG4gIHJpZ2h0OiAtNCxcbiAgYm90dG9tOiAtNCxcbiAgdG9wOiAtNCxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBoYXNIaWdobGlnaHQsXG4gIGlubmVyUmVmLFxuICBpc1Zpc2libGUsXG4gIGhpdEFyZWFTaXplLFxuICAuLi5wcm9wc1xufSkgPT4gKFxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPVwiYWstbmF2aWdhdGlvbi1yZXNpemUtYnV0dG9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICByZWY9e2lubmVyUmVmfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxcHggJHtjb2xvcnMuTjMwQX0sIDAgMnB4IDRweCAxcHggJHtjb2xvcnMuTjMwQX1gLFxuICAgICAgY29sb3I6IGhhc0hpZ2hsaWdodCA/IGNvbG9ycy5CMTAwIDogY29sb3JzLk4yMDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBvcGFjaXR5OiBpc1Zpc2libGUgPyAxIDogMCxcbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDMyLFxuICAgICAgdHJhbnNpdGlvbjogYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcixcbiAgICAgICAgY29sb3IgMTAwbXMgbGluZWFyLFxuICAgICAgICBvcGFjaXR5IDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpLFxuICAgICAgICB0cmFuc2Zvcm0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlcbiAgICAgIGAsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSlgLFxuICAgICAgd2lkdGg6IDI0LFxuXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5CMTAwLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgLy8gaW5jcmVhc2UgaGl0LWFyZWFcbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKGhpdEFyZWFTaXplID09PSAnc21hbGwnID8gc21hbGxIaXRBcmVhIDogbGFyZ2VIaXRBcmVhKSxcbiAgICAgIH19XG4gICAgLz5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuLy8gdGlua2VyIHdpdGggdGhlIERPTSBkaXJlY3RseSBieSBzZXR0aW5nIHN0eWxlIHByb3BlcnRpZXMsIHVwZGF0ZXMgdGhlIGdyYWIgYmFyIHBvc2l0aW9uIGJ5IGNoYW5naW5nIHBhZGRpbmctbGVmdCBhbmQgd2lkdGguXG5mdW5jdGlvbiB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24oZWxlbWVudHMsIHdpZHRoKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goKHsgcHJvcGVydHksIHJlZiB9KSA9PiB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBgJHt3aWR0aH1weGA7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSByZWYuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAvLyBhdm9pZCB0aHJhc2hpbmdcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG5cbiAgICAvLyBkaXJlY3QgYXR0cmlidXRlIG1hbmlwdWxhdGlvblxuICAgIHJlZi5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgbmV3VmFsdWUpO1xuICB9KTtcbn1cblxuLy8gaGVscGVyIGZvciB0b29sdGlwIGNvbnRlbnQga2V5Ym9hcmQgc2hvcnRjdXQgaGlnaGxpZ2h0XG5mdW5jdGlvbiBtYWtlVG9vbHRpcE5vZGUoeyB0ZXh0LCBjaGFyIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzcGFuPnt0ZXh0fTwvc3Bhbj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuTjQwMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgICAgcGFkZGluZzogJzFweCA4cHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hhcn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vKiBOT1RFOiBleHBlcmltZW50YWwgcHJvcHMgdXNlIGFuIHVuZGVyc2NvcmUgKi9cbmNsYXNzIFJlc2l6ZUNvbnRyb2wgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcblxuICBsYXN0V2lkdGg7XG5cbiAgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XG5cbiAgc3RhdGUgPSB7XG4gICAgZGVsdGE6IDAsXG4gICAgZGlkRHJhZ09wZW46IGZhbHNlLFxuICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgIGluaXRpYWxXaWR0aDogMCxcbiAgICBpbml0aWFsWDogMCxcbiAgICBtb3VzZUlzRG93bjogZmFsc2UsXG4gICAgbW91c2VJc092ZXJHcmFiQXJlYTogZmFsc2UsXG4gICAgc2hvd0dyYWJBcmVhOiB0cnVlLFxuICAgIHdpZHRoOiB0aGlzLnByb3BzLm5hdmlnYXRpb24uc3RhdGUucHJvZHVjdE5hdldpZHRoLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaXNHcmFiQXJlYURpc2FibGVkOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICAgIGV4cGVyaW1lbnRhbF9mbHlvdXRPbkhvdmVyOiBFWFBFUklNRU5UQUxfRkxZT1VUX09OX0hPVkVSLFxuICAgICAgZmx5b3V0SXNPcGVuLFxuICAgICAgbmF2aWdhdGlvbixcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gbmF2aWdhdGlvbi5zdGF0ZTtcblxuICAgIC8vIHJlc29sdmUgXCJob3ZlciBsb2NraW5nXCIgaXNzdWUgd2l0aCByZXNpemUgZ3JhYiBhcmVhXG4gICAgaWYgKEVYUEVSSU1FTlRBTF9GTFlPVVRfT05fSE9WRVIpIHtcbiAgICAgIGNvbnN0IHNob3dHcmFiQXJlYSA9ICFpc0NvbGxhcHNlZCAmJiAhZmx5b3V0SXNPcGVuO1xuICAgICAgY29uc3QgbW91c2VJc092ZXJHcmFiQXJlYSA9IHNob3dHcmFiQXJlYVxuICAgICAgICA/IHN0YXRlLm1vdXNlSXNPdmVyR3JhYkFyZWFcbiAgICAgICAgOiBmYWxzZTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbW91c2VJc092ZXJHcmFiQXJlYSxcbiAgICAgICAgc2hvd0dyYWJBcmVhLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG9uUmVzaXplckNoZXZyb25DbGljayA9ICgpID0+IHtcbiAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy5wcm9wcy5mbHlvdXRJc09wZW4gPyAnY2hldnJvbkhvdmVyJyA6ICdjaGV2cm9uJztcbiAgICB0aGlzLnRvZ2dsZUNvbGxhcHNlKHRyaWdnZXIpO1xuICB9O1xuXG4gIG1vdXNlRW50ZXJHcmFiQXJlYSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW91c2VJc092ZXJHcmFiQXJlYTogdHJ1ZSB9KTtcbiAgfTtcblxuICBtb3VzZUxlYXZlR3JhYkFyZWEgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1vdXNlSXNPdmVyR3JhYkFyZWE6IGZhbHNlIH0pO1xuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gdHJpZ2dlciA9PiB7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uLCBjcmVhdGVBbmFseXRpY3NFdmVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBuZXdDb2xsYXBzZWRTdGF0ZSA9ICFuYXZpZ2F0aW9uLnN0YXRlLmlzQ29sbGFwc2VkO1xuICAgIG5hdmlnYXRpb24udG9nZ2xlQ29sbGFwc2UoKTtcbiAgICBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQoY3JlYXRlQW5hbHl0aWNzRXZlbnQsIHtcbiAgICAgIHRyaWdnZXIsXG4gICAgICBpc0NvbGxhcHNlZDogbmV3Q29sbGFwc2VkU3RhdGUsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVzaXplU3RhcnQgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBpbml0aWFsWCA9IGV2ZW50LnBhZ2VYO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGluaXRpYWxYLCBtb3VzZUlzRG93bjogdHJ1ZSB9KTtcblxuICAgIC8vIGF0dGFjaCBoYW5kbGVycyAoaGFuZGxlUmVzaXplU3RhcnQgaXMgYSBib3VuZCB0byBvbk1vdXNlRG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIGluaXRpYWxpemVEcmFnID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlbHRhID0gZXZlbnQucGFnZVggLSB0aGlzLnN0YXRlLmluaXRpYWxYO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IG5hdmlnYXRpb24uc3RhdGU7XG5cbiAgICAvLyBvbmx5IGluaXRpYWxpemUgd2hlbiBkcmFnIGludGVudGlvbiBpcyBcImV4cGFuZFwiXG4gICAgaWYgKGlzQ29sbGFwc2VkICYmIGRlbHRhIDw9IDApIHtcbiAgICAgIHRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBpbml0aWFsV2lkdGggPSBuYXZpZ2F0aW9uLnN0YXRlLnByb2R1Y3ROYXZXaWR0aDtcbiAgICBsZXQgZGlkRHJhZ09wZW4gPSBmYWxzZTtcblxuICAgIC8vIE5PVEVcbiAgICAvLyBpZiB0aGUgcHJvZHVjdCBuYXYgaXMgY29sbGFwc2VkIGFuZCB0aGUgY29uc3VtZXIgc3RhcnRzIGRyYWdnaW5nIGl0IG9wZW5cbiAgICAvLyB3ZSBtdXN0IGV4cGFuZCBpdCBhbmQgZHJhZyBzaG91bGQgc3RhcnQgZnJvbSAwLlxuICAgIGlmIChpc0NvbGxhcHNlZCkge1xuICAgICAgaW5pdGlhbFdpZHRoID0gQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VEO1xuICAgICAgZGlkRHJhZ09wZW4gPSB0cnVlO1xuICAgICAgbmF2aWdhdGlvbi5tYW51YWxSZXNpemVTdGFydCh7XG4gICAgICAgIHByb2R1Y3ROYXZXaWR0aDogQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VELFxuICAgICAgICBpc0NvbGxhcHNlZDogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF2aWdhdGlvbi5tYW51YWxSZXNpemVTdGFydChuYXZpZ2F0aW9uLnN0YXRlKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZGlkRHJhZ09wZW4sIGluaXRpYWxXaWR0aCwgaXNEcmFnZ2luZzogdHJ1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVSZXNpemUgPSByYWYoKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBtdXRhdGlvblJlZnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpbml0aWFsWCwgaW5pdGlhbFdpZHRoLCBpc0RyYWdnaW5nLCBtb3VzZUlzRG93biB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIC8vIG9uIG9jY2FzaW9uIGEgbW91c2UgbW92ZSBldmVudCBvY2N1cnMgYmVmb3JlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAvLyBoYXZlIGEgY2hhbmNlIHRvIGRldGFjaFxuICAgIGlmICghbW91c2VJc0Rvd24pIHJldHVybjtcblxuICAgIC8vIGluaXRpYWxpemUgZHJhZ2dpbmdcbiAgICBpZiAoIWlzRHJhZ2dpbmcpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZURyYWcoZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFsbG93IHRoZSBwcm9kdWN0IG5hdiB0byBiZSA3NSUgb2YgdGhlIGF2YWlsYWJsZSBwYWdlIHdpZHRoXG4gICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLnJvdW5kKCh3aW5kb3cuaW5uZXJXaWR0aCAvIDQpICogMyk7XG4gICAgY29uc3QgbWluV2lkdGggPSBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQ7XG4gICAgY29uc3QgYWRqdXN0ZWRNYXggPSBtYXhXaWR0aCAtIGluaXRpYWxXaWR0aCAtIEdMT0JBTF9OQVZfV0lEVEg7XG4gICAgY29uc3QgYWRqdXN0ZWRNaW4gPSBtaW5XaWR0aCAtIGluaXRpYWxXaWR0aDtcblxuICAgIGNvbnN0IGRlbHRhID0gTWF0aC5tYXgoXG4gICAgICBNYXRoLm1pbihldmVudC5wYWdlWCAtIGluaXRpYWxYLCBhZGp1c3RlZE1heCksXG4gICAgICBhZGp1c3RlZE1pbixcbiAgICApO1xuICAgIGNvbnN0IHdpZHRoID0gaW5pdGlhbFdpZHRoICsgZGVsdGE7XG5cbiAgICAvLyBhcHBseSB1cGRhdGVkIHN0eWxlcyB0byB0aGUgYXBwbGljYWJsZSBET00gbm9kZXNcbiAgICB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24obXV0YXRpb25SZWZzLCB3aWR0aCk7XG5cbiAgICAvLyBOT1RFOiBoaWphY2sgdGhlIG1hdWFsIHJlc2l6ZSBhbmQgZm9yY2UgY29sbGFwc2UsIGNhbmNlbHMgbW91c2UgZXZlbnRzXG4gICAgaWYgKGV2ZW50LmNsaWVudFggPCAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgd2lkdGg6IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRCB9KTtcbiAgICAgIHRoaXMuaGFuZGxlUmVzaXplRW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1haW50YWluIGludGVybmFsIHdpZHRoLCBhcHBsaWVkIHRvIG5hdmlnYXRpb24gc3RhdGUgb24gcmVzaXplIGVuZFxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlbHRhLCB3aWR0aCB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGhhbmRsZVJlc2l6ZUVuZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24sIGNyZWF0ZUFuYWx5dGljc0V2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZGVsdGEsIGRpZERyYWdPcGVuLCBpc0RyYWdnaW5nLCB3aWR0aDogY3VycmVudFdpZHRoIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGV4cGFuZFRocmVzaG9sZCA9IDI0O1xuICAgIGNvbnN0IHJlc2l6ZXJDbGlja2VkID0gIWlzRHJhZ2dpbmcgJiYgIXRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQ7XG4gICAgbGV0IHB1Ymxpc2hXaWR0aCA9IGN1cnJlbnRXaWR0aDtcbiAgICBsZXQgc2hvdWxkQ29sbGFwc2UgPSBmYWxzZTtcblxuICAgIC8vIGNoZWNrIGlmIHRoZSBpbnRlbnRpb24gd2FzIGp1c3QgYSBjbGljaywgYW5kIHRvZ2dsZVxuICAgIGlmIChyZXNpemVyQ2xpY2tlZCkge1xuICAgICAgcHVibGlzaFdpZHRoID0gTWF0aC5tYXgoQ09OVEVOVF9OQVZfV0lEVEgsIGN1cnJlbnRXaWR0aCk7XG4gICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNlKCdyZXNpemVyQ2xpY2snKTtcbiAgICB9XG5cbiAgICAvLyBwcmV2ZW50IHRoZSB1c2VyIGZyb20gY3JlYXRpbmcgYW4gdW51c2FibGUgd2lkdGhcbiAgICBpZiAocHVibGlzaFdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEgpIHtcbiAgICAgIHB1Ymxpc2hXaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIO1xuICAgICAgaWYgKGRpZERyYWdPcGVuICYmIGRlbHRhID4gZXhwYW5kVGhyZXNob2xkKSB7XG4gICAgICAgIHNob3VsZENvbGxhcHNlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRXaWR0aCA8IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEKSB7XG4gICAgICAgIHNob3VsZENvbGxhcHNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkQ29sbGFwc2UgPSBuYXZpZ2F0aW9uLnN0YXRlLmlzQ29sbGFwc2VkO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICFyZXNpemVyQ2xpY2tlZCAmJlxuICAgICAgKChkaWREcmFnT3BlbiAmJiAhc2hvdWxkQ29sbGFwc2UpIHx8ICghZGlkRHJhZ09wZW4gJiYgc2hvdWxkQ29sbGFwc2UpKVxuICAgICkge1xuICAgICAgbmF2aWdhdGlvbkV4cGFuZGVkQ29sbGFwc2VkKGNyZWF0ZUFuYWx5dGljc0V2ZW50LCB7XG4gICAgICAgIHRyaWdnZXI6ICdyZXNpemVyRHJhZycsXG4gICAgICAgIGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHJlc2V0IGV2ZXJ5dGhpbmdcbiAgICB0aGlzLmludmFsaWREcmFnQXR0ZW1wdGVkID0gZmFsc2U7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaWREcmFnT3BlbjogZmFsc2UsXG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIG1vdXNlSXNEb3duOiBmYWxzZSxcbiAgICAgIHdpZHRoOiBwdWJsaXNoV2lkdGgsXG4gICAgfSk7XG5cbiAgICAvLyBwdWJsaXNoIHRoZSBuZXcgd2lkdGgsIG9uY2UgcmVzaXppbmcgY29tcGxldGVzXG4gICAgbmF2aWdhdGlvbi5tYW51YWxSZXNpemVFbmQoe1xuICAgICAgcHJvZHVjdE5hdldpZHRoOiBwdWJsaXNoV2lkdGgsXG4gICAgICBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UsXG4gICAgfSk7XG5cbiAgICBpZiAoc2hvdWxkUmVzZXRHcmFiQXJlYShjdXJyZW50V2lkdGgpKSB7XG4gICAgICB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24odGhpcy5wcm9wcy5tdXRhdGlvblJlZnMsIENPTlRFTlRfTkFWX1dJRFRIKTtcbiAgICB9XG5cbiAgICAvLyBjbGVhbnVwXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlUmVzaXplRW5kKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNEcmFnZ2luZyxcbiAgICAgIG1vdXNlSXNEb3duLFxuICAgICAgbW91c2VJc092ZXJHcmFiQXJlYSxcbiAgICAgIHNob3dHcmFiQXJlYSxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50LFxuICAgICAgZXhwYW5kQ29sbGFwc2VBZmZvcmRhbmNlUmVmLFxuICAgICAgZmx5b3V0SXNPcGVuLFxuICAgICAgaXNEaXNhYmxlZDogaXNSZXNpemVEaXNhYmxlZCxcbiAgICAgIGlzR3JhYkFyZWFEaXNhYmxlZCxcbiAgICAgIG9uTW91c2VPdmVyQnV0dG9uQnVmZmVyLFxuICAgICAgbmF2aWdhdGlvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gdGhlIGJ1dHRvbiBzaG91bGRuJ3QgXCJmbGlwXCIgdW50aWwgdGhlIGRyYWcgaXMgY29tcGxldGVcbiAgICBsZXQgQnV0dG9uSWNvbiA9IENoZXZyb25MZWZ0O1xuICAgIGlmIChpc0NvbGxhcHNlZCkgQnV0dG9uSWNvbiA9IENoZXZyb25SaWdodDtcblxuICAgIGNvbnN0IGJ1dHRvbiA9IChcbiAgICAgIDxCdXR0b25cbiAgICAgICAgb25DbGljaz17dGhpcy5vblJlc2l6ZXJDaGV2cm9uQ2xpY2t9XG4gICAgICAgIG9uTW91c2VEb3duPXtwcmV2ZW50RGVmYXVsdH1cbiAgICAgICAgaGl0QXJlYVNpemU9e29uTW91c2VPdmVyQnV0dG9uQnVmZmVyID8gJ2xhcmdlJyA6ICdzbWFsbCd9XG4gICAgICAgIC8vIG1haW50YWluIHN0eWxlcyB3aGVuIHVzZXIgaXMgZHJhZ2dpbmdcbiAgICAgICAgaXNWaXNpYmxlPXtpc0NvbGxhcHNlZCB8fCBtb3VzZUlzRG93bn1cbiAgICAgICAgaGFzSGlnaGxpZ2h0PXttb3VzZUlzRG93biB8fCBtb3VzZUlzT3ZlckdyYWJBcmVhfVxuICAgICAgICBpbm5lclJlZj17ZXhwYW5kQ29sbGFwc2VBZmZvcmRhbmNlUmVmfVxuICAgICAgICBhcmlhLWV4cGFuZGVkPXshaXNDb2xsYXBzZWR9XG4gICAgICAgIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiXG4gICAgICA+XG4gICAgICAgIDxCdXR0b25JY29uIC8+XG4gICAgICA8L0J1dHRvbj5cbiAgICApO1xuICAgIGNvbnN0IHNoYWRvd0RpcmVjdGlvbiA9IGZseW91dElzT3BlbiA/ICd0byByaWdodCcgOiAndG8gbGVmdCc7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE91dGVyPlxuICAgICAgICB7aXNEcmFnZ2luZyAmJiA8Qm9keURyYWdDdXJzb3IgLz59XG4gICAgICAgIDxTaGFkb3cgZGlyZWN0aW9uPXtzaGFkb3dEaXJlY3Rpb259IGlzQm9sZD17bW91c2VJc0Rvd259IC8+XG4gICAgICAgIHshaXNSZXNpemVEaXNhYmxlZCAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgeyFpc0dyYWJBcmVhRGlzYWJsZWQgJiYgc2hvd0dyYWJBcmVhICYmIChcbiAgICAgICAgICAgICAgPEdyYWJBcmVhXG4gICAgICAgICAgICAgICAgaXNCb2xkPXttb3VzZUlzRG93bn1cbiAgICAgICAgICAgICAgICBzaG93SGFuZGxlPXttb3VzZUlzRG93biB8fCBtb3VzZUlzT3ZlckdyYWJBcmVhfVxuICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5tb3VzZUVudGVyR3JhYkFyZWF9XG4gICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm1vdXNlTGVhdmVHcmFiQXJlYX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17dGhpcy5oYW5kbGVSZXNpemVTdGFydH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2IG9uTW91c2VPdmVyPXshZmx5b3V0SXNPcGVuID8gb25Nb3VzZU92ZXJCdXR0b25CdWZmZXIgOiBudWxsfT5cbiAgICAgICAgICAgICAge2NvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQgPyAoXG4gICAgICAgICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9e21ha2VUb29sdGlwTm9kZShcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VUb2dnbGVUb29sdGlwQ29udGVudChpc0NvbGxhcHNlZCksXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgZGVsYXk9ezYwMH1cbiAgICAgICAgICAgICAgICAgIGhpZGVUb29sdGlwT25DbGlja1xuICAgICAgICAgICAgICAgICAgcG9zaXRpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2J1dHRvbn1cbiAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgYnV0dG9uXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApfVxuICAgICAgPC9PdXRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IFJlc2l6ZUNvbnRyb2wgYXMgUmVzaXplQ29udHJvbEJhc2UgfTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aEFuYWx5dGljc0V2ZW50cygpKFJlc2l6ZUNvbnRyb2wpO1xuIl19 */")
  }, props));
};

export var GrabArea = function GrabArea(_ref) {
  var showHandle = _ref.showHandle,
      isBold = _ref.isBold,
      props = _objectWithoutProperties(_ref, ["showHandle", "isBold"]);

  return ___EmotionJSX("div", _extends({
    css:
    /*#__PURE__*/
    _css({
      cursor: 'ew-resize',
      height: '100%',
      left: -HANDLE_OFFSET,
      position: 'relative',
      width: OUTER_WIDTH
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props), ___EmotionJSX("div", {
    css:
    /*#__PURE__*/
    _css({
      backgroundColor: isBold ? colors.B200 : colors.B100,
      opacity: showHandle ? 1 : 0,
      height: '100%',
      left: HANDLE_OFFSET - HANDLE_WIDTH / 2,
      // the handle should "straddle" the dividing line
      position: 'absolute',
      transition: 'opacity 200ms',
      width: HANDLE_WIDTH
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }));
};
var largeHitArea = {
  left: -8,
  right: -12,
  bottom: -8,
  top: -8
};
var smallHitArea = {
  left: -4,
  right: -4,
  bottom: -4,
  top: -4
};

var Button = function Button(_ref2) {
  var children = _ref2.children,
      hasHighlight = _ref2.hasHighlight,
      innerRef = _ref2.innerRef,
      isVisible = _ref2.isVisible,
      hitAreaSize = _ref2.hitAreaSize,
      props = _objectWithoutProperties(_ref2, ["children", "hasHighlight", "innerRef", "isVisible", "hitAreaSize"]);

  return ___EmotionJSX("button", _extends({
    className: "ak-navigation-resize-button",
    type: "button",
    ref: innerRef,
    css:
    /*#__PURE__*/
    _css({
      background: 0,
      backgroundColor: 'white',
      border: 0,
      borderRadius: '50%',
      boxShadow: "0 0 0 1px ".concat(colors.N30A, ", 0 2px 4px 1px ").concat(colors.N30A),
      color: hasHighlight ? colors.B100 : colors.N200,
      cursor: 'pointer',
      height: 24,
      opacity: isVisible ? 1 : 0,
      outline: 0,
      padding: 0,
      position: 'absolute',
      top: 32,
      transition: "\n        background-color 100ms linear,\n        color 100ms linear,\n        opacity 300ms cubic-bezier(0.2, 0, 0, 1),\n        transform 300ms cubic-bezier(0.2, 0, 0, 1)\n      ",
      transform: "translate(-50%)",
      width: 24,
      ':hover': {
        backgroundColor: colors.B100,
        color: 'white'
      },
      ':active': {
        backgroundColor: colors.B200,
        color: 'white'
      },
      ':focus': {
        opacity: 1,
        backgroundColor: colors.B200,
        color: 'white'
      }
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props), ___EmotionJSX("div", {
    // increase hit-area
    css:
    /*#__PURE__*/
    _css(_objectSpread({
      position: 'absolute'
    }, hitAreaSize === 'small' ? smallHitArea : largeHitArea), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL0xheW91dE1hbmFnZXIvUmVzaXplQ29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4SU0iLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvTGF5b3V0TWFuYWdlci9SZXNpemVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYtc2NoZCc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IHdpdGhBbmFseXRpY3NFdmVudHMgfSBmcm9tICdAYXRsYXNraXQvYW5hbHl0aWNzLW5leHQnO1xuaW1wb3J0ICogYXMgY29sb3JzIGZyb20gJ0BhdGxhc2tpdC90aGVtZS9jb2xvcnMnO1xuaW1wb3J0IENoZXZyb25MZWZ0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tbGVmdCc7XG5pbXBvcnQgQ2hldnJvblJpZ2h0IGZyb20gJ0BhdGxhc2tpdC9pY29uL2dseXBoL2NoZXZyb24tcmlnaHQnO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnQGF0bGFza2l0L3Rvb2x0aXAnO1xuXG5pbXBvcnQgeyBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vYW5hbHl0aWNzJztcbmltcG9ydCB7XG4gIEdMT0JBTF9OQVZfV0lEVEgsXG4gIENPTlRFTlRfTkFWX1dJRFRILFxuICBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQsXG4gIEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xELFxufSBmcm9tICcuLi8uLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9wcmltaXRpdmVzJztcblxuY29uc3QgSEFORExFX09GRlNFVCA9IDQ7XG5jb25zdCBJTk5FUl9XSURUSCA9IDIwO1xuY29uc3QgT1VURVJfV0lEVEggPSBJTk5FUl9XSURUSCArIEhBTkRMRV9PRkZTRVQ7XG5jb25zdCBIQU5ETEVfV0lEVEggPSAyO1xuY29uc3Qgc2hvdWxkUmVzZXRHcmFiQXJlYSA9IHdpZHRoID0+IHtcbiAgcmV0dXJuIHdpZHRoID49IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEICYmIHdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEg7XG59O1xuY29uc3QgcHJldmVudERlZmF1bHQgPSBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5leHBvcnQgY29uc3QgQm9keURyYWdDdXJzb3IgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e3tcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJyxcbiAgICAgIH0sXG4gICAgfX1cbiAgLz5cbik7XG5cbmNvbnN0IE91dGVyID0gcHJvcHMgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgICAgekluZGV4OiAzLCAvLyBoaWdoZXIgdGhhbiB0aGUgc2Nyb2xsIGhpbnQgbGluZXNcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBHcmFiQXJlYSA9ICh7IHNob3dIYW5kbGUsIGlzQm9sZCwgLi4ucHJvcHMgfSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAtSEFORExFX09GRlNFVCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNCb2xkID8gY29sb3JzLkIyMDAgOiBjb2xvcnMuQjEwMCxcbiAgICAgICAgb3BhY2l0eTogc2hvd0hhbmRsZSA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbGVmdDogSEFORExFX09GRlNFVCAtIEhBTkRMRV9XSURUSCAvIDIsIC8vIHRoZSBoYW5kbGUgc2hvdWxkIFwic3RyYWRkbGVcIiB0aGUgZGl2aWRpbmcgbGluZVxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjAwbXMnLFxuICAgICAgICB3aWR0aDogSEFORExFX1dJRFRILFxuICAgICAgfX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5jb25zdCBsYXJnZUhpdEFyZWEgPSB7XG4gIGxlZnQ6IC04LFxuICByaWdodDogLTEyLFxuICBib3R0b206IC04LFxuICB0b3A6IC04LFxufTtcbmNvbnN0IHNtYWxsSGl0QXJlYSA9IHtcbiAgbGVmdDogLTQsXG4gIHJpZ2h0OiAtNCxcbiAgYm90dG9tOiAtNCxcbiAgdG9wOiAtNCxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9ICh7XG4gIGNoaWxkcmVuLFxuICBoYXNIaWdobGlnaHQsXG4gIGlubmVyUmVmLFxuICBpc1Zpc2libGUsXG4gIGhpdEFyZWFTaXplLFxuICAuLi5wcm9wc1xufSkgPT4gKFxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPVwiYWstbmF2aWdhdGlvbi1yZXNpemUtYnV0dG9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICByZWY9e2lubmVyUmVmfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxcHggJHtjb2xvcnMuTjMwQX0sIDAgMnB4IDRweCAxcHggJHtjb2xvcnMuTjMwQX1gLFxuICAgICAgY29sb3I6IGhhc0hpZ2hsaWdodCA/IGNvbG9ycy5CMTAwIDogY29sb3JzLk4yMDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBvcGFjaXR5OiBpc1Zpc2libGUgPyAxIDogMCxcbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDMyLFxuICAgICAgdHJhbnNpdGlvbjogYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcixcbiAgICAgICAgY29sb3IgMTAwbXMgbGluZWFyLFxuICAgICAgICBvcGFjaXR5IDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpLFxuICAgICAgICB0cmFuc2Zvcm0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlcbiAgICAgIGAsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSlgLFxuICAgICAgd2lkdGg6IDI0LFxuXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5CMTAwLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgLy8gaW5jcmVhc2UgaGl0LWFyZWFcbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKGhpdEFyZWFTaXplID09PSAnc21hbGwnID8gc21hbGxIaXRBcmVhIDogbGFyZ2VIaXRBcmVhKSxcbiAgICAgIH19XG4gICAgLz5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuLy8gdGlua2VyIHdpdGggdGhlIERPTSBkaXJlY3RseSBieSBzZXR0aW5nIHN0eWxlIHByb3BlcnRpZXMsIHVwZGF0ZXMgdGhlIGdyYWIgYmFyIHBvc2l0aW9uIGJ5IGNoYW5naW5nIHBhZGRpbmctbGVmdCBhbmQgd2lkdGguXG5mdW5jdGlvbiB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24oZWxlbWVudHMsIHdpZHRoKSB7XG4gIGVsZW1lbnRzLmZvckVhY2goKHsgcHJvcGVydHksIHJlZiB9KSA9PiB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBgJHt3aWR0aH1weGA7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSByZWYuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cbiAgICAvLyBhdm9pZCB0aHJhc2hpbmdcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG5cbiAgICAvLyBkaXJlY3QgYXR0cmlidXRlIG1hbmlwdWxhdGlvblxuICAgIHJlZi5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgbmV3VmFsdWUpO1xuICB9KTtcbn1cblxuLy8gaGVscGVyIGZvciB0b29sdGlwIGNvbnRlbnQga2V5Ym9hcmQgc2hvcnRjdXQgaGlnaGxpZ2h0XG5mdW5jdGlvbiBtYWtlVG9vbHRpcE5vZGUoeyB0ZXh0LCBjaGFyIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzcGFuPnt0ZXh0fTwvc3Bhbj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuTjQwMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgICAgcGFkZGluZzogJzFweCA4cHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hhcn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vKiBOT1RFOiBleHBlcmltZW50YWwgcHJvcHMgdXNlIGFuIHVuZGVyc2NvcmUgKi9cbmNsYXNzIFJlc2l6ZUNvbnRyb2wgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcblxuICBsYXN0V2lkdGg7XG5cbiAgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XG5cbiAgc3RhdGUgPSB7XG4gICAgZGVsdGE6IDAsXG4gICAgZGlkRHJhZ09wZW46IGZhbHNlLFxuICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgIGluaXRpYWxXaWR0aDogMCxcbiAgICBpbml0aWFsWDogMCxcbiAgICBtb3VzZUlzRG93bjogZmFsc2UsXG4gICAgbW91c2VJc092ZXJHcmFiQXJlYTogZmFsc2UsXG4gICAgc2hvd0dyYWJBcmVhOiB0cnVlLFxuICAgIHdpZHRoOiB0aGlzLnByb3BzLm5hdmlnYXRpb24uc3RhdGUucHJvZHVjdE5hdldpZHRoLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaXNHcmFiQXJlYURpc2FibGVkOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICAgIGV4cGVyaW1lbnRhbF9mbHlvdXRPbkhvdmVyOiBFWFBFUklNRU5UQUxfRkxZT1VUX09OX0hPVkVSLFxuICAgICAgZmx5b3V0SXNPcGVuLFxuICAgICAgbmF2aWdhdGlvbixcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gbmF2aWdhdGlvbi5zdGF0ZTtcblxuICAgIC8vIHJlc29sdmUgXCJob3ZlciBsb2NraW5nXCIgaXNzdWUgd2l0aCByZXNpemUgZ3JhYiBhcmVhXG4gICAgaWYgKEVYUEVSSU1FTlRBTF9GTFlPVVRfT05fSE9WRVIpIHtcbiAgICAgIGNvbnN0IHNob3dHcmFiQXJlYSA9ICFpc0NvbGxhcHNlZCAmJiAhZmx5b3V0SXNPcGVuO1xuICAgICAgY29uc3QgbW91c2VJc092ZXJHcmFiQXJlYSA9IHNob3dHcmFiQXJlYVxuICAgICAgICA/IHN0YXRlLm1vdXNlSXNPdmVyR3JhYkFyZWFcbiAgICAgICAgOiBmYWxzZTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbW91c2VJc092ZXJHcmFiQXJlYSxcbiAgICAgICAgc2hvd0dyYWJBcmVhLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG9uUmVzaXplckNoZXZyb25DbGljayA9ICgpID0+IHtcbiAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy5wcm9wcy5mbHlvdXRJc09wZW4gPyAnY2hldnJvbkhvdmVyJyA6ICdjaGV2cm9uJztcbiAgICB0aGlzLnRvZ2dsZUNvbGxhcHNlKHRyaWdnZXIpO1xuICB9O1xuXG4gIG1vdXNlRW50ZXJHcmFiQXJlYSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbW91c2VJc092ZXJHcmFiQXJlYTogdHJ1ZSB9KTtcbiAgfTtcblxuICBtb3VzZUxlYXZlR3JhYkFyZWEgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1vdXNlSXNPdmVyR3JhYkFyZWE6IGZhbHNlIH0pO1xuICB9O1xuXG4gIHRvZ2dsZUNvbGxhcHNlID0gdHJpZ2dlciA9PiB7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uLCBjcmVhdGVBbmFseXRpY3NFdmVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBuZXdDb2xsYXBzZWRTdGF0ZSA9ICFuYXZpZ2F0aW9uLnN0YXRlLmlzQ29sbGFwc2VkO1xuICAgIG5hdmlnYXRpb24udG9nZ2xlQ29sbGFwc2UoKTtcbiAgICBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQoY3JlYXRlQW5hbHl0aWNzRXZlbnQsIHtcbiAgICAgIHRyaWdnZXIsXG4gICAgICBpc0NvbGxhcHNlZDogbmV3Q29sbGFwc2VkU3RhdGUsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVzaXplU3RhcnQgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBpbml0aWFsWCA9IGV2ZW50LnBhZ2VYO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGluaXRpYWxYLCBtb3VzZUlzRG93bjogdHJ1ZSB9KTtcblxuICAgIC8vIGF0dGFjaCBoYW5kbGVycyAoaGFuZGxlUmVzaXplU3RhcnQgaXMgYSBib3VuZCB0byBvbk1vdXNlRG93bilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIGluaXRpYWxpemVEcmFnID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBuYXZpZ2F0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlbHRhID0gZXZlbnQucGFnZVggLSB0aGlzLnN0YXRlLmluaXRpYWxYO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IG5hdmlnYXRpb24uc3RhdGU7XG5cbiAgICAvLyBvbmx5IGluaXRpYWxpemUgd2hlbiBkcmFnIGludGVudGlvbiBpcyBcImV4cGFuZFwiXG4gICAgaWYgKGlzQ29sbGFwc2VkICYmIGRlbHRhIDw9IDApIHtcbiAgICAgIHRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBpbml0aWFsV2lkdGggPSBuYXZpZ2F0aW9uLnN0YXRlLnByb2R1Y3ROYXZXaWR0aDtcbiAgICBsZXQgZGlkRHJhZ09wZW4gPSBmYWxzZTtcblxuICAgIC8vIE5PVEVcbiAgICAvLyBpZiB0aGUgcHJvZHVjdCBuYXYgaXMgY29sbGFwc2VkIGFuZCB0aGUgY29uc3VtZXIgc3RhcnRzIGRyYWdnaW5nIGl0IG9wZW5cbiAgICAvLyB3ZSBtdXN0IGV4cGFuZCBpdCBhbmQgZHJhZyBzaG91bGQgc3RhcnQgZnJvbSAwLlxuICAgIGlmIChpc0NvbGxhcHNlZCkge1xuICAgICAgaW5pdGlhbFdpZHRoID0gQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VEO1xuICAgICAgZGlkRHJhZ09wZW4gPSB0cnVlO1xuICAgICAgbmF2aWdhdGlvbi5tYW51YWxSZXNpemVTdGFydCh7XG4gICAgICAgIHByb2R1Y3ROYXZXaWR0aDogQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VELFxuICAgICAgICBpc0NvbGxhcHNlZDogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmF2aWdhdGlvbi5tYW51YWxSZXNpemVTdGFydChuYXZpZ2F0aW9uLnN0YXRlKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZGlkRHJhZ09wZW4sIGluaXRpYWxXaWR0aCwgaXNEcmFnZ2luZzogdHJ1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVSZXNpemUgPSByYWYoKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBtdXRhdGlvblJlZnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpbml0aWFsWCwgaW5pdGlhbFdpZHRoLCBpc0RyYWdnaW5nLCBtb3VzZUlzRG93biB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIC8vIG9uIG9jY2FzaW9uIGEgbW91c2UgbW92ZSBldmVudCBvY2N1cnMgYmVmb3JlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAvLyBoYXZlIGEgY2hhbmNlIHRvIGRldGFjaFxuICAgIGlmICghbW91c2VJc0Rvd24pIHJldHVybjtcblxuICAgIC8vIGluaXRpYWxpemUgZHJhZ2dpbmdcbiAgICBpZiAoIWlzRHJhZ2dpbmcpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZURyYWcoZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFsbG93IHRoZSBwcm9kdWN0IG5hdiB0byBiZSA3NSUgb2YgdGhlIGF2YWlsYWJsZSBwYWdlIHdpZHRoXG4gICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLnJvdW5kKCh3aW5kb3cuaW5uZXJXaWR0aCAvIDQpICogMyk7XG4gICAgY29uc3QgbWluV2lkdGggPSBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQ7XG4gICAgY29uc3QgYWRqdXN0ZWRNYXggPSBtYXhXaWR0aCAtIGluaXRpYWxXaWR0aCAtIEdMT0JBTF9OQVZfV0lEVEg7XG4gICAgY29uc3QgYWRqdXN0ZWRNaW4gPSBtaW5XaWR0aCAtIGluaXRpYWxXaWR0aDtcblxuICAgIGNvbnN0IGRlbHRhID0gTWF0aC5tYXgoXG4gICAgICBNYXRoLm1pbihldmVudC5wYWdlWCAtIGluaXRpYWxYLCBhZGp1c3RlZE1heCksXG4gICAgICBhZGp1c3RlZE1pbixcbiAgICApO1xuICAgIGNvbnN0IHdpZHRoID0gaW5pdGlhbFdpZHRoICsgZGVsdGE7XG5cbiAgICAvLyBhcHBseSB1cGRhdGVkIHN0eWxlcyB0byB0aGUgYXBwbGljYWJsZSBET00gbm9kZXNcbiAgICB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24obXV0YXRpb25SZWZzLCB3aWR0aCk7XG5cbiAgICAvLyBOT1RFOiBoaWphY2sgdGhlIG1hdWFsIHJlc2l6ZSBhbmQgZm9yY2UgY29sbGFwc2UsIGNhbmNlbHMgbW91c2UgZXZlbnRzXG4gICAgaWYgKGV2ZW50LmNsaWVudFggPCAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgd2lkdGg6IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRCB9KTtcbiAgICAgIHRoaXMuaGFuZGxlUmVzaXplRW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1haW50YWluIGludGVybmFsIHdpZHRoLCBhcHBsaWVkIHRvIG5hdmlnYXRpb24gc3RhdGUgb24gcmVzaXplIGVuZFxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlbHRhLCB3aWR0aCB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGhhbmRsZVJlc2l6ZUVuZCA9ICgpID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24sIGNyZWF0ZUFuYWx5dGljc0V2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZGVsdGEsIGRpZERyYWdPcGVuLCBpc0RyYWdnaW5nLCB3aWR0aDogY3VycmVudFdpZHRoIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGV4cGFuZFRocmVzaG9sZCA9IDI0O1xuICAgIGNvbnN0IHJlc2l6ZXJDbGlja2VkID0gIWlzRHJhZ2dpbmcgJiYgIXRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQ7XG4gICAgbGV0IHB1Ymxpc2hXaWR0aCA9IGN1cnJlbnRXaWR0aDtcbiAgICBsZXQgc2hvdWxkQ29sbGFwc2UgPSBmYWxzZTtcblxuICAgIC8vIGNoZWNrIGlmIHRoZSBpbnRlbnRpb24gd2FzIGp1c3QgYSBjbGljaywgYW5kIHRvZ2dsZVxuICAgIGlmIChyZXNpemVyQ2xpY2tlZCkge1xuICAgICAgcHVibGlzaFdpZHRoID0gTWF0aC5tYXgoQ09OVEVOVF9OQVZfV0lEVEgsIGN1cnJlbnRXaWR0aCk7XG4gICAgICB0aGlzLnRvZ2dsZUNvbGxhcHNlKCdyZXNpemVyQ2xpY2snKTtcbiAgICB9XG5cbiAgICAvLyBwcmV2ZW50IHRoZSB1c2VyIGZyb20gY3JlYXRpbmcgYW4gdW51c2FibGUgd2lkdGhcbiAgICBpZiAocHVibGlzaFdpZHRoIDwgQ09OVEVOVF9OQVZfV0lEVEgpIHtcbiAgICAgIHB1Ymxpc2hXaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIO1xuICAgICAgaWYgKGRpZERyYWdPcGVuICYmIGRlbHRhID4gZXhwYW5kVGhyZXNob2xkKSB7XG4gICAgICAgIHNob3VsZENvbGxhcHNlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRXaWR0aCA8IEdMT0JBTF9OQVZfQ09MTEFQU0VfVEhSRVNIT0xEKSB7XG4gICAgICAgIHNob3VsZENvbGxhcHNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkQ29sbGFwc2UgPSBuYXZpZ2F0aW9uLnN0YXRlLmlzQ29sbGFwc2VkO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICFyZXNpemVyQ2xpY2tlZCAmJlxuICAgICAgKChkaWREcmFnT3BlbiAmJiAhc2hvdWxkQ29sbGFwc2UpIHx8ICghZGlkRHJhZ09wZW4gJiYgc2hvdWxkQ29sbGFwc2UpKVxuICAgICkge1xuICAgICAgbmF2aWdhdGlvbkV4cGFuZGVkQ29sbGFwc2VkKGNyZWF0ZUFuYWx5dGljc0V2ZW50LCB7XG4gICAgICAgIHRyaWdnZXI6ICdyZXNpemVyRHJhZycsXG4gICAgICAgIGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHJlc2V0IGV2ZXJ5dGhpbmdcbiAgICB0aGlzLmludmFsaWREcmFnQXR0ZW1wdGVkID0gZmFsc2U7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaWREcmFnT3BlbjogZmFsc2UsXG4gICAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICAgIG1vdXNlSXNEb3duOiBmYWxzZSxcbiAgICAgIHdpZHRoOiBwdWJsaXNoV2lkdGgsXG4gICAgfSk7XG5cbiAgICAvLyBwdWJsaXNoIHRoZSBuZXcgd2lkdGgsIG9uY2UgcmVzaXppbmcgY29tcGxldGVzXG4gICAgbmF2aWdhdGlvbi5tYW51YWxSZXNpemVFbmQoe1xuICAgICAgcHJvZHVjdE5hdldpZHRoOiBwdWJsaXNoV2lkdGgsXG4gICAgICBpc0NvbGxhcHNlZDogc2hvdWxkQ29sbGFwc2UsXG4gICAgfSk7XG5cbiAgICBpZiAoc2hvdWxkUmVzZXRHcmFiQXJlYShjdXJyZW50V2lkdGgpKSB7XG4gICAgICB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24odGhpcy5wcm9wcy5tdXRhdGlvblJlZnMsIENPTlRFTlRfTkFWX1dJRFRIKTtcbiAgICB9XG5cbiAgICAvLyBjbGVhbnVwXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlUmVzaXplRW5kKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNEcmFnZ2luZyxcbiAgICAgIG1vdXNlSXNEb3duLFxuICAgICAgbW91c2VJc092ZXJHcmFiQXJlYSxcbiAgICAgIHNob3dHcmFiQXJlYSxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50LFxuICAgICAgZXhwYW5kQ29sbGFwc2VBZmZvcmRhbmNlUmVmLFxuICAgICAgZmx5b3V0SXNPcGVuLFxuICAgICAgaXNEaXNhYmxlZDogaXNSZXNpemVEaXNhYmxlZCxcbiAgICAgIGlzR3JhYkFyZWFEaXNhYmxlZCxcbiAgICAgIG9uTW91c2VPdmVyQnV0dG9uQnVmZmVyLFxuICAgICAgbmF2aWdhdGlvbixcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzQ29sbGFwc2VkIH0gPSBuYXZpZ2F0aW9uLnN0YXRlO1xuXG4gICAgLy8gdGhlIGJ1dHRvbiBzaG91bGRuJ3QgXCJmbGlwXCIgdW50aWwgdGhlIGRyYWcgaXMgY29tcGxldGVcbiAgICBsZXQgQnV0dG9uSWNvbiA9IENoZXZyb25MZWZ0O1xuICAgIGlmIChpc0NvbGxhcHNlZCkgQnV0dG9uSWNvbiA9IENoZXZyb25SaWdodDtcblxuICAgIGNvbnN0IGJ1dHRvbiA9IChcbiAgICAgIDxCdXR0b25cbiAgICAgICAgb25DbGljaz17dGhpcy5vblJlc2l6ZXJDaGV2cm9uQ2xpY2t9XG4gICAgICAgIG9uTW91c2VEb3duPXtwcmV2ZW50RGVmYXVsdH1cbiAgICAgICAgaGl0QXJlYVNpemU9e29uTW91c2VPdmVyQnV0dG9uQnVmZmVyID8gJ2xhcmdlJyA6ICdzbWFsbCd9XG4gICAgICAgIC8vIG1haW50YWluIHN0eWxlcyB3aGVuIHVzZXIgaXMgZHJhZ2dpbmdcbiAgICAgICAgaXNWaXNpYmxlPXtpc0NvbGxhcHNlZCB8fCBtb3VzZUlzRG93bn1cbiAgICAgICAgaGFzSGlnaGxpZ2h0PXttb3VzZUlzRG93biB8fCBtb3VzZUlzT3ZlckdyYWJBcmVhfVxuICAgICAgICBpbm5lclJlZj17ZXhwYW5kQ29sbGFwc2VBZmZvcmRhbmNlUmVmfVxuICAgICAgICBhcmlhLWV4cGFuZGVkPXshaXNDb2xsYXBzZWR9XG4gICAgICAgIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiXG4gICAgICA+XG4gICAgICAgIDxCdXR0b25JY29uIC8+XG4gICAgICA8L0J1dHRvbj5cbiAgICApO1xuICAgIGNvbnN0IHNoYWRvd0RpcmVjdGlvbiA9IGZseW91dElzT3BlbiA/ICd0byByaWdodCcgOiAndG8gbGVmdCc7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE91dGVyPlxuICAgICAgICB7aXNEcmFnZ2luZyAmJiA8Qm9keURyYWdDdXJzb3IgLz59XG4gICAgICAgIDxTaGFkb3cgZGlyZWN0aW9uPXtzaGFkb3dEaXJlY3Rpb259IGlzQm9sZD17bW91c2VJc0Rvd259IC8+XG4gICAgICAgIHshaXNSZXNpemVEaXNhYmxlZCAmJiAoXG4gICAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgeyFpc0dyYWJBcmVhRGlzYWJsZWQgJiYgc2hvd0dyYWJBcmVhICYmIChcbiAgICAgICAgICAgICAgPEdyYWJBcmVhXG4gICAgICAgICAgICAgICAgaXNCb2xkPXttb3VzZUlzRG93bn1cbiAgICAgICAgICAgICAgICBzaG93SGFuZGxlPXttb3VzZUlzRG93biB8fCBtb3VzZUlzT3ZlckdyYWJBcmVhfVxuICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5tb3VzZUVudGVyR3JhYkFyZWF9XG4gICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLm1vdXNlTGVhdmVHcmFiQXJlYX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17dGhpcy5oYW5kbGVSZXNpemVTdGFydH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2IG9uTW91c2VPdmVyPXshZmx5b3V0SXNPcGVuID8gb25Nb3VzZU92ZXJCdXR0b25CdWZmZXIgOiBudWxsfT5cbiAgICAgICAgICAgICAge2NvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQgPyAoXG4gICAgICAgICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9e21ha2VUb29sdGlwTm9kZShcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VUb2dnbGVUb29sdGlwQ29udGVudChpc0NvbGxhcHNlZCksXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgZGVsYXk9ezYwMH1cbiAgICAgICAgICAgICAgICAgIGhpZGVUb29sdGlwT25DbGlja1xuICAgICAgICAgICAgICAgICAgcG9zaXRpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2J1dHRvbn1cbiAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgYnV0dG9uXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICApfVxuICAgICAgPC9PdXRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IFJlc2l6ZUNvbnRyb2wgYXMgUmVzaXplQ29udHJvbEJhc2UgfTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aEFuYWx5dGljc0V2ZW50cygpKFJlc2l6ZUNvbnRyb2wpO1xuIl19 */")
  }), children);
}; // tinker with the DOM directly by setting style properties, updates the grab bar position by changing padding-left and width.


function updateResizeAreaPosition(elements, width) {
  elements.forEach(function (_ref3) {
    var property = _ref3.property,
        ref = _ref3.ref;
    var newValue = "".concat(width, "px");
    var oldValue = ref.style.getPropertyValue(property); // avoid thrashing

    if (oldValue === newValue) return; // direct attribute manipulation

    ref.style.setProperty(property, newValue);
  });
} // helper for tooltip content keyboard shortcut highlight


var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "jeedki",
  styles: "align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;"
} : {
  name: "jeedki",
  styles: "align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function makeTooltipNode(_ref4) {
  var text = _ref4.text,
      char = _ref4.char;
  return ___EmotionJSX("div", {
    css: _ref5
  }, ___EmotionJSX("span", null, text), ___EmotionJSX("div", {
    css:
    /*#__PURE__*/
    _css({
      backgroundColor: colors.N400,
      borderRadius: 2,
      lineHeight: 1.2,
      marginLeft: 4,
      padding: '1px 8px'
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, char));
}
/* NOTE: experimental props use an underscore */


var ResizeControl =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(ResizeControl, _PureComponent);

  function ResizeControl() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ResizeControl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResizeControl)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "invalidDragAttempted", false);

    _defineProperty(_assertThisInitialized(_this), "lastWidth", void 0);

    _defineProperty(_assertThisInitialized(_this), "wrapper", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", {
      delta: 0,
      didDragOpen: false,
      isDragging: false,
      initialWidth: 0,
      initialX: 0,
      mouseIsDown: false,
      mouseIsOverGrabArea: false,
      showGrabArea: true,
      width: _this.props.navigation.state.productNavWidth
    });

    _defineProperty(_assertThisInitialized(_this), "onResizerChevronClick", function () {
      var trigger = _this.props.flyoutIsOpen ? 'chevronHover' : 'chevron';

      _this.toggleCollapse(trigger);
    });

    _defineProperty(_assertThisInitialized(_this), "mouseEnterGrabArea", function () {
      _this.setState({
        mouseIsOverGrabArea: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "mouseLeaveGrabArea", function () {
      _this.setState({
        mouseIsOverGrabArea: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleCollapse", function (trigger) {
      var _this$props = _this.props,
          navigation = _this$props.navigation,
          createAnalyticsEvent = _this$props.createAnalyticsEvent;
      var newCollapsedState = !navigation.state.isCollapsed;
      navigation.toggleCollapse();
      navigationExpandedCollapsed(createAnalyticsEvent, {
        trigger: trigger,
        isCollapsed: newCollapsedState
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleResizeStart", function (event) {
      var initialX = event.pageX;

      _this.setState({
        initialX: initialX,
        mouseIsDown: true
      }); // attach handlers (handleResizeStart is a bound to onMouseDown)


      window.addEventListener('mousemove', _this.handleResize);
      window.addEventListener('mouseup', _this.handleResizeEnd);
    });

    _defineProperty(_assertThisInitialized(_this), "initializeDrag", function (event) {
      var navigation = _this.props.navigation;
      var delta = event.pageX - _this.state.initialX;
      var isCollapsed = navigation.state.isCollapsed; // only initialize when drag intention is "expand"

      if (isCollapsed && delta <= 0) {
        _this.invalidDragAttempted = true;
        return;
      }

      var initialWidth = navigation.state.productNavWidth;
      var didDragOpen = false; // NOTE
      // if the product nav is collapsed and the consumer starts dragging it open
      // we must expand it and drag should start from 0.

      if (isCollapsed) {
        initialWidth = CONTENT_NAV_WIDTH_COLLAPSED;
        didDragOpen = true;
        navigation.manualResizeStart({
          productNavWidth: CONTENT_NAV_WIDTH_COLLAPSED,
          isCollapsed: false
        });
      } else {
        navigation.manualResizeStart(navigation.state);
      }

      _this.setState({
        didDragOpen: didDragOpen,
        initialWidth: initialWidth,
        isDragging: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleResize", raf(function (event) {
      var mutationRefs = _this.props.mutationRefs;
      var _this$state = _this.state,
          initialX = _this$state.initialX,
          initialWidth = _this$state.initialWidth,
          isDragging = _this$state.isDragging,
          mouseIsDown = _this$state.mouseIsDown; // on occasion a mouse move event occurs before the event listeners
      // have a chance to detach

      if (!mouseIsDown) return; // initialize dragging

      if (!isDragging) {
        _this.initializeDrag(event);

        return;
      } // allow the product nav to be 75% of the available page width


      var maxWidth = Math.round(window.innerWidth / 4 * 3);
      var minWidth = CONTENT_NAV_WIDTH_COLLAPSED;
      var adjustedMax = maxWidth - initialWidth - GLOBAL_NAV_WIDTH;
      var adjustedMin = minWidth - initialWidth;
      var delta = Math.max(Math.min(event.pageX - initialX, adjustedMax), adjustedMin);
      var width = initialWidth + delta; // apply updated styles to the applicable DOM nodes

      updateResizeAreaPosition(mutationRefs, width); // NOTE: hijack the maual resize and force collapse, cancels mouse events

      if (event.clientX < 0) {
        _this.setState({
          width: CONTENT_NAV_WIDTH_COLLAPSED
        });

        _this.handleResizeEnd();
      } else {
        // maintain internal width, applied to navigation state on resize end
        _this.setState({
          delta: delta,
          width: width
        });
      }
    }));

    _defineProperty(_assertThisInitialized(_this), "handleResizeEnd", function () {
      var _this$props2 = _this.props,
          navigation = _this$props2.navigation,
          createAnalyticsEvent = _this$props2.createAnalyticsEvent;
      var _this$state2 = _this.state,
          delta = _this$state2.delta,
          didDragOpen = _this$state2.didDragOpen,
          isDragging = _this$state2.isDragging,
          currentWidth = _this$state2.width;
      var expandThreshold = 24;
      var resizerClicked = !isDragging && !_this.invalidDragAttempted;
      var publishWidth = currentWidth;
      var shouldCollapse = false; // check if the intention was just a click, and toggle

      if (resizerClicked) {
        publishWidth = Math.max(CONTENT_NAV_WIDTH, currentWidth);

        _this.toggleCollapse('resizerClick');
      } // prevent the user from creating an unusable width


      if (publishWidth < CONTENT_NAV_WIDTH) {
        publishWidth = CONTENT_NAV_WIDTH;

        if (didDragOpen && delta > expandThreshold) {
          shouldCollapse = false;
        } else if (currentWidth < GLOBAL_NAV_COLLAPSE_THRESHOLD) {
          shouldCollapse = true;
        }
      } else {
        shouldCollapse = navigation.state.isCollapsed;
      }

      if (!resizerClicked && (didDragOpen && !shouldCollapse || !didDragOpen && shouldCollapse)) {
        navigationExpandedCollapsed(createAnalyticsEvent, {
          trigger: 'resizerDrag',
          isCollapsed: shouldCollapse
        });
      } // reset everything


      _this.invalidDragAttempted = false;

      _this.setState({
        didDragOpen: false,
        isDragging: false,
        mouseIsDown: false,
        width: publishWidth
      }); // publish the new width, once resizing completes


      navigation.manualResizeEnd({
        productNavWidth: publishWidth,
        isCollapsed: shouldCollapse
      });

      if (shouldResetGrabArea(currentWidth)) {
        updateResizeAreaPosition(_this.props.mutationRefs, CONTENT_NAV_WIDTH);
      } // cleanup


      window.removeEventListener('mousemove', _this.handleResize);
      window.removeEventListener('mouseup', _this.handleResizeEnd);
    });

    return _this;
  }

  _createClass(ResizeControl, [{
    key: "render",
    value: function render() {
      var _this$state3 = this.state,
          isDragging = _this$state3.isDragging,
          mouseIsDown = _this$state3.mouseIsDown,
          mouseIsOverGrabArea = _this$state3.mouseIsOverGrabArea,
          showGrabArea = _this$state3.showGrabArea;
      var _this$props3 = this.props,
          collapseToggleTooltipContent = _this$props3.collapseToggleTooltipContent,
          expandCollapseAffordanceRef = _this$props3.expandCollapseAffordanceRef,
          flyoutIsOpen = _this$props3.flyoutIsOpen,
          isResizeDisabled = _this$props3.isDisabled,
          isGrabAreaDisabled = _this$props3.isGrabAreaDisabled,
          onMouseOverButtonBuffer = _this$props3.onMouseOverButtonBuffer,
          navigation = _this$props3.navigation;
      var isCollapsed = navigation.state.isCollapsed; // the button shouldn't "flip" until the drag is complete

      var ButtonIcon = ChevronLeft;
      if (isCollapsed) ButtonIcon = ChevronRight;

      var button = ___EmotionJSX(Button, {
        onClick: this.onResizerChevronClick,
        onMouseDown: preventDefault,
        hitAreaSize: onMouseOverButtonBuffer ? 'large' : 'small' // maintain styles when user is dragging
        ,
        isVisible: isCollapsed || mouseIsDown,
        hasHighlight: mouseIsDown || mouseIsOverGrabArea,
        innerRef: expandCollapseAffordanceRef,
        "aria-expanded": !isCollapsed,
        "aria-label": "Toggle navigation"
      }, ___EmotionJSX(ButtonIcon, null));

      var shadowDirection = flyoutIsOpen ? 'to right' : 'to left';
      return ___EmotionJSX(Outer, null, isDragging && ___EmotionJSX(BodyDragCursor, null), ___EmotionJSX(Shadow, {
        direction: shadowDirection,
        isBold: mouseIsDown
      }), !isResizeDisabled && ___EmotionJSX(Fragment, null, !isGrabAreaDisabled && showGrabArea && ___EmotionJSX(GrabArea, {
        isBold: mouseIsDown,
        showHandle: mouseIsDown || mouseIsOverGrabArea,
        onMouseEnter: this.mouseEnterGrabArea,
        onMouseLeave: this.mouseLeaveGrabArea,
        onMouseDown: this.handleResizeStart
      }), ___EmotionJSX("div", {
        onMouseOver: !flyoutIsOpen ? onMouseOverButtonBuffer : null
      }, collapseToggleTooltipContent ? ___EmotionJSX(Tooltip, {
        content: makeTooltipNode(collapseToggleTooltipContent(isCollapsed)),
        delay: 600,
        hideTooltipOnClick: true,
        position: "right"
      }, button) : button)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var EXPERIMENTAL_FLYOUT_ON_HOVER = props.experimental_flyoutOnHover,
          flyoutIsOpen = props.flyoutIsOpen,
          navigation = props.navigation;
      var isCollapsed = navigation.state.isCollapsed; // resolve "hover locking" issue with resize grab area

      if (EXPERIMENTAL_FLYOUT_ON_HOVER) {
        var showGrabArea = !isCollapsed && !flyoutIsOpen;
        var mouseIsOverGrabArea = showGrabArea ? state.mouseIsOverGrabArea : false;
        return {
          mouseIsOverGrabArea: mouseIsOverGrabArea,
          showGrabArea: showGrabArea
        };
      }

      return null;
    }
  }]);

  return ResizeControl;
}(PureComponent);

_defineProperty(ResizeControl, "defaultProps", {
  isGrabAreaDisabled: false
});

export { ResizeControl as ResizeControlBase };
export default withAnalyticsEvents()(ResizeControl);