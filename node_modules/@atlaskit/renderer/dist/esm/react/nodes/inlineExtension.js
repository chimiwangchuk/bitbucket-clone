import { __assign } from "tslib";
import React from 'react';
import { renderNodes } from '../..';
import ExtensionRenderer from '../../ui/ExtensionRenderer';
var InlineExtension = function (props) {
    var serializer = props.serializer, rendererContext = props.rendererContext, text = props.text;
    return (React.createElement(ExtensionRenderer, __assign({}, props, { type: "inlineExtension" }), function (_a) {
        var result = _a.result;
        try {
            switch (true) {
                case result && React.isValidElement(result):
                    // Return the result directly if it's a valid JSX.Element
                    return React.createElement("span", null, result);
                case !!result:
                    // We expect it to be Atlassian Document here
                    var nodes = Array.isArray(result) ? result : [result];
                    return renderNodes(nodes, serializer, rendererContext.schema, 'span');
            }
        }
        catch (e) {
            /** We don't want this error to block renderer */
            /** We keep rendering the default content */
        }
        // Always return default content if anything goes wrong
        return React.createElement("span", null, text || 'inlineExtension');
    }));
};
export default InlineExtension;
//# sourceMappingURL=inlineExtension.js.map