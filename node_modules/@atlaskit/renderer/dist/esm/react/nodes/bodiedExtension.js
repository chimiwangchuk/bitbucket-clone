import { __assign } from "tslib";
import React from 'react';
import { renderNodes } from '../..';
import { renderExtension } from './extension';
import ExtensionRenderer from '../../ui/ExtensionRenderer';
var BodiedExtension = function (props) {
    var serializer = props.serializer, rendererContext = props.rendererContext, children = props.children, _a = props.layout, layout = _a === void 0 ? 'default' : _a;
    return (React.createElement(ExtensionRenderer, __assign({}, props, { type: "bodiedExtension" }), function (_a) {
        var result = _a.result;
        try {
            switch (true) {
                case result && React.isValidElement(result):
                    // Return the content directly if it's a valid JSX.Element
                    return renderExtension(result, layout);
                case !!result:
                    // We expect it to be Atlassian Document here
                    var nodes = Array.isArray(result) ? result : [result];
                    return renderNodes(nodes, serializer, rendererContext.schema, 'div');
            }
        }
        catch (e) {
            /** We don't want this error to block renderer */
            /** We keep rendering the default content */
        }
        // Always return default content if anything goes wrong
        return renderExtension(children, layout);
    }));
};
export default BodiedExtension;
//# sourceMappingURL=bodiedExtension.js.map