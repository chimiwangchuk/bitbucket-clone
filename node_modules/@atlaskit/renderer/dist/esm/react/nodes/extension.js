import { __assign } from "tslib";
import React from 'react';
import { renderNodes } from '../..';
import ExtensionRenderer from '../../ui/ExtensionRenderer';
import { calcBreakoutWidth, overflowShadow, WidthConsumer, } from '@atlaskit/editor-common';
import { RendererCssClassName } from '../../consts';
export var renderExtension = function (content, layout, options) {
    return (React.createElement(WidthConsumer, null, function (_a) {
        var width = _a.width;
        return (React.createElement("div", { ref: options && options.handleRef, className: RendererCssClassName.EXTENSION + " " + (options &&
                options.shadowClassNames), style: {
                width: calcBreakoutWidth(layout, width),
            }, "data-layout": layout },
            React.createElement("div", { className: RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER }, content)));
    }));
};
var Extension = function (props) {
    var serializer = props.serializer, rendererContext = props.rendererContext, text = props.text, _a = props.layout, layout = _a === void 0 ? 'default' : _a, handleRef = props.handleRef, shadowClassNames = props.shadowClassNames;
    return (React.createElement(ExtensionRenderer, __assign({}, props, { type: "extension" }), function (_a) {
        var result = _a.result;
        try {
            switch (true) {
                case result && React.isValidElement(result):
                    // Return the result directly if it's a valid JSX.Element
                    return renderExtension(result, layout, {
                        handleRef: handleRef,
                        shadowClassNames: shadowClassNames,
                    });
                case !!result:
                    // We expect it to be Atlassian Document here
                    var nodes = Array.isArray(result) ? result : [result];
                    return renderNodes(nodes, serializer, rendererContext.schema, 'div');
            }
        }
        catch (e) {
            /** We don't want this error to block renderer */
            /** We keep rendering the default content */
        }
        // Always return default content if anything goes wrong
        return renderExtension(text || 'extension', layout, {
            handleRef: handleRef,
            shadowClassNames: shadowClassNames,
        });
    }));
};
export default overflowShadow(Extension, {
    overflowSelector: "." + RendererCssClassName.EXTENSION_OVERFLOW_CONTAINER,
});
//# sourceMappingURL=extension.js.map