import { __assign, __makeTemplateObject } from "tslib";
import React from 'react';
import { colors } from '@atlaskit/theme';
import { mediaSingleClassName } from '@atlaskit/editor-common';
import styled from 'styled-components';
import { getEventHandler } from '../../utils';
import { PLATFORM, MODE } from '../../analytics/events';
import { ACTION, ACTION_SUBJECT, ACTION_SUBJECT_ID, EVENT_TYPE, } from '../../analytics/enums';
export var defaultMediaLinkOpacity = '0.8';
var StyledAnchor = styled.a(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  color: ", ";\n\n  & > .", " {\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n    ", "\n\n  }\n\n  &:hover {\n    & > .", " {\n      opacity: ", ";\n    }\n\n    color: ", ";\n    text-decoration: underline;\n  }\n"], ["\n  ",
    "\n  color: ", ";\n\n  & > .", " {\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n    ",
    "\n\n  }\n\n  &:hover {\n    & > .", " {\n      opacity: ", ";\n    }\n\n    color: ", ";\n    text-decoration: underline;\n  }\n"])), function (props) {
    return props.isMediaLink
        ? "pointer-events: none;\n         cursor: default;\n         display: block;"
        : '';
}, colors.B400, mediaSingleClassName, function (props) {
    return props.isMediaLink
        ? "pointer-events: all;\n           cursor: pointer;"
        : '';
}, mediaSingleClassName, defaultMediaLinkOpacity, colors.B300);
export default function Link(props) {
    var href = props.href, target = props.target, eventHandlers = props.eventHandlers, fireAnalyticsEvent = props.fireAnalyticsEvent, _a = props.isMediaLink, isMediaLink = _a === void 0 ? false : _a;
    var handler = getEventHandler(eventHandlers, 'link');
    var anchorProps = {
        href: href,
        target: target,
        title: href,
        isMediaLink: isMediaLink,
    };
    var onClick = function (e) {
        if (fireAnalyticsEvent) {
            if (props.isMediaLink) {
                fireAnalyticsEvent({
                    action: ACTION.VISITED,
                    actionSubject: ACTION_SUBJECT.MEDIA_SINGLE,
                    actionSubjectId: ACTION_SUBJECT_ID.MEDIA_LINK,
                    eventType: EVENT_TYPE.TRACK,
                    attributes: {
                        platform: PLATFORM.WEB,
                        mode: MODE.RENDERER,
                    },
                });
            }
            else {
                fireAnalyticsEvent({
                    action: ACTION.VISITED,
                    actionSubject: ACTION_SUBJECT.LINK,
                    eventType: EVENT_TYPE.TRACK,
                    attributes: {
                        platform: PLATFORM.WEB,
                        mode: MODE.RENDERER,
                    },
                });
            }
        }
        if (handler) {
            handler(e, href);
        }
    };
    if (target === '_blank') {
        anchorProps.rel = 'noreferrer noopener';
    }
    // In Renderer, if the Link is a MediaLink, and it is clicked, we want to stop propagation to any of the children.
    if (isMediaLink) {
        anchorProps.onClickCapture = function (e) {
            onClick(e);
            e.stopPropagation();
        };
    }
    else {
        anchorProps.onClick = onClick;
    }
    return React.createElement(StyledAnchor, __assign({}, anchorProps), props.children);
}
var templateObject_1;
//# sourceMappingURL=link.js.map