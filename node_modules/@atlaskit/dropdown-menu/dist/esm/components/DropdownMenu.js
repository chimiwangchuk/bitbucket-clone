import { __extends, __read, __spread } from "tslib";
import React, { Component } from 'react';
import StatelessMenu from './DropdownMenuStateless';
var DropdownMenu = /** @class */ (function (_super) {
    __extends(DropdownMenu, _super);
    function DropdownMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: _this.props.defaultOpen,
            items: __spread(_this.props.items),
        };
        _this.findActivatedGroup = function (item) {
            return _this.state.items.filter(function (group) { return group.items.indexOf(item) > -1; })[0];
        }; // eslint-disable-line
        _this.handleItemActivation = function (attrs) {
            var activatedItem = attrs.item;
            var activatedGroup = _this.findActivatedGroup(activatedItem);
            var items = __spread(_this.state.items);
            switch (activatedItem.type) {
                case 'checkbox':
                    activatedItem.isChecked = !activatedItem.isChecked;
                    _this.props.onItemActivated({ item: activatedItem });
                    _this.setState({ items: items });
                    break;
                case 'radio':
                    activatedGroup.items.forEach(function (i) {
                        if (i === activatedItem) {
                            i.isChecked = true; // eslint-disable-line no-param-reassign
                        }
                        else {
                            i.isChecked = false; // eslint-disable-line no-param-reassign
                        }
                    });
                    _this.props.onItemActivated({ item: activatedItem });
                    _this.setState({ items: items });
                    break;
                case 'link':
                default:
                    _this.props.onItemActivated({ item: activatedItem });
                    _this.close();
                    break;
            }
        };
        _this.handleOpenChange = function (attrs) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (_this.state.isOpen === attrs.isOpen)
                return;
            _this.setState({ isOpen: attrs.isOpen });
            (_a = _this.props).onOpenChange.apply(_a, __spread([attrs], args));
        };
        _this.close = function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (_this.state.isOpen === false)
                return;
            _this.setState({ isOpen: false });
            (_a = _this.props).onOpenChange.apply(_a, __spread([{ isOpen: false }], args));
        };
        return _this;
    }
    DropdownMenu.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        if (nextProps.items !== this.state.items) {
            this.setState({ items: __spread(nextProps.items) });
        }
        if (nextProps.isOpen !== this.props.isOpen) {
            this.setState({ isOpen: nextProps.isOpen });
        }
    };
    DropdownMenu.prototype.render = function () {
        var isOpen = this.state.isOpen;
        var _a = this.props, appearance = _a.appearance, boundariesElement = _a.boundariesElement, children = _a.children, isLoading = _a.isLoading, items = _a.items, position = _a.position, isMenuFixed = _a.isMenuFixed, shouldAllowMultilineItems = _a.shouldAllowMultilineItems, shouldFitContainer = _a.shouldFitContainer, shouldFlip = _a.shouldFlip, testId = _a.testId, trigger = _a.trigger, triggerButtonProps = _a.triggerButtonProps, triggerType = _a.triggerType, onPositioned = _a.onPositioned;
        return (React.createElement(StatelessMenu, { appearance: appearance, boundariesElement: boundariesElement, isOpen: isOpen, isLoading: isLoading, items: items, onItemActivated: this.handleItemActivation, onOpenChange: this.handleOpenChange, position: position, isMenuFixed: isMenuFixed, shouldAllowMultilineItems: shouldAllowMultilineItems, shouldFitContainer: shouldFitContainer, shouldFlip: shouldFlip, trigger: trigger, triggerButtonProps: triggerButtonProps, triggerType: triggerType, onPositioned: onPositioned, testId: testId }, children));
    };
    DropdownMenu.defaultProps = {
        appearance: 'default',
        boundariesElement: 'viewport',
        defaultOpen: false,
        isLoading: false,
        isOpen: false,
        items: [],
        onItemActivated: function () { },
        onOpenChange: function () { },
        position: 'bottom left',
        isMenuFixed: false,
        shouldAllowMultilineItems: false,
        shouldFitContainer: false,
        shouldFlip: true,
        triggerType: 'default',
        onPositioned: function () { },
    };
    return DropdownMenu;
}(Component));
export default DropdownMenu;
//# sourceMappingURL=DropdownMenu.js.map