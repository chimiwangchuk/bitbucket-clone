var _a;
import { __extends } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { focusManagerContext } from '../../util/contextNamespace';
import { KEY_DOWN, KEY_UP, KEY_TAB } from '../../util/keys';
var DropdownItemFocusManager = /** @class */ (function (_super) {
    __extends(DropdownItemFocusManager, _super);
    function DropdownItemFocusManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registeredItems = [];
        _this.handleItemRegistered = function (itemId, itemNode) {
            _this.registeredItems.push({ itemId: itemId, itemNode: itemNode });
            if (_this.props.autoFocus && _this.registeredItems.length === 1) {
                _this.focusedItemId = itemId;
                itemNode.focus();
            }
        };
        _this.handleItemDeregistered = function (itemId) {
            _this.registeredItems = _this.registeredItems.filter(function (item) { return item.itemId !== itemId; });
        };
        _this.handleItemFocused = function (itemId) {
            _this.focusedItemId = itemId;
        };
        _this.handleItemUpdated = function (itemId, itemNode) {
            var matchingIndex = -1;
            for (var i = 0; i < _this.registeredItems.length; i++) {
                if (_this.registeredItems[i].itemId === itemId) {
                    matchingIndex = i;
                    break;
                }
            }
            if (matchingIndex === -1) {
                _this.handleItemRegistered(itemId, itemNode);
                return;
            }
            _this.registeredItems[matchingIndex].itemNode = itemNode;
            if (_this.focusedItemIndex() === matchingIndex) {
                itemNode.focus();
            }
        };
        _this.focusedItemIndex = function () {
            var _a = _this, focusedItemId = _a.focusedItemId, registeredItems = _a.registeredItems;
            for (var i = 0; i < registeredItems.length; i++) {
                if (registeredItems[i].itemId === focusedItemId) {
                    return i;
                }
            }
            return -1;
        };
        _this.handleKeyboard = function (event) {
            var key = event.key, shiftKey = event.shiftKey;
            var focusedItemIndex = _this.focusedItemIndex();
            if (key === KEY_UP || key === KEY_DOWN) {
                // We prevent default here to avoid page scrolling when up/down
                // pressed while dropdown is focused.
                event.preventDefault();
                if (focusedItemIndex < 0) {
                    return;
                }
                var nextItemIndex = key === KEY_UP
                    ? Math.max(0, focusedItemIndex - 1)
                    : Math.min(_this.registeredItems.length - 1, focusedItemIndex + 1);
                _this.registeredItems[nextItemIndex].itemNode.focus();
            }
            if (key === KEY_TAB) {
                if (!shiftKey && focusedItemIndex === _this.registeredItems.length - 1) {
                    if (_this.props.close)
                        _this.props.close({ event: event, source: 'keydown' });
                }
                if (shiftKey && focusedItemIndex === 0) {
                    if (_this.props.close)
                        _this.props.close({ event: event, source: 'keydown' });
                }
            }
        };
        return _this;
    }
    DropdownItemFocusManager.prototype.getChildContext = function () {
        var _a;
        return _a = {},
            _a[focusManagerContext] = {
                itemFocused: this.handleItemFocused,
                registerItem: this.handleItemRegistered,
                deregisterItem: this.handleItemDeregistered,
                updateItem: this.handleItemUpdated,
            },
            _a;
    };
    DropdownItemFocusManager.prototype.render = function () {
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
        return React.createElement("div", { onKeyDown: this.handleKeyboard }, this.props.children);
    };
    DropdownItemFocusManager.childContextTypes = (_a = {},
        // eslint-disable-next-line react/forbid-prop-types
        _a[focusManagerContext] = PropTypes.object,
        _a);
    return DropdownItemFocusManager;
}(Component));
export default DropdownItemFocusManager;
//# sourceMappingURL=DropdownItemFocusManager.js.map