var _a;
import { __extends, __read, __spread } from "tslib";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import find from 'array-find';
import { selectionCacheContext } from '../../util/contextNamespace';
var isItemInList = function (itemList, itemId, groupId) {
    return Boolean(find(itemList, function (item) { return item.id === itemId && item.groupId === groupId; }));
};
var DropdownItemSelectionCache = /** @class */ (function (_super) {
    __extends(DropdownItemSelectionCache, _super);
    function DropdownItemSelectionCache() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // Need to store selectedItemValues in state rather than component instance property
        // to ensure that re-render happens down the tree via context when selectedItemValues
        // is updated.
        _this.state = {
            lastCacheUpdate: 0,
        };
        _this.selectedItems = []; // eslint-disable-line react/sort-comp
        // If any radio/checkbox items have defaultSelected applied, we need to keep track of whether
        // each of those items has had it's state set to 'selected'. This is because when the dropdown
        // menu is closed and then opened again, all of the radio/checkbox items re-mount so they
        // try to again apply their defaultSelected status. defaultSelected should only be applied on
        // the initial mount, as users can change the value post-mount. Alternatively, products can use
        // the isSelected prop with the onClick handler to control the selected state manually if needed.
        _this.alreadyDefaultedItems = []; // eslint-disable-line react/sort-comp
        _this.handleItemSelectionsChanged = function (groupId, newGroupSelections) {
            var newSelectedItems = __spread(_this.selectedItems.filter(function (item) { return item.groupId !== groupId; }), newGroupSelections);
            _this.selectedItems = newSelectedItems;
            // We store selectedItems in an instance variable (this.selectedItems) instead of state,
            // because if multiple children update the cache at the same time it causes unexpected
            // behaviour due to the asynchronous behaviour of setState. So we need to trigger setState
            // with a different value to cause the children to be updated with their new selection values.
            _this.setState({ lastCacheUpdate: Date.now() });
        };
        return _this;
    }
    DropdownItemSelectionCache.prototype.getChildContext = function () {
        var _a;
        var _this = this;
        return _a = {},
            _a[selectionCacheContext] = {
                // This function returns true/false describing whether the supplied navigation item
                // (which must have a unique item and group ID) is currently selected - this is used
                // by radio and checkbox dropdown items to retreive their 'selected' state when they
                // re-mount, which happens when the dropdown is closed and then re-opened.
                isItemSelected: function (groupId, itemId) {
                    return isItemInList(_this.selectedItems, itemId, groupId);
                },
                itemsInGroup: function (groupId) {
                    return _this.selectedItems.filter(function (item) { return item.groupId === groupId; });
                },
                itemSelectionsChanged: this.handleItemSelectionsChanged,
                hasItemAlreadyHadDefaultSelectedApplied: function (groupId, itemId) { return isItemInList(_this.alreadyDefaultedItems, itemId, groupId); },
                markItemAsDefaultApplied: function (groupId, itemId) {
                    _this.alreadyDefaultedItems.push({ id: itemId, groupId: groupId });
                },
            },
            _a;
    };
    DropdownItemSelectionCache.prototype.render = function () {
        return React.createElement("div", null, this.props.children);
    };
    DropdownItemSelectionCache.childContextTypes = (_a = {},
        _a[selectionCacheContext] = PropTypes.shape({
            isItemSelected: PropTypes.func,
            itemsInGroup: PropTypes.func,
            itemSelectionsChanged: PropTypes.func,
        }),
        _a);
    return DropdownItemSelectionCache;
}(Component));
export default DropdownItemSelectionCache;
//# sourceMappingURL=DropdownItemSelectionCache.js.map